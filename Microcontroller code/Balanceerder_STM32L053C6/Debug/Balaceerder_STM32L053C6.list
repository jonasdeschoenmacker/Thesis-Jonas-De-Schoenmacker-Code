
Balaceerder_STM32L053C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002040  08002040  00012040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800205c  0800205c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800205c  0800205c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002064  08002064  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002068  08002068  00012068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800206c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002078  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002078  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074b8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b8  00000000  00000000  000274ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00028aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  00029210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000124e4  00000000  00000000  000298c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009429  00000000  00000000  0003bda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f855  00000000  00000000  000451cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b4a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c4  00000000  00000000  000b4a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002028 	.word	0x08002028

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002028 	.word	0x08002028

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <RGBTurnRED>:
void RGBTurnOff() {
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
}
void RGBTurnRED() {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	01db      	lsls	r3, r3, #7
 80004a4:	480a      	ldr	r0, [pc, #40]	; (80004d0 <RGBTurnRED+0x34>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	0019      	movs	r1, r3
 80004aa:	f000 fd15 	bl	8000ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 80004ae:	2380      	movs	r3, #128	; 0x80
 80004b0:	019b      	lsls	r3, r3, #6
 80004b2:	4807      	ldr	r0, [pc, #28]	; (80004d0 <RGBTurnRED+0x34>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	0019      	movs	r1, r3
 80004b8:	f000 fd0e 	bl	8000ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	015b      	lsls	r3, r3, #5
 80004c0:	4803      	ldr	r0, [pc, #12]	; (80004d0 <RGBTurnRED+0x34>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	0019      	movs	r1, r3
 80004c6:	f000 fd07 	bl	8000ed8 <HAL_GPIO_WritePin>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	50000400 	.word	0x50000400

080004d4 <RGBTurnGreen>:
void RGBTurnBlue() {
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
}
void RGBTurnGreen() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	01db      	lsls	r3, r3, #7
 80004dc:	480a      	ldr	r0, [pc, #40]	; (8000508 <RGBTurnGreen+0x34>)
 80004de:	2201      	movs	r2, #1
 80004e0:	0019      	movs	r1, r3
 80004e2:	f000 fcf9 	bl	8000ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	019b      	lsls	r3, r3, #6
 80004ea:	4807      	ldr	r0, [pc, #28]	; (8000508 <RGBTurnGreen+0x34>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	0019      	movs	r1, r3
 80004f0:	f000 fcf2 	bl	8000ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	015b      	lsls	r3, r3, #5
 80004f8:	4803      	ldr	r0, [pc, #12]	; (8000508 <RGBTurnGreen+0x34>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	0019      	movs	r1, r3
 80004fe:	f000 fceb 	bl	8000ed8 <HAL_GPIO_WritePin>
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	50000400 	.word	0x50000400

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fa48 	bl	80009a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f84c 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8fc 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051c:	f000 f8ba 	bl	8000694 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  RGBTurnRED();
 8000520:	f7ff ffbc 	bl	800049c <RGBTurnRED>
  HAL_GPIO_WritePin(EN_flyback_GPIO_Port, EN_flyback_Pin, GPIO_PIN_RESET);
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2200      	movs	r2, #0
 800052a:	2104      	movs	r1, #4
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fcd3 	bl	8000ed8 <HAL_GPIO_WritePin>
/*  HAL_TIM_Base_Start_IT(&htim22);
  HAL_TIM_PWM_Start_IT(&htim22, TIM_CHANNEL_1);
  HAL_Delay(1000);
  HAL_TIM_PWM_Stop_IT(&htim22, TIM_CHANNEL_1);
  HAL_Delay(1000);*/
  en_clk1 = 1;
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <main+0x90>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
  en_clk2 = 0;
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <main+0x94>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
  en_clk3 = 0;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <main+0x98>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
  en_clk4 = 1;
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <main+0x9c>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]

  RGBTurnGreen();
 800054a:	f7ff ffc3 	bl	80004d4 <RGBTurnGreen>
	  HAL_GPIO_WritePin(EN_flyback_GPIO_Port, EN_flyback_Pin, GPIO_PIN_RESET);*/


	  //HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);

	  if(en_clk1!=0)HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <main+0x90>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d004      	beq.n	8000560 <main+0x54>
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0xa0>)
 8000558:	2102      	movs	r1, #2
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fcd9 	bl	8000f12 <HAL_GPIO_TogglePin>
	  if(en_clk2!=0)HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0x94>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d004      	beq.n	8000572 <main+0x66>
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <main+0xa0>)
 800056a:	2101      	movs	r1, #1
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fcd0 	bl	8000f12 <HAL_GPIO_TogglePin>
	  if(en_clk3!=0)HAL_GPIO_TogglePin(CLK3_GPIO_Port, CLK3_Pin);
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <main+0x98>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d005      	beq.n	8000586 <main+0x7a>
 800057a:	23a0      	movs	r3, #160	; 0xa0
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fcc6 	bl	8000f12 <HAL_GPIO_TogglePin>
	  if(en_clk4!=0)HAL_GPIO_TogglePin(CLK4_GPIO_Port, CLK4_Pin);
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <main+0x9c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0df      	beq.n	800054e <main+0x42>
 800058e:	23a0      	movs	r3, #160	; 0xa0
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fcbc 	bl	8000f12 <HAL_GPIO_TogglePin>
	  if(en_clk1!=0)HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 800059a:	e7d8      	b.n	800054e <main+0x42>
 800059c:	20000079 	.word	0x20000079
 80005a0:	20000028 	.word	0x20000028
 80005a4:	2000007a 	.word	0x2000007a
 80005a8:	20000078 	.word	0x20000078
 80005ac:	50000400 	.word	0x50000400

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b09d      	sub	sp, #116	; 0x74
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	2438      	movs	r4, #56	; 0x38
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2338      	movs	r3, #56	; 0x38
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f001 fd29 	bl	8002018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	2324      	movs	r3, #36	; 0x24
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	2314      	movs	r3, #20
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f001 fd21 	bl	8002018 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d6:	003b      	movs	r3, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	2324      	movs	r3, #36	; 0x24
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f001 fd1a 	bl	8002018 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0xdc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a29      	ldr	r2, [pc, #164]	; (8000690 <SystemClock_Config+0xe0>)
 80005ea:	401a      	ands	r2, r3
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <SystemClock_Config+0xdc>)
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	0109      	lsls	r1, r1, #4
 80005f2:	430a      	orrs	r2, r1
 80005f4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2202      	movs	r2, #2
 80005fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2201      	movs	r2, #1
 8000602:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2210      	movs	r2, #16
 8000608:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2202      	movs	r2, #2
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	02d2      	lsls	r2, r2, #11
 800061c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	03d2      	lsls	r2, r2, #15
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	187b      	adds	r3, r7, r1
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fdbb 	bl	80011a4 <HAL_RCC_OscConfig>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000632:	f000 f913 	bl	800085c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	2124      	movs	r1, #36	; 0x24
 8000638:	187b      	adds	r3, r7, r1
 800063a:	220f      	movs	r2, #15
 800063c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2203      	movs	r2, #3
 8000642:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2101      	movs	r1, #1
 800065a:	0018      	movs	r0, r3
 800065c:	f001 f966 	bl	800192c <HAL_RCC_ClockConfig>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000664:	f000 f8fa 	bl	800085c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000668:	003b      	movs	r3, r7
 800066a:	2208      	movs	r2, #8
 800066c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800066e:	003b      	movs	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000674:	003b      	movs	r3, r7
 8000676:	0018      	movs	r0, r3
 8000678:	f001 fb46 	bl	8001d08 <HAL_RCCEx_PeriphCLKConfig>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000680:	f000 f8ec 	bl	800085c <Error_Handler>
  }
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b01d      	add	sp, #116	; 0x74
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	40007000 	.word	0x40007000
 8000690:	ffffe7ff 	.word	0xffffe7ff

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_I2C1_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_I2C1_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <MX_I2C1_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_I2C1_Init+0x74>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fc39 	bl	8000f48 <HAL_I2C_Init>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006da:	f000 f8bf 	bl	800085c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_I2C1_Init+0x74>)
 80006e0:	2100      	movs	r1, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fcc6 	bl	8001074 <HAL_I2CEx_ConfigAnalogFilter>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 f8b6 	bl	800085c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MX_I2C1_Init+0x74>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fd09 	bl	800110c <HAL_I2CEx_ConfigDigitalFilter>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 f8ad 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000002c 	.word	0x2000002c
 800070c:	40005400 	.word	0x40005400
 8000710:	00707cbb 	.word	0x00707cbb

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b089      	sub	sp, #36	; 0x24
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	240c      	movs	r4, #12
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2314      	movs	r3, #20
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f001 fc77 	bl	8002018 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b49      	ldr	r3, [pc, #292]	; (8000850 <MX_GPIO_Init+0x13c>)
 800072c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072e:	4b48      	ldr	r3, [pc, #288]	; (8000850 <MX_GPIO_Init+0x13c>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
 8000736:	4b46      	ldr	r3, [pc, #280]	; (8000850 <MX_GPIO_Init+0x13c>)
 8000738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MX_GPIO_Init+0x13c>)
 8000744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000746:	4b42      	ldr	r3, [pc, #264]	; (8000850 <MX_GPIO_Init+0x13c>)
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
 800074e:	4b40      	ldr	r3, [pc, #256]	; (8000850 <MX_GPIO_Init+0x13c>)
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	2202      	movs	r2, #2
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_flyback_GPIO_Port, EN_flyback_Pin, GPIO_PIN_SET);
 800075a:	23a0      	movs	r3, #160	; 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2201      	movs	r2, #1
 8000760:	2104      	movs	r1, #4
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fbb8 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK4_Pin|CLK3_Pin, GPIO_PIN_RESET);
 8000768:	23a0      	movs	r3, #160	; 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	2200      	movs	r2, #0
 800076e:	21c0      	movs	r1, #192	; 0xc0
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fbb1 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK2_Pin|CLK1_Pin, GPIO_PIN_RESET);
 8000776:	4b37      	ldr	r3, [pc, #220]	; (8000854 <MX_GPIO_Init+0x140>)
 8000778:	2200      	movs	r2, #0
 800077a:	2103      	movs	r1, #3
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fbab 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Blue_LED_Pin|Green_LED_Pin|Red_LED_Pin, GPIO_PIN_SET);
 8000782:	23e0      	movs	r3, #224	; 0xe0
 8000784:	01db      	lsls	r3, r3, #7
 8000786:	4833      	ldr	r0, [pc, #204]	; (8000854 <MX_GPIO_Init+0x140>)
 8000788:	2201      	movs	r2, #1
 800078a:	0019      	movs	r1, r3
 800078c:	f000 fba4 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Get_data_Pin */
  GPIO_InitStruct.Pin = Get_data_Pin;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2202      	movs	r2, #2
 8000794:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <MX_GPIO_Init+0x144>)
 800079a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Get_data_GPIO_Port, &GPIO_InitStruct);
 80007a2:	193a      	adds	r2, r7, r4
 80007a4:	23a0      	movs	r3, #160	; 0xa0
 80007a6:	05db      	lsls	r3, r3, #23
 80007a8:	0011      	movs	r1, r2
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fa1e 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_flyback_Pin */
  GPIO_InitStruct.Pin = EN_flyback_Pin;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2204      	movs	r2, #4
 80007b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_flyback_GPIO_Port, &GPIO_InitStruct);
 80007c8:	193a      	adds	r2, r7, r4
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fa0b 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK4_Pin CLK3_Pin */
  GPIO_InitStruct.Pin = CLK4_Pin|CLK3_Pin;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	22c0      	movs	r2, #192	; 0xc0
 80007da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2203      	movs	r2, #3
 80007ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	193a      	adds	r2, r7, r4
 80007f0:	23a0      	movs	r3, #160	; 0xa0
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f9f8 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK2_Pin CLK1_Pin */
  GPIO_InitStruct.Pin = CLK2_Pin|CLK1_Pin;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2203      	movs	r2, #3
 8000800:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2201      	movs	r2, #1
 8000806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2203      	movs	r2, #3
 8000812:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	193b      	adds	r3, r7, r4
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <MX_GPIO_Init+0x140>)
 8000818:	0019      	movs	r1, r3
 800081a:	0010      	movs	r0, r2
 800081c:	f000 f9e6 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : Blue_LED_Pin Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Blue_LED_Pin|Green_LED_Pin|Red_LED_Pin;
 8000820:	0021      	movs	r1, r4
 8000822:	187b      	adds	r3, r7, r1
 8000824:	22e0      	movs	r2, #224	; 0xe0
 8000826:	01d2      	lsls	r2, r2, #7
 8000828:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	187b      	adds	r3, r7, r1
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <MX_GPIO_Init+0x140>)
 8000840:	0019      	movs	r1, r3
 8000842:	0010      	movs	r0, r2
 8000844:	f000 f9d2 	bl	8000bec <HAL_GPIO_Init>

}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b009      	add	sp, #36	; 0x24
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	50000400 	.word	0x50000400
 8000858:	10110000 	.word	0x10110000

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <HAL_MspInit+0x24>)
 800086e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x24>)
 8000872:	2101      	movs	r1, #1
 8000874:	430a      	orrs	r2, r1
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <HAL_MspInit+0x24>)
 800087a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_MspInit+0x24>)
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	0549      	lsls	r1, r1, #21
 8000882:	430a      	orrs	r2, r1
 8000884:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	240c      	movs	r4, #12
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	2314      	movs	r3, #20
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f001 fbb8 	bl	8002018 <memset>
  if(hi2c->Instance==I2C1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_I2C_MspInit+0x7c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d128      	bne.n	8000904 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_I2C_MspInit+0x80>)
 80008b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <HAL_I2C_MspInit+0x80>)
 80008b8:	2102      	movs	r1, #2
 80008ba:	430a      	orrs	r2, r1
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_I2C_MspInit+0x80>)
 80008c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c2:	2202      	movs	r2, #2
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ca:	0021      	movs	r1, r4
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	22c0      	movs	r2, #192	; 0xc0
 80008d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2212      	movs	r2, #18
 80008d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2201      	movs	r2, #1
 80008dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2203      	movs	r2, #3
 80008e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2201      	movs	r2, #1
 80008e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	4a09      	ldr	r2, [pc, #36]	; (8000914 <HAL_I2C_MspInit+0x84>)
 80008ee:	0019      	movs	r1, r3
 80008f0:	0010      	movs	r0, r2
 80008f2:	f000 f97b 	bl	8000bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_I2C_MspInit+0x80>)
 80008f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_I2C_MspInit+0x80>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0389      	lsls	r1, r1, #14
 8000900:	430a      	orrs	r2, r1
 8000902:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b009      	add	sp, #36	; 0x24
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	40005400 	.word	0x40005400
 8000910:	40021000 	.word	0x40021000
 8000914:	50000400 	.word	0x50000400

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f886 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000952:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490e      	ldr	r1, [pc, #56]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0b      	ldr	r4, [pc, #44]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800097a:	f7ff ffe4 	bl	8000946 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097e:	f001 fb27 	bl	8001fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fdc3 	bl	800050c <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   r0, =_estack
 8000988:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000994:	0800206c 	.word	0x0800206c
  ldr r2, =_sbss
 8000998:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800099c:	20000080 	.word	0x20000080

080009a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_COMP_IRQHandler>
	...

080009a4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_Init+0x3c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_Init+0x3c>)
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	430a      	orrs	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f811 	bl	80009e4 <HAL_InitTick>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d003      	beq.n	80009ce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e001      	b.n	80009d2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ce:	f7ff ff4b 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
}
 80009d6:	0018      	movs	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	40022000 	.word	0x40022000

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_InitTick+0x5c>)
 80009ee:	681c      	ldr	r4, [r3, #0]
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_InitTick+0x60>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	0019      	movs	r1, r3
 80009f6:	23fa      	movs	r3, #250	; 0xfa
 80009f8:	0098      	lsls	r0, r3, #2
 80009fa:	f7ff fb85 	bl	8000108 <__udivsi3>
 80009fe:	0003      	movs	r3, r0
 8000a00:	0019      	movs	r1, r3
 8000a02:	0020      	movs	r0, r4
 8000a04:	f7ff fb80 	bl	8000108 <__udivsi3>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f8e1 	bl	8000bd2 <HAL_SYSTICK_Config>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e00f      	b.n	8000a38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d80b      	bhi.n	8000a36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	2301      	movs	r3, #1
 8000a22:	425b      	negs	r3, r3
 8000a24:	2200      	movs	r2, #0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 f8be 	bl	8000ba8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_InitTick+0x64>)
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b003      	add	sp, #12
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x1c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	001a      	movs	r2, r3
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x20>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	18d2      	adds	r2, r2, r3
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_IncTick+0x20>)
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	2000007c 	.word	0x2000007c

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <HAL_GetTick+0x10>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	2000007c 	.word	0x2000007c

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b7f      	cmp	r3, #127	; 0x7f
 8000a98:	d828      	bhi.n	8000aec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9a:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <__NVIC_SetPriority+0xd4>)
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	33c0      	adds	r3, #192	; 0xc0
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	589b      	ldr	r3, [r3, r2]
 8000aaa:	1dfa      	adds	r2, r7, #7
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	0011      	movs	r1, r2
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	00d2      	lsls	r2, r2, #3
 8000ab6:	21ff      	movs	r1, #255	; 0xff
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	000a      	movs	r2, r1
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	401a      	ands	r2, r3
 8000ac0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	019b      	lsls	r3, r3, #6
 8000ac6:	22ff      	movs	r2, #255	; 0xff
 8000ac8:	401a      	ands	r2, r3
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	4003      	ands	r3, r0
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	481f      	ldr	r0, [pc, #124]	; (8000b58 <__NVIC_SetPriority+0xd4>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	33c0      	adds	r3, #192	; 0xc0
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aea:	e031      	b.n	8000b50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <__NVIC_SetPriority+0xd8>)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	0019      	movs	r1, r3
 8000af4:	230f      	movs	r3, #15
 8000af6:	400b      	ands	r3, r1
 8000af8:	3b08      	subs	r3, #8
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3306      	adds	r3, #6
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	18d3      	adds	r3, r2, r3
 8000b02:	3304      	adds	r3, #4
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	400a      	ands	r2, r1
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	21ff      	movs	r1, #255	; 0xff
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	401a      	ands	r2, r3
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4003      	ands	r3, r0
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <__NVIC_SetPriority+0xd8>)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	001c      	movs	r4, r3
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	4023      	ands	r3, r4
 8000b40:	3b08      	subs	r3, #8
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	430a      	orrs	r2, r1
 8000b46:	3306      	adds	r3, #6
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	18c3      	adds	r3, r0, r3
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b003      	add	sp, #12
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	045b      	lsls	r3, r3, #17
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d301      	bcc.n	8000b78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b74:	2301      	movs	r3, #1
 8000b76:	e010      	b.n	8000b9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <SysTick_Config+0x44>)
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b80:	2301      	movs	r3, #1
 8000b82:	425b      	negs	r3, r3
 8000b84:	2103      	movs	r1, #3
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff ff7c 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x44>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x44>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	1c02      	adds	r2, r0, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff ff5d 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b004      	add	sp, #16
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ffbf 	bl	8000b60 <SysTick_Config>
 8000be2:	0003      	movs	r3, r0
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c02:	e14f      	b.n	8000ea4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2101      	movs	r1, #1
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d100      	bne.n	8000c1c <HAL_GPIO_Init+0x30>
 8000c1a:	e140      	b.n	8000e9e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d00b      	beq.n	8000c3c <HAL_GPIO_Init+0x50>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d007      	beq.n	8000c3c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c30:	2b11      	cmp	r3, #17
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b12      	cmp	r3, #18
 8000c3a:	d130      	bne.n	8000c9e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	2203      	movs	r2, #3
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c72:	2201      	movs	r2, #1
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	091b      	lsrs	r3, r3, #4
 8000c88:	2201      	movs	r2, #1
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0xf2>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d123      	bne.n	8000d26 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	0092      	lsls	r2, r2, #2
 8000ce8:	58d3      	ldr	r3, [r2, r3]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2207      	movs	r2, #7
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	691a      	ldr	r2, [r3, #16]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2107      	movs	r1, #7
 8000d0a:	400b      	ands	r3, r1
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	08da      	lsrs	r2, r3, #3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3208      	adds	r2, #8
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	6939      	ldr	r1, [r7, #16]
 8000d24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2203      	movs	r2, #3
 8000d44:	401a      	ands	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	055b      	lsls	r3, r3, #21
 8000d62:	4013      	ands	r3, r2
 8000d64:	d100      	bne.n	8000d68 <HAL_GPIO_Init+0x17c>
 8000d66:	e09a      	b.n	8000e9e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d68:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6c:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <HAL_GPIO_Init+0x2d0>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	430a      	orrs	r2, r1
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d74:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <HAL_GPIO_Init+0x2d4>)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	589b      	ldr	r3, [r3, r2]
 8000d80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2203      	movs	r2, #3
 8000d86:	4013      	ands	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	43da      	mvns	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	23a0      	movs	r3, #160	; 0xa0
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x1ea>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <HAL_GPIO_Init+0x2d8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1e6>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a46      	ldr	r2, [pc, #280]	; (8000ec8 <HAL_GPIO_Init+0x2dc>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1e2>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <HAL_GPIO_Init+0x2e0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1de>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a44      	ldr	r2, [pc, #272]	; (8000ed0 <HAL_GPIO_Init+0x2e4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1da>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x1ec>
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x1ec>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x1ec>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x1ec>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x1ec>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	2103      	movs	r1, #3
 8000ddc:	400a      	ands	r2, r1
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x2d4>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	025b      	lsls	r3, r3, #9
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	035b      	lsls	r3, r3, #13
 8000e62:	4013      	ands	r3, r2
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43da      	mvns	r2, r3
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	039b      	lsls	r3, r3, #14
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	40da      	lsrs	r2, r3
 8000eac:	1e13      	subs	r3, r2, #0
 8000eae:	d000      	beq.n	8000eb2 <HAL_GPIO_Init+0x2c6>
 8000eb0:	e6a8      	b.n	8000c04 <HAL_GPIO_Init+0x18>
  }
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b006      	add	sp, #24
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	50000400 	.word	0x50000400
 8000ec8:	50000800 	.word	0x50000800
 8000ecc:	50000c00 	.word	0x50000c00
 8000ed0:	50001c00 	.word	0x50001c00
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	0008      	movs	r0, r1
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	1cbb      	adds	r3, r7, #2
 8000ee6:	1c02      	adds	r2, r0, #0
 8000ee8:	801a      	strh	r2, [r3, #0]
 8000eea:	1c7b      	adds	r3, r7, #1
 8000eec:	1c0a      	adds	r2, r1, #0
 8000eee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef0:	1c7b      	adds	r3, r7, #1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ef8:	1cbb      	adds	r3, r7, #2
 8000efa:	881a      	ldrh	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f00:	e003      	b.n	8000f0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f02:	1cbb      	adds	r3, r7, #2
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	1cbb      	adds	r3, r7, #2
 8000f1e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f26:	1cbb      	adds	r3, r7, #2
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	041a      	lsls	r2, r3, #16
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	1cb9      	adds	r1, r7, #2
 8000f36:	8809      	ldrh	r1, [r1, #0]
 8000f38:	400b      	ands	r3, r1
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b004      	add	sp, #16
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e082      	b.n	8001060 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2241      	movs	r2, #65	; 0x41
 8000f5e:	5c9b      	ldrb	r3, [r3, r2]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d107      	bne.n	8000f76 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2240      	movs	r2, #64	; 0x40
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff fc8d 	bl	8000890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2241      	movs	r2, #65	; 0x41
 8000f7a:	2124      	movs	r1, #36	; 0x24
 8000f7c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	438a      	bics	r2, r1
 8000f8c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4934      	ldr	r1, [pc, #208]	; (8001068 <HAL_I2C_Init+0x120>)
 8000f98:	400a      	ands	r2, r1
 8000f9a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4931      	ldr	r1, [pc, #196]	; (800106c <HAL_I2C_Init+0x124>)
 8000fa8:	400a      	ands	r2, r1
 8000faa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0209      	lsls	r1, r1, #8
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	e007      	b.n	8000fd6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2184      	movs	r1, #132	; 0x84
 8000fd0:	0209      	lsls	r1, r1, #8
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d104      	bne.n	8000fe8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	491f      	ldr	r1, [pc, #124]	; (8001070 <HAL_I2C_Init+0x128>)
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	491a      	ldr	r1, [pc, #104]	; (800106c <HAL_I2C_Init+0x124>)
 8001004:	400a      	ands	r2, r1
 8001006:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	431a      	orrs	r2, r3
 8001012:	0011      	movs	r1, r2
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	021a      	lsls	r2, r3, #8
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69d9      	ldr	r1, [r3, #28]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1a      	ldr	r2, [r3, #32]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2241      	movs	r2, #65	; 0x41
 800104c:	2120      	movs	r1, #32
 800104e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2242      	movs	r2, #66	; 0x42
 800105a:	2100      	movs	r1, #0
 800105c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}
 8001068:	f0ffffff 	.word	0xf0ffffff
 800106c:	ffff7fff 	.word	0xffff7fff
 8001070:	02008000 	.word	0x02008000

08001074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2241      	movs	r2, #65	; 0x41
 8001082:	5c9b      	ldrb	r3, [r3, r2]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b20      	cmp	r3, #32
 8001088:	d138      	bne.n	80010fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2240      	movs	r2, #64	; 0x40
 800108e:	5c9b      	ldrb	r3, [r3, r2]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d101      	bne.n	8001098 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001094:	2302      	movs	r3, #2
 8001096:	e032      	b.n	80010fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2240      	movs	r2, #64	; 0x40
 800109c:	2101      	movs	r1, #1
 800109e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2241      	movs	r2, #65	; 0x41
 80010a4:	2124      	movs	r1, #36	; 0x24
 80010a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2101      	movs	r1, #1
 80010b4:	438a      	bics	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4911      	ldr	r1, [pc, #68]	; (8001108 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2101      	movs	r1, #1
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2241      	movs	r2, #65	; 0x41
 80010ec:	2120      	movs	r1, #32
 80010ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2240      	movs	r2, #64	; 0x40
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e000      	b.n	80010fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80010fc:	2302      	movs	r3, #2
  }
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	ffffefff 	.word	0xffffefff

0800110c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2241      	movs	r2, #65	; 0x41
 800111a:	5c9b      	ldrb	r3, [r3, r2]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b20      	cmp	r3, #32
 8001120:	d139      	bne.n	8001196 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	5c9b      	ldrb	r3, [r3, r2]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800112c:	2302      	movs	r3, #2
 800112e:	e033      	b.n	8001198 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2240      	movs	r2, #64	; 0x40
 8001134:	2101      	movs	r1, #1
 8001136:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2241      	movs	r2, #65	; 0x41
 800113c:	2124      	movs	r1, #36	; 0x24
 800113e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2101      	movs	r1, #1
 800114c:	438a      	bics	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2241      	movs	r2, #65	; 0x41
 8001186:	2120      	movs	r1, #32
 8001188:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2240      	movs	r2, #64	; 0x40
 800118e:	2100      	movs	r1, #0
 8001190:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001196:	2302      	movs	r3, #2
  }
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	b004      	add	sp, #16
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	fffff0ff 	.word	0xfffff0ff

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	f000 fbaf 	bl	8001916 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b8:	4bcf      	ldr	r3, [pc, #828]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	220c      	movs	r2, #12
 80011be:	4013      	ands	r3, r2
 80011c0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011c2:	4bcd      	ldr	r3, [pc, #820]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	025b      	lsls	r3, r3, #9
 80011ca:	4013      	ands	r3, r2
 80011cc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	4013      	ands	r3, r2
 80011d6:	d100      	bne.n	80011da <HAL_RCC_OscConfig+0x36>
 80011d8:	e07e      	b.n	80012d8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d007      	beq.n	80011f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d112      	bne.n	800120c <HAL_RCC_OscConfig+0x68>
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	025b      	lsls	r3, r3, #9
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d10d      	bne.n	800120c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	4bc1      	ldr	r3, [pc, #772]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	d100      	bne.n	80011fe <HAL_RCC_OscConfig+0x5a>
 80011fc:	e06b      	b.n	80012d6 <HAL_RCC_OscConfig+0x132>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d167      	bne.n	80012d6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	f000 fb85 	bl	8001916 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	025b      	lsls	r3, r3, #9
 8001214:	429a      	cmp	r2, r3
 8001216:	d107      	bne.n	8001228 <HAL_RCC_OscConfig+0x84>
 8001218:	4bb7      	ldr	r3, [pc, #732]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4bb6      	ldr	r3, [pc, #728]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0249      	lsls	r1, r1, #9
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e027      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	23a0      	movs	r3, #160	; 0xa0
 800122e:	02db      	lsls	r3, r3, #11
 8001230:	429a      	cmp	r2, r3
 8001232:	d10e      	bne.n	8001252 <HAL_RCC_OscConfig+0xae>
 8001234:	4bb0      	ldr	r3, [pc, #704]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4baf      	ldr	r3, [pc, #700]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	02c9      	lsls	r1, r1, #11
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	4bad      	ldr	r3, [pc, #692]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4bac      	ldr	r3, [pc, #688]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0249      	lsls	r1, r1, #9
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e012      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 8001252:	4ba9      	ldr	r3, [pc, #676]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4ba8      	ldr	r3, [pc, #672]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001258:	49a8      	ldr	r1, [pc, #672]	; (80014fc <HAL_RCC_OscConfig+0x358>)
 800125a:	400a      	ands	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	4ba6      	ldr	r3, [pc, #664]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	4013      	ands	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4ba2      	ldr	r3, [pc, #648]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4ba1      	ldr	r3, [pc, #644]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001272:	49a3      	ldr	r1, [pc, #652]	; (8001500 <HAL_RCC_OscConfig+0x35c>)
 8001274:	400a      	ands	r2, r1
 8001276:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d015      	beq.n	80012ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fbf6 	bl	8000a70 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001288:	e009      	b.n	800129e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128a:	f7ff fbf1 	bl	8000a70 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b64      	cmp	r3, #100	; 0x64
 8001296:	d902      	bls.n	800129e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	f000 fb3c 	bl	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800129e:	4b96      	ldr	r3, [pc, #600]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	029b      	lsls	r3, r3, #10
 80012a6:	4013      	ands	r3, r2
 80012a8:	d0ef      	beq.n	800128a <HAL_RCC_OscConfig+0xe6>
 80012aa:	e015      	b.n	80012d8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fbe0 	bl	8000a70 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b6:	f7ff fbdb 	bl	8000a70 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e326      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012c8:	4b8b      	ldr	r3, [pc, #556]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	029b      	lsls	r3, r3, #10
 80012d0:	4013      	ands	r3, r2
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x112>
 80012d4:	e000      	b.n	80012d8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2202      	movs	r2, #2
 80012de:	4013      	ands	r3, r2
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x140>
 80012e2:	e08b      	b.n	80013fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	d13e      	bne.n	8001374 <HAL_RCC_OscConfig+0x1d0>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d13b      	bne.n	8001374 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012fc:	4b7e      	ldr	r3, [pc, #504]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2204      	movs	r2, #4
 8001302:	4013      	ands	r3, r2
 8001304:	d004      	beq.n	8001310 <HAL_RCC_OscConfig+0x16c>
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e302      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001310:	4b79      	ldr	r3, [pc, #484]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	4a7b      	ldr	r2, [pc, #492]	; (8001504 <HAL_RCC_OscConfig+0x360>)
 8001316:	4013      	ands	r3, r2
 8001318:	0019      	movs	r1, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	021a      	lsls	r2, r3, #8
 8001320:	4b75      	ldr	r3, [pc, #468]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001322:	430a      	orrs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001326:	4b74      	ldr	r3, [pc, #464]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2209      	movs	r2, #9
 800132c:	4393      	bics	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	4b71      	ldr	r3, [pc, #452]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001338:	f000 fc40 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 800133c:	0001      	movs	r1, r0
 800133e:	4b6e      	ldr	r3, [pc, #440]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	220f      	movs	r2, #15
 8001346:	4013      	ands	r3, r2
 8001348:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x364>)
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	000a      	movs	r2, r1
 800134e:	40da      	lsrs	r2, r3
 8001350:	4b6e      	ldr	r3, [pc, #440]	; (800150c <HAL_RCC_OscConfig+0x368>)
 8001352:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001354:	4b6e      	ldr	r3, [pc, #440]	; (8001510 <HAL_RCC_OscConfig+0x36c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2513      	movs	r5, #19
 800135a:	197c      	adds	r4, r7, r5
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fb41 	bl	80009e4 <HAL_InitTick>
 8001362:	0003      	movs	r3, r0
 8001364:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001366:	197b      	adds	r3, r7, r5
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d046      	beq.n	80013fc <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800136e:	197b      	adds	r3, r7, r5
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	e2d0      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d027      	beq.n	80013ca <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800137a:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2209      	movs	r2, #9
 8001380:	4393      	bics	r3, r2
 8001382:	0019      	movs	r1, r3
 8001384:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fb70 	bl	8000a70 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fb6b 	bl	8000a70 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e2b6      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2204      	movs	r2, #4
 80013ae:	4013      	ands	r3, r2
 80013b0:	d0f1      	beq.n	8001396 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a53      	ldr	r2, [pc, #332]	; (8001504 <HAL_RCC_OscConfig+0x360>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	021a      	lsls	r2, r3, #8
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80013c4:	430a      	orrs	r2, r1
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	e018      	b.n	80013fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ca:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	438a      	bics	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fb4b 	bl	8000a70 <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fb46 	bl	8000a70 <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e291      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2204      	movs	r2, #4
 80013f8:	4013      	ands	r3, r2
 80013fa:	d1f1      	bne.n	80013e0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2210      	movs	r2, #16
 8001402:	4013      	ands	r3, r2
 8001404:	d100      	bne.n	8001408 <HAL_RCC_OscConfig+0x264>
 8001406:	e0a1      	b.n	800154c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d140      	bne.n	8001490 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4013      	ands	r3, r2
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x282>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e277      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a3a      	ldr	r2, [pc, #232]	; (8001514 <HAL_RCC_OscConfig+0x370>)
 800142c:	4013      	ands	r3, r2
 800142e:	0019      	movs	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 8001436:	430a      	orrs	r2, r1
 8001438:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	0a19      	lsrs	r1, r3, #8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	061a      	lsls	r2, r3, #24
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	0b5b      	lsrs	r3, r3, #13
 8001454:	3301      	adds	r3, #1
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	0212      	lsls	r2, r2, #8
 800145a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	210f      	movs	r1, #15
 8001464:	400b      	ands	r3, r1
 8001466:	4928      	ldr	r1, [pc, #160]	; (8001508 <HAL_RCC_OscConfig+0x364>)
 8001468:	5ccb      	ldrb	r3, [r1, r3]
 800146a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x368>)
 800146e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x36c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2513      	movs	r5, #19
 8001476:	197c      	adds	r4, r7, r5
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff fab3 	bl	80009e4 <HAL_InitTick>
 800147e:	0003      	movs	r3, r0
 8001480:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001482:	197b      	adds	r3, r7, r5
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d060      	beq.n	800154c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800148a:	197b      	adds	r3, r7, r5
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	e242      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d03f      	beq.n	8001518 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0049      	lsls	r1, r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fae3 	bl	8000a70 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b0:	f7ff fade 	bl	8000a70 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e229      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_RCC_OscConfig+0x370>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	0019      	movs	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	0a19      	lsrs	r1, r3, #8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	061a      	lsls	r2, r3, #24
 80014f0:	4b01      	ldr	r3, [pc, #4]	; (80014f8 <HAL_RCC_OscConfig+0x354>)
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	e029      	b.n	800154c <HAL_RCC_OscConfig+0x3a8>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	fffeffff 	.word	0xfffeffff
 8001500:	fffbffff 	.word	0xfffbffff
 8001504:	ffffe0ff 	.word	0xffffe0ff
 8001508:	08002040 	.word	0x08002040
 800150c:	20000000 	.word	0x20000000
 8001510:	20000004 	.word	0x20000004
 8001514:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001518:	4bbd      	ldr	r3, [pc, #756]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4bbc      	ldr	r3, [pc, #752]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 800151e:	49bd      	ldr	r1, [pc, #756]	; (8001814 <HAL_RCC_OscConfig+0x670>)
 8001520:	400a      	ands	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff faa4 	bl	8000a70 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152e:	f7ff fa9f 	bl	8000a70 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1ea      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001540:	4bb3      	ldr	r3, [pc, #716]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4013      	ands	r3, r2
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2208      	movs	r2, #8
 8001552:	4013      	ands	r3, r2
 8001554:	d036      	beq.n	80015c4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d019      	beq.n	8001592 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155e:	4bac      	ldr	r3, [pc, #688]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001562:	4bab      	ldr	r3, [pc, #684]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001564:	2101      	movs	r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff fa81 	bl	8000a70 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fa7c 	bl	8000a70 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e1c7      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001586:	4ba2      	ldr	r3, [pc, #648]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158a:	2202      	movs	r2, #2
 800158c:	4013      	ands	r3, r2
 800158e:	d0f1      	beq.n	8001574 <HAL_RCC_OscConfig+0x3d0>
 8001590:	e018      	b.n	80015c4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001592:	4b9f      	ldr	r3, [pc, #636]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001596:	4b9e      	ldr	r3, [pc, #632]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001598:	2101      	movs	r1, #1
 800159a:	438a      	bics	r2, r1
 800159c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fa67 	bl	8000a70 <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fa62 	bl	8000a70 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1ad      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ba:	4b95      	ldr	r3, [pc, #596]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80015bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015be:	2202      	movs	r2, #2
 80015c0:	4013      	ands	r3, r2
 80015c2:	d1f1      	bne.n	80015a8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2204      	movs	r2, #4
 80015ca:	4013      	ands	r3, r2
 80015cc:	d100      	bne.n	80015d0 <HAL_RCC_OscConfig+0x42c>
 80015ce:	e0ae      	b.n	800172e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d0:	2027      	movs	r0, #39	; 0x27
 80015d2:	183b      	adds	r3, r7, r0
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d8:	4b8d      	ldr	r3, [pc, #564]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80015da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	055b      	lsls	r3, r3, #21
 80015e0:	4013      	ands	r3, r2
 80015e2:	d109      	bne.n	80015f8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	4b8a      	ldr	r3, [pc, #552]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80015e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015e8:	4b89      	ldr	r3, [pc, #548]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	0549      	lsls	r1, r1, #21
 80015ee:	430a      	orrs	r2, r1
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80015f2:	183b      	adds	r3, r7, r0
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b87      	ldr	r3, [pc, #540]	; (8001818 <HAL_RCC_OscConfig+0x674>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4013      	ands	r3, r2
 8001602:	d11a      	bne.n	800163a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001604:	4b84      	ldr	r3, [pc, #528]	; (8001818 <HAL_RCC_OscConfig+0x674>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b83      	ldr	r3, [pc, #524]	; (8001818 <HAL_RCC_OscConfig+0x674>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0049      	lsls	r1, r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001612:	f7ff fa2d 	bl	8000a70 <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161c:	f7ff fa28 	bl	8000a70 <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e173      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x674>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4013      	ands	r3, r2
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	429a      	cmp	r2, r3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_OscConfig+0x4b2>
 8001646:	4b72      	ldr	r3, [pc, #456]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800164a:	4b71      	ldr	r3, [pc, #452]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	0049      	lsls	r1, r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	651a      	str	r2, [r3, #80]	; 0x50
 8001654:	e031      	b.n	80016ba <HAL_RCC_OscConfig+0x516>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x4d4>
 800165e:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001662:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001664:	496b      	ldr	r1, [pc, #428]	; (8001814 <HAL_RCC_OscConfig+0x670>)
 8001666:	400a      	ands	r2, r1
 8001668:	651a      	str	r2, [r3, #80]	; 0x50
 800166a:	4b69      	ldr	r3, [pc, #420]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 800166c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800166e:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001670:	496a      	ldr	r1, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x678>)
 8001672:	400a      	ands	r2, r1
 8001674:	651a      	str	r2, [r3, #80]	; 0x50
 8001676:	e020      	b.n	80016ba <HAL_RCC_OscConfig+0x516>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	23a0      	movs	r3, #160	; 0xa0
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	429a      	cmp	r2, r3
 8001682:	d10e      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4fe>
 8001684:	4b62      	ldr	r3, [pc, #392]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001688:	4b61      	ldr	r3, [pc, #388]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	00c9      	lsls	r1, r1, #3
 800168e:	430a      	orrs	r2, r1
 8001690:	651a      	str	r2, [r3, #80]	; 0x50
 8001692:	4b5f      	ldr	r3, [pc, #380]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001696:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	0049      	lsls	r1, r1, #1
 800169c:	430a      	orrs	r2, r1
 800169e:	651a      	str	r2, [r3, #80]	; 0x50
 80016a0:	e00b      	b.n	80016ba <HAL_RCC_OscConfig+0x516>
 80016a2:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80016a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a6:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80016a8:	495a      	ldr	r1, [pc, #360]	; (8001814 <HAL_RCC_OscConfig+0x670>)
 80016aa:	400a      	ands	r2, r1
 80016ac:	651a      	str	r2, [r3, #80]	; 0x50
 80016ae:	4b58      	ldr	r3, [pc, #352]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80016b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b2:	4b57      	ldr	r3, [pc, #348]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80016b4:	4959      	ldr	r1, [pc, #356]	; (800181c <HAL_RCC_OscConfig+0x678>)
 80016b6:	400a      	ands	r2, r1
 80016b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d015      	beq.n	80016ee <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff f9d5 	bl	8000a70 <HAL_GetTick>
 80016c6:	0003      	movs	r3, r0
 80016c8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016ca:	e009      	b.n	80016e0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff f9d0 	bl	8000a70 <HAL_GetTick>
 80016d0:	0002      	movs	r2, r0
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_RCC_OscConfig+0x67c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e11a      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016e0:	4b4b      	ldr	r3, [pc, #300]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80016e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0ef      	beq.n	80016cc <HAL_RCC_OscConfig+0x528>
 80016ec:	e014      	b.n	8001718 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff f9bf 	bl	8000a70 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016f6:	e009      	b.n	800170c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff f9ba 	bl	8000a70 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	4a47      	ldr	r2, [pc, #284]	; (8001820 <HAL_RCC_OscConfig+0x67c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e104      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800170c:	4b40      	ldr	r3, [pc, #256]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 800170e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4013      	ands	r3, r2
 8001716:	d1ef      	bne.n	80016f8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001718:	2327      	movs	r3, #39	; 0x27
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d105      	bne.n	800172e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001722:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001726:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001728:	493e      	ldr	r1, [pc, #248]	; (8001824 <HAL_RCC_OscConfig+0x680>)
 800172a:	400a      	ands	r2, r1
 800172c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2220      	movs	r2, #32
 8001734:	4013      	ands	r3, r2
 8001736:	d049      	beq.n	80017cc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d026      	beq.n	800178e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001740:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001746:	2101      	movs	r1, #1
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 800174e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001750:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001752:	2101      	movs	r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
 8001758:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HAL_RCC_OscConfig+0x684>)
 800175a:	6a1a      	ldr	r2, [r3, #32]
 800175c:	4b32      	ldr	r3, [pc, #200]	; (8001828 <HAL_RCC_OscConfig+0x684>)
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	0189      	lsls	r1, r1, #6
 8001762:	430a      	orrs	r2, r1
 8001764:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff f983 	bl	8000a70 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001770:	f7ff f97e 	bl	8000a70 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0c9      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	d0f1      	beq.n	8001770 <HAL_RCC_OscConfig+0x5cc>
 800178c:	e01e      	b.n	80017cc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 8001794:	2101      	movs	r1, #1
 8001796:	438a      	bics	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <HAL_RCC_OscConfig+0x684>)
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_RCC_OscConfig+0x684>)
 80017a0:	4922      	ldr	r1, [pc, #136]	; (800182c <HAL_RCC_OscConfig+0x688>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f963 	bl	8000a70 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b0:	f7ff f95e 	bl	8000a70 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e0a9      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	d1f1      	bne.n	80017b0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d100      	bne.n	80017d6 <HAL_RCC_OscConfig+0x632>
 80017d4:	e09e      	b.n	8001914 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	d100      	bne.n	80017de <HAL_RCC_OscConfig+0x63a>
 80017dc:	e077      	b.n	80018ce <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d158      	bne.n	8001898 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_OscConfig+0x66c>)
 80017ec:	4910      	ldr	r1, [pc, #64]	; (8001830 <HAL_RCC_OscConfig+0x68c>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff f93d 	bl	8000a70 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017fa:	e01b      	b.n	8001834 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f938 	bl	8000a70 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d914      	bls.n	8001834 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e083      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	40021000 	.word	0x40021000
 8001814:	fffffeff 	.word	0xfffffeff
 8001818:	40007000 	.word	0x40007000
 800181c:	fffffbff 	.word	0xfffffbff
 8001820:	00001388 	.word	0x00001388
 8001824:	efffffff 	.word	0xefffffff
 8001828:	40010000 	.word	0x40010000
 800182c:	ffffdfff 	.word	0xffffdfff
 8001830:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001834:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	049b      	lsls	r3, r3, #18
 800183c:	4013      	ands	r3, r2
 800183e:	d1dd      	bne.n	80017fc <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001840:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a37      	ldr	r2, [pc, #220]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 8001846:	4013      	ands	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	431a      	orrs	r2, r3
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0449      	lsls	r1, r1, #17
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff f8ff 	bl	8000a70 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f8fa 	bl	8000a70 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e045      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	049b      	lsls	r3, r3, #18
 8001892:	4013      	ands	r3, r2
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x6d4>
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 800189e:	4922      	ldr	r1, [pc, #136]	; (8001928 <HAL_RCC_OscConfig+0x784>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff f8e4 	bl	8000a70 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f8df 	bl	8000a70 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e02a      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	049b      	lsls	r3, r3, #18
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x70a>
 80018cc:	e022      	b.n	8001914 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e01d      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_RCC_OscConfig+0x77c>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	025b      	lsls	r3, r3, #9
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d10f      	bne.n	8001910 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	23f0      	movs	r3, #240	; 0xf0
 80018f4:	039b      	lsls	r3, r3, #14
 80018f6:	401a      	ands	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	23c0      	movs	r3, #192	; 0xc0
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b00a      	add	sp, #40	; 0x28
 800191c:	bdb0      	pop	{r4, r5, r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	40021000 	.word	0x40021000
 8001924:	ff02ffff 	.word	0xff02ffff
 8001928:	feffffff 	.word	0xfeffffff

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e128      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b96      	ldr	r3, [pc, #600]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	4013      	ands	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d91e      	bls.n	800198c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b93      	ldr	r3, [pc, #588]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4393      	bics	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	4b90      	ldr	r3, [pc, #576]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001960:	f7ff f886 	bl	8000a70 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001968:	e009      	b.n	800197e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7ff f881 	bl	8000a70 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a8a      	ldr	r2, [pc, #552]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e109      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b87      	ldr	r3, [pc, #540]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	4013      	ands	r3, r2
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001996:	4b83      	ldr	r3, [pc, #524]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	22f0      	movs	r2, #240	; 0xf0
 800199c:	4393      	bics	r3, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	4b7f      	ldr	r3, [pc, #508]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019a6:	430a      	orrs	r2, r1
 80019a8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4013      	ands	r3, r2
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_ClockConfig+0x8a>
 80019b4:	e089      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019be:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	029b      	lsls	r3, r3, #10
 80019c6:	4013      	ands	r3, r2
 80019c8:	d120      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0e1      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	049b      	lsls	r3, r3, #18
 80019de:	4013      	ands	r3, r2
 80019e0:	d114      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0d5      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ee:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2204      	movs	r2, #4
 80019f4:	4013      	ands	r3, r2
 80019f6:	d109      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0ca      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019fc:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0c2      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0c:	4b65      	ldr	r3, [pc, #404]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2203      	movs	r2, #3
 8001a12:	4393      	bics	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4b62      	ldr	r3, [pc, #392]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a20:	f7ff f826 	bl	8000a70 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d111      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a32:	f7ff f81d 	bl	8000a70 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e0a5      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a46:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d1ef      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x106>
 8001a52:	e03a      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d111      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	e009      	b.n	8001a72 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5e:	f7ff f807 	bl	8000a70 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	4a4d      	ldr	r2, [pc, #308]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e08f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	220c      	movs	r2, #12
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d1ef      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x132>
 8001a7e:	e024      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d11b      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7fe fff1 	bl	8000a70 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a42      	ldr	r2, [pc, #264]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e079      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d1ef      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x15e>
 8001aaa:	e00e      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7fe ffe0 	bl	8000a70 <HAL_GetTick>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4a3a      	ldr	r2, [pc, #232]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e068      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ac0:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	220c      	movs	r2, #12
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d21e      	bcs.n	8001b16 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4393      	bics	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aea:	f7fe ffc1 	bl	8000a70 <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	e009      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7fe ffbc 	bl	8000a70 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e044      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d1ee      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d009      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <HAL_RCC_ClockConfig+0x27c>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2208      	movs	r2, #8
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d00a      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <HAL_RCC_ClockConfig+0x280>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	0019      	movs	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	00da      	lsls	r2, r3, #3
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b54:	f000 f832 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b58:	0001      	movs	r1, r0
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	220f      	movs	r2, #15
 8001b62:	4013      	ands	r3, r2
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_RCC_ClockConfig+0x284>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	000a      	movs	r2, r1
 8001b6a:	40da      	lsrs	r2, r3
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_ClockConfig+0x288>)
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_RCC_ClockConfig+0x28c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	250b      	movs	r5, #11
 8001b76:	197c      	adds	r4, r7, r5
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7fe ff33 	bl	80009e4 <HAL_InitTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b82:	197b      	adds	r3, r7, r5
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b8a:	197b      	adds	r3, r7, r5
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b004      	add	sp, #16
 8001b98:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	00001388 	.word	0x00001388
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	fffff8ff 	.word	0xfffff8ff
 8001bac:	ffffc7ff 	.word	0xffffc7ff
 8001bb0:	08002040 	.word	0x08002040
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	b5b0      	push	{r4, r5, r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bca:	230c      	movs	r3, #12
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d014      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x40>
 8001bd2:	d900      	bls.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001bd4:	e07b      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x112>
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x24>
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bde:	e076      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001be0:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2210      	movs	r2, #16
 8001be6:	4013      	ands	r3, r2
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001bea:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001bee:	e07c      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x140>)
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bf4:	e079      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bf6:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bfa:	e076      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfe:	0c9a      	lsrs	r2, r3, #18
 8001c00:	230f      	movs	r3, #15
 8001c02:	401a      	ands	r2, r3
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	0d9a      	lsrs	r2, r3, #22
 8001c0e:	2303      	movs	r3, #3
 8001c10:	4013      	ands	r3, r2
 8001c12:	3301      	adds	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	025b      	lsls	r3, r3, #9
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d01a      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	4a35      	ldr	r2, [pc, #212]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	69b8      	ldr	r0, [r7, #24]
 8001c30:	69f9      	ldr	r1, [r7, #28]
 8001c32:	f7fe fb15 	bl	8000260 <__aeabi_lmul>
 8001c36:	0002      	movs	r2, r0
 8001c38:	000b      	movs	r3, r1
 8001c3a:	0010      	movs	r0, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f7fe fae9 	bl	8000220 <__aeabi_uldivmod>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	000b      	movs	r3, r1
 8001c52:	0013      	movs	r3, r2
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
 8001c56:	e037      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d01a      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	68b8      	ldr	r0, [r7, #8]
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	f7fe faf5 	bl	8000260 <__aeabi_lmul>
 8001c76:	0002      	movs	r2, r0
 8001c78:	000b      	movs	r3, r1
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f7fe fac9 	bl	8000220 <__aeabi_uldivmod>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	000b      	movs	r3, r1
 8001c92:	0013      	movs	r3, r2
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
 8001c96:	e017      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x140>)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f7fe fadc 	bl	8000260 <__aeabi_lmul>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	000b      	movs	r3, r1
 8001cac:	0010      	movs	r0, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	001c      	movs	r4, r3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	001d      	movs	r5, r3
 8001cb8:	0022      	movs	r2, r4
 8001cba:	002b      	movs	r3, r5
 8001cbc:	f7fe fab0 	bl	8000220 <__aeabi_uldivmod>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	000b      	movs	r3, r1
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ccc:	e00d      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0b5b      	lsrs	r3, r3, #13
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	0212      	lsls	r2, r2, #8
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ce8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b00e      	add	sp, #56	; 0x38
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	003d0900 	.word	0x003d0900
 8001cfc:	00f42400 	.word	0x00f42400
 8001d00:	007a1200 	.word	0x007a1200
 8001d04:	08002050 	.word	0x08002050

08001d08 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d10:	2317      	movs	r3, #23
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d106      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d100      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001d2e:	e0d9      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d30:	4b9c      	ldr	r3, [pc, #624]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	055b      	lsls	r3, r3, #21
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d10a      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	4b99      	ldr	r3, [pc, #612]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d40:	4b98      	ldr	r3, [pc, #608]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	0549      	lsls	r1, r1, #21
 8001d46:	430a      	orrs	r2, r1
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d4a:	2317      	movs	r3, #23
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b95      	ldr	r3, [pc, #596]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d11a      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5e:	4b92      	ldr	r3, [pc, #584]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b91      	ldr	r3, [pc, #580]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0049      	lsls	r1, r1, #1
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6c:	f7fe fe80 	bl	8000a70 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7fe fe7b 	bl	8000a70 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e108      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b87      	ldr	r3, [pc, #540]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d94:	4b83      	ldr	r3, [pc, #524]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	23c0      	movs	r3, #192	; 0xc0
 8001d9a:	039b      	lsls	r3, r3, #14
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	23c0      	movs	r3, #192	; 0xc0
 8001da6:	039b      	lsls	r3, r3, #14
 8001da8:	4013      	ands	r3, r2
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	23c0      	movs	r3, #192	; 0xc0
 8001db6:	039b      	lsls	r3, r3, #14
 8001db8:	4013      	ands	r3, r2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	23c0      	movs	r3, #192	; 0xc0
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	401a      	ands	r2, r3
 8001dca:	23c0      	movs	r3, #192	; 0xc0
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d10a      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dd2:	4b74      	ldr	r3, [pc, #464]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	401a      	ands	r2, r3
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d101      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0d8      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001de8:	4b6e      	ldr	r3, [pc, #440]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d049      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	23c0      	movs	r3, #192	; 0xc0
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	4013      	ands	r3, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d004      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	4013      	ands	r3, r2
 8001e12:	d10d      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	23c0      	movs	r3, #192	; 0xc0
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d034      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d02e      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e30:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e34:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3a:	4b5a      	ldr	r3, [pc, #360]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e3e:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0309      	lsls	r1, r1, #12
 8001e44:	430a      	orrs	r2, r1
 8001e46:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e48:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e4c:	4b55      	ldr	r3, [pc, #340]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e4e:	4958      	ldr	r1, [pc, #352]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	d014      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fe04 	bl	8000a70 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e6c:	e009      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fdff 	bl	8000a70 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a4e      	ldr	r2, [pc, #312]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e08b      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e82:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0ef      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	23c0      	movs	r3, #192	; 0xc0
 8001e94:	029b      	lsls	r3, r3, #10
 8001e96:	401a      	ands	r2, r3
 8001e98:	23c0      	movs	r3, #192	; 0xc0
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001ea0:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a44      	ldr	r2, [pc, #272]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	23c0      	movs	r3, #192	; 0xc0
 8001eb0:	039b      	lsls	r3, r3, #14
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ebc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	23c0      	movs	r3, #192	; 0xc0
 8001ec4:	029b      	lsls	r3, r3, #10
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ece:	2317      	movs	r3, #23
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ede:	4937      	ldr	r1, [pc, #220]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d009      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f10:	220c      	movs	r2, #12
 8001f12:	4393      	bics	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2204      	movs	r2, #4
 8001f26:	4013      	ands	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a24      	ldr	r2, [pc, #144]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2208      	movs	r2, #8
 8001f44:	4013      	ands	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2240      	movs	r2, #64	; 0x40
 8001f62:	4013      	ands	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	4013      	ands	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f88:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69da      	ldr	r2, [r3, #28]
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b006      	add	sp, #24
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	fffcffff 	.word	0xfffcffff
 8001fb0:	fff7ffff 	.word	0xfff7ffff
 8001fb4:	00001388 	.word	0x00001388
 8001fb8:	ffcfffff 	.word	0xffcfffff
 8001fbc:	efffffff 	.word	0xefffffff
 8001fc0:	fffff3ff 	.word	0xfffff3ff
 8001fc4:	ffffcfff 	.word	0xffffcfff
 8001fc8:	fbffffff 	.word	0xfbffffff
 8001fcc:	fff3ffff 	.word	0xfff3ffff

08001fd0 <__libc_init_array>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	4d0c      	ldr	r5, [pc, #48]	; (8002008 <__libc_init_array+0x38>)
 8001fd6:	4c0d      	ldr	r4, [pc, #52]	; (800200c <__libc_init_array+0x3c>)
 8001fd8:	1b64      	subs	r4, r4, r5
 8001fda:	10a4      	asrs	r4, r4, #2
 8001fdc:	42a6      	cmp	r6, r4
 8001fde:	d109      	bne.n	8001ff4 <__libc_init_array+0x24>
 8001fe0:	2600      	movs	r6, #0
 8001fe2:	f000 f821 	bl	8002028 <_init>
 8001fe6:	4d0a      	ldr	r5, [pc, #40]	; (8002010 <__libc_init_array+0x40>)
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	; (8002014 <__libc_init_array+0x44>)
 8001fea:	1b64      	subs	r4, r4, r5
 8001fec:	10a4      	asrs	r4, r4, #2
 8001fee:	42a6      	cmp	r6, r4
 8001ff0:	d105      	bne.n	8001ffe <__libc_init_array+0x2e>
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
 8001ff4:	00b3      	lsls	r3, r6, #2
 8001ff6:	58eb      	ldr	r3, [r5, r3]
 8001ff8:	4798      	blx	r3
 8001ffa:	3601      	adds	r6, #1
 8001ffc:	e7ee      	b.n	8001fdc <__libc_init_array+0xc>
 8001ffe:	00b3      	lsls	r3, r6, #2
 8002000:	58eb      	ldr	r3, [r5, r3]
 8002002:	4798      	blx	r3
 8002004:	3601      	adds	r6, #1
 8002006:	e7f2      	b.n	8001fee <__libc_init_array+0x1e>
 8002008:	08002064 	.word	0x08002064
 800200c:	08002064 	.word	0x08002064
 8002010:	08002064 	.word	0x08002064
 8002014:	08002068 	.word	0x08002068

08002018 <memset>:
 8002018:	0003      	movs	r3, r0
 800201a:	1882      	adds	r2, r0, r2
 800201c:	4293      	cmp	r3, r2
 800201e:	d100      	bne.n	8002022 <memset+0xa>
 8002020:	4770      	bx	lr
 8002022:	7019      	strb	r1, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	e7f9      	b.n	800201c <memset+0x4>

08002028 <_init>:
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202e:	bc08      	pop	{r3}
 8002030:	469e      	mov	lr, r3
 8002032:	4770      	bx	lr

08002034 <_fini>:
 8002034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203a:	bc08      	pop	{r3}
 800203c:	469e      	mov	lr, r3
 800203e:	4770      	bx	lr
