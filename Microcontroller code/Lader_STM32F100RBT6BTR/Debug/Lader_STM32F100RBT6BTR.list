
Lader_STM32F100RBT6BTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a50  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  08007c20  08007c20  00017c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800830c  0800830c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800830c  0800830c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800830c  0800830c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800830c  0800830c  0001830c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001dc  080084f0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080084f0  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb83  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e65  00000000  00000000  0002bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002e710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a24  00000000  00000000  0002f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c24f  00000000  00000000  00040b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065802  00000000  00000000  0004cde3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b25e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  000b2638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c08 	.word	0x08007c08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007c08 	.word	0x08007c08

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <getChargeOption0>:
 *      Author: dsmjo
 */

#include "BQ25713.h"

uint16_t getChargeOption0(I2C_HandleTypeDef *hi2c) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ChargeOption0Reg, 1, data_in, 2,
 8000b50:	2364      	movs	r3, #100	; 0x64
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	2302      	movs	r3, #2
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2200      	movs	r2, #0
 8000b62:	21d6      	movs	r1, #214	; 0xd6
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f002 fa71 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000b6a:	7b7b      	ldrb	r3, [r7, #13]
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	7b3b      	ldrb	r3, [r7, #12]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	b29b      	uxth	r3, r3
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <getChargeCurrent>:
uint16_t getChargeCurrent(I2C_HandleTypeDef *hi2c) {
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b088      	sub	sp, #32
 8000b86:	af04      	add	r7, sp, #16
 8000b88:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ChargeCurrentReg, 1, data_in, 2,
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	2302      	movs	r3, #2
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	21d6      	movs	r1, #214	; 0xd6
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f002 fa54 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000ba4:	7b7b      	ldrb	r3, [r7, #13]
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	b21a      	sxth	r2, r3
 8000baa:	7b3b      	ldrb	r3, [r7, #12]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	b29b      	uxth	r3, r3
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <getMaxChargeVoltage>:
uint16_t getMaxChargeVoltage(I2C_HandleTypeDef *hi2c) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af04      	add	r7, sp, #16
 8000bc2:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, MaxChargeVoltageReg, 1, data_in, 2,
 8000bc4:	2364      	movs	r3, #100	; 0x64
 8000bc6:	9302      	str	r3, [sp, #8]
 8000bc8:	2302      	movs	r3, #2
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	21d6      	movs	r1, #214	; 0xd6
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f002 fa37 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000bde:	7b7b      	ldrb	r3, [r7, #13]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	b29b      	uxth	r3, r3
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <getChargeOption1>:
uint16_t getChargeOption1(I2C_HandleTypeDef *hi2c) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b088      	sub	sp, #32
 8000bfa:	af04      	add	r7, sp, #16
 8000bfc:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ChargeOption1Reg, 1, data_in, 2,
 8000bfe:	2364      	movs	r3, #100	; 0x64
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2302      	movs	r3, #2
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	2230      	movs	r2, #48	; 0x30
 8000c10:	21d6      	movs	r1, #214	; 0xd6
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f002 fa1a 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000c18:	7b7b      	ldrb	r3, [r7, #13]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	7b3b      	ldrb	r3, [r7, #12]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	b29b      	uxth	r3, r3
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <getChargeOption2>:
uint16_t getChargeOption2(I2C_HandleTypeDef *hi2c) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ChargeOption2Reg, 1, data_in, 2,
 8000c38:	2364      	movs	r3, #100	; 0x64
 8000c3a:	9302      	str	r3, [sp, #8]
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	2232      	movs	r2, #50	; 0x32
 8000c4a:	21d6      	movs	r1, #214	; 0xd6
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f002 f9fd 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000c52:	7b7b      	ldrb	r3, [r7, #13]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	7b3b      	ldrb	r3, [r7, #12]
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	b29b      	uxth	r3, r3
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <getChargeOption3>:
uint16_t getChargeOption3(I2C_HandleTypeDef *hi2c) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b088      	sub	sp, #32
 8000c6e:	af04      	add	r7, sp, #16
 8000c70:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ChargeOption3Reg, 1, data_in, 2,
 8000c72:	2364      	movs	r3, #100	; 0x64
 8000c74:	9302      	str	r3, [sp, #8]
 8000c76:	2302      	movs	r3, #2
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2301      	movs	r3, #1
 8000c82:	2234      	movs	r2, #52	; 0x34
 8000c84:	21d6      	movs	r1, #214	; 0xd6
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f002 f9e0 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000c8c:	7b7b      	ldrb	r3, [r7, #13]
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	7b3b      	ldrb	r3, [r7, #12]
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	b29b      	uxth	r3, r3
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <getProchotOption0>:
uint16_t getProchotOption0(I2C_HandleTypeDef *hi2c) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af04      	add	r7, sp, #16
 8000caa:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ProchotOption0Reg, 1, data_in, 2,
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	2236      	movs	r2, #54	; 0x36
 8000cbe:	21d6      	movs	r1, #214	; 0xd6
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f002 f9c3 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000cc6:	7b7b      	ldrb	r3, [r7, #13]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	b29b      	uxth	r3, r3
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <getProchotOption1>:
uint16_t getProchotOption1(I2C_HandleTypeDef *hi2c) {
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b088      	sub	sp, #32
 8000ce2:	af04      	add	r7, sp, #16
 8000ce4:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ProchotOption1Reg, 1, data_in, 2,
 8000ce6:	2364      	movs	r3, #100	; 0x64
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	2302      	movs	r3, #2
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	2238      	movs	r2, #56	; 0x38
 8000cf8:	21d6      	movs	r1, #214	; 0xd6
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f002 f9a6 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000d00:	7b7b      	ldrb	r3, [r7, #13]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	7b3b      	ldrb	r3, [r7, #12]
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	b29b      	uxth	r3, r3
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <getADCOption>:
uint16_t getADCOption(I2C_HandleTypeDef *hi2c) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ADCOptionReg, 1, data_in, 2, 100);
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	9302      	str	r3, [sp, #8]
 8000d24:	2302      	movs	r3, #2
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	223a      	movs	r2, #58	; 0x3a
 8000d32:	21d6      	movs	r1, #214	; 0xd6
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f002 f989 	bl	800304c <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8000d3a:	7b7b      	ldrb	r3, [r7, #13]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	7b3b      	ldrb	r3, [r7, #12]
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	b29b      	uxth	r3, r3
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <getChargerStatus>:
uint16_t getChargerStatus(I2C_HandleTypeDef *hi2c) {
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b088      	sub	sp, #32
 8000d56:	af04      	add	r7, sp, #16
 8000d58:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ChargerStatusReg, 1, data_in, 2,
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	2302      	movs	r3, #2
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	2220      	movs	r2, #32
 8000d6c:	21d6      	movs	r1, #214	; 0xd6
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f002 f96c 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000d74:	7b7b      	ldrb	r3, [r7, #13]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	7b3b      	ldrb	r3, [r7, #12]
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	b29b      	uxth	r3, r3
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <getProchotStatus>:
uint16_t getProchotStatus(I2C_HandleTypeDef *hi2c) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ProchotStatusReg, 1, data_in, 2,
 8000d94:	2364      	movs	r3, #100	; 0x64
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2302      	movs	r3, #2
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	2222      	movs	r2, #34	; 0x22
 8000da6:	21d6      	movs	r1, #214	; 0xd6
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f002 f94f 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000dae:	7b7b      	ldrb	r3, [r7, #13]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	7b3b      	ldrb	r3, [r7, #12]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	b29b      	uxth	r3, r3
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <getIIN_DPM>:
uint16_t getIIN_DPM(I2C_HandleTypeDef *hi2c) {
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b088      	sub	sp, #32
 8000dca:	af04      	add	r7, sp, #16
 8000dcc:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, IIN_DPMReg, 1, data_in, 2, 100);
 8000dce:	2364      	movs	r3, #100	; 0x64
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	2224      	movs	r2, #36	; 0x24
 8000de0:	21d6      	movs	r1, #214	; 0xd6
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f002 f932 	bl	800304c <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8000de8:	7b7b      	ldrb	r3, [r7, #13]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	7b3b      	ldrb	r3, [r7, #12]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	b29b      	uxth	r3, r3
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <getADC_VBUS_PSYS>:
uint16_t getADC_VBUS_PSYS(I2C_HandleTypeDef *hi2c) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af04      	add	r7, sp, #16
 8000e06:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ADC_VBUS_PSYSReg, 1, data_in, 2,
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	2226      	movs	r2, #38	; 0x26
 8000e1a:	21d6      	movs	r1, #214	; 0xd6
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f002 f915 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000e22:	7b7b      	ldrb	r3, [r7, #13]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	7b3b      	ldrb	r3, [r7, #12]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	b29b      	uxth	r3, r3
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <getADC_IBAT>:
uint16_t getADC_IBAT(I2C_HandleTypeDef *hi2c) {
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b088      	sub	sp, #32
 8000e3e:	af04      	add	r7, sp, #16
 8000e40:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ADC_IBATReg, 1, data_in, 2, 100);
 8000e42:	2364      	movs	r3, #100	; 0x64
 8000e44:	9302      	str	r3, [sp, #8]
 8000e46:	2302      	movs	r3, #2
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	2228      	movs	r2, #40	; 0x28
 8000e54:	21d6      	movs	r1, #214	; 0xd6
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f002 f8f8 	bl	800304c <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8000e5c:	7b7b      	ldrb	r3, [r7, #13]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	7b3b      	ldrb	r3, [r7, #12]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	b29b      	uxth	r3, r3
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <getADC_IINCMPIN>:
uint16_t getADC_IINCMPIN(I2C_HandleTypeDef *hi2c) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ADC_IINCMPINReg, 1, data_in, 2, 100);
 8000e7c:	2364      	movs	r3, #100	; 0x64
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	2302      	movs	r3, #2
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	222a      	movs	r2, #42	; 0x2a
 8000e8e:	21d6      	movs	r1, #214	; 0xd6
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f002 f8db 	bl	800304c <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	7b3b      	ldrb	r3, [r7, #12]
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	b29b      	uxth	r3, r3
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <getADC_VSYS_VBAT>:
uint16_t getADC_VSYS_VBAT(I2C_HandleTypeDef *hi2c) {
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b088      	sub	sp, #32
 8000eb2:	af04      	add	r7, sp, #16
 8000eb4:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, ADC_VSYS_VBATReg, 1, data_in, 2,
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2302      	movs	r3, #2
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	222c      	movs	r2, #44	; 0x2c
 8000ec8:	21d6      	movs	r1, #214	; 0xd6
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f002 f8be 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000ed0:	7b7b      	ldrb	r3, [r7, #13]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	7b3b      	ldrb	r3, [r7, #12]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	b29b      	uxth	r3, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <getOTGVoltage>:
uint16_t getOTGVoltage(I2C_HandleTypeDef *hi2c) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af04      	add	r7, sp, #16
 8000eee:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, OTGVoltageReg, 1, data_in, 2, 100);
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	2206      	movs	r2, #6
 8000f02:	21d6      	movs	r1, #214	; 0xd6
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f002 f8a1 	bl	800304c <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8000f0a:	7b7b      	ldrb	r3, [r7, #13]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	7b3b      	ldrb	r3, [r7, #12]
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	b29b      	uxth	r3, r3
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <getOTGCurrent>:
uint16_t getOTGCurrent(I2C_HandleTypeDef *hi2c) {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b088      	sub	sp, #32
 8000f26:	af04      	add	r7, sp, #16
 8000f28:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, OTGCurrentReg, 1, data_in, 2, 100);
 8000f2a:	2364      	movs	r3, #100	; 0x64
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	21d6      	movs	r1, #214	; 0xd6
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f002 f884 	bl	800304c <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8000f44:	7b7b      	ldrb	r3, [r7, #13]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	7b3b      	ldrb	r3, [r7, #12]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	b29b      	uxth	r3, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <getInputVoltage>:
uint16_t getInputVoltage(I2C_HandleTypeDef *hi2c) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, InputVoltageReg, 1, data_in, 2, 100);
 8000f64:	2364      	movs	r3, #100	; 0x64
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	220a      	movs	r2, #10
 8000f76:	21d6      	movs	r1, #214	; 0xd6
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f002 f867 	bl	800304c <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	7b3b      	ldrb	r3, [r7, #12]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	b29b      	uxth	r3, r3
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <getMinSystemVoltage>:
uint16_t getMinSystemVoltage(I2C_HandleTypeDef *hi2c) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b088      	sub	sp, #32
 8000f9a:	af04      	add	r7, sp, #16
 8000f9c:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, MinSystemVoltageReg, 1, data_in, 2,
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	220c      	movs	r2, #12
 8000fb0:	21d6      	movs	r1, #214	; 0xd6
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f002 f84a 	bl	800304c <HAL_I2C_Mem_Read>
			100);
	return (data_in[1] << 8 | data_in[0]);
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	b29b      	uxth	r3, r3
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <getIIN_HOST>:
uint16_t getIIN_HOST(I2C_HandleTypeDef *hi2c) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, IIN_HOSTReg, 1, data_in, 2, 100);
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	220e      	movs	r2, #14
 8000fea:	21d6      	movs	r1, #214	; 0xd6
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f002 f82d 	bl	800304c <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8000ff2:	7b7b      	ldrb	r3, [r7, #13]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	7b3b      	ldrb	r3, [r7, #12]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	b29b      	uxth	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <setRegBQ25713>:
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, BQ25713Address, DeviceIDReg, 1, data_in, 2, 100);
	return (data_in[1] << 8 | data_in[0]);
}

uint8_t setRegBQ25713(I2C_HandleTypeDef *hi2c, uint8_t addres, uint8_t *data) {
 800100a:	b580      	push	{r7, lr}
 800100c:	b088      	sub	sp, #32
 800100e:	af04      	add	r7, sp, #16
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	460b      	mov	r3, r1
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(hi2c, BQ25713Address, addres, 1, data, 2, 100);
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	b29a      	uxth	r2, r3
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2302      	movs	r3, #2
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	21d6      	movs	r1, #214	; 0xd6
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f001 ff13 	bl	8002e58 <HAL_I2C_Mem_Write>

	return 0;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <RGBTurnOff>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RGBTurnOff() {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <RGBTurnOff+0x28>)
 8001048:	f001 fdaa 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <RGBTurnOff+0x28>)
 8001052:	f001 fda5 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2140      	movs	r1, #64	; 0x40
 800105a:	4802      	ldr	r0, [pc, #8]	; (8001064 <RGBTurnOff+0x28>)
 800105c:	f001 fda0 	bl	8002ba0 <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40011000 	.word	0x40011000

08001068 <RGBTurnRED>:
void RGBTurnRED() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <RGBTurnRED+0x28>)
 8001074:	f001 fd94 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <RGBTurnRED+0x28>)
 800107e:	f001 fd8f 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2140      	movs	r1, #64	; 0x40
 8001086:	4802      	ldr	r0, [pc, #8]	; (8001090 <RGBTurnRED+0x28>)
 8001088:	f001 fd8a 	bl	8002ba0 <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40011000 	.word	0x40011000

08001094 <RGBTurnBlue>:
void RGBTurnBlue() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <RGBTurnBlue+0x28>)
 80010a0:	f001 fd7e 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <RGBTurnBlue+0x28>)
 80010aa:	f001 fd79 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	4802      	ldr	r0, [pc, #8]	; (80010bc <RGBTurnBlue+0x28>)
 80010b4:	f001 fd74 	bl	8002ba0 <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40011000 	.word	0x40011000

080010c0 <RGBTurnGreen>:
void RGBTurnGreen() {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <RGBTurnGreen+0x28>)
 80010cc:	f001 fd68 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <RGBTurnGreen+0x28>)
 80010d6:	f001 fd63 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	4802      	ldr	r0, [pc, #8]	; (80010e8 <RGBTurnGreen+0x28>)
 80010e0:	f001 fd5e 	bl	8002ba0 <HAL_GPIO_WritePin>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40011000 	.word	0x40011000

080010ec <printDecimal>:

void printDecimal(int data) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	char buffer1[16];
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer1,
			sprintf(buffer1, "%d\r\n", data), 500);
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <printDecimal+0x30>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 fb63 	bl	80057c8 <siprintf>
 8001102:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer1,
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 0108 	add.w	r1, r7, #8
 800110a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <printDecimal+0x34>)
 8001110:	f003 f999 	bl	8004446 <HAL_UART_Transmit>

}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	08007c20 	.word	0x08007c20
 8001120:	200002f4 	.word	0x200002f4

08001124 <printHex>:
	char buffer1[16];
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer1,
			sprintf(buffer1, "%+.4f\r\n", dataFloat), 500);
}

void printHex(uint16_t data) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	char buffer[16];
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
			sprintf(buffer, "0x%04X\r\n", data), 500);
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4908      	ldr	r1, [pc, #32]	; (8001158 <printHex+0x34>)
 8001136:	4618      	mov	r0, r3
 8001138:	f004 fb46 	bl	80057c8 <siprintf>
 800113c:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 800113e:	b29a      	uxth	r2, r3
 8001140:	f107 0108 	add.w	r1, r7, #8
 8001144:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <printHex+0x38>)
 800114a:	f003 f97c 	bl	8004446 <HAL_UART_Transmit>

}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	08007c30 	.word	0x08007c30
 800115c:	200002f4 	.word	0x200002f4

08001160 <printString>:
void printString(char *str) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff f851 	bl	8000210 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <printString+0x24>)
 8001178:	f003 f965 	bl	8004446 <HAL_UART_Transmit>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200002f4 	.word	0x200002f4

08001188 <printlnString>:
void printlnString(char *str) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff f83d 	bl	8000210 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	b29a      	uxth	r2, r3
 800119a:	2364      	movs	r3, #100	; 0x64
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <printlnString+0x2c>)
 80011a0:	f003 f951 	bl	8004446 <HAL_UART_Transmit>
	printString("\r\n");
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <printlnString+0x30>)
 80011a6:	f7ff ffdb 	bl	8001160 <printString>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200002f4 	.word	0x200002f4
 80011b8:	08007c3c 	.word	0x08007c3c

080011bc <printAT_Comand_Error>:

void printAT_Comand_Error(int errorNr) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	printString("ERROR ");
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <printAT_Comand_Error+0x1c>)
 80011c6:	f7ff ffcb 	bl	8001160 <printString>
	printDecimal(errorNr);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff8e 	bl	80010ec <printDecimal>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	08007c40 	.word	0x08007c40

080011dc <str_cut>:
int str_cut(char *str, int begin, int len) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
	int l = strlen(str);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff f811 	bl	8000210 <strlen>
 80011ee:	4603      	mov	r3, r0
 80011f0:	617b      	str	r3, [r7, #20]

	if (len < 0)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	da03      	bge.n	8001200 <str_cut+0x24>
		len = l - begin;
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	607b      	str	r3, [r7, #4]
	if (begin + len > l)
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	da03      	bge.n	8001214 <str_cut+0x38>
		len = l - begin;
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	607b      	str	r3, [r7, #4]
	memmove(str + begin, str + begin + len, l - len + 1);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	18d0      	adds	r0, r2, r3
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	18d1      	adds	r1, r2, r3
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	3301      	adds	r3, #1
 800122c:	461a      	mov	r2, r3
 800122e:	f003 fe49 	bl	8004ec4 <memmove>

	return len;
 8001232:	687b      	ldr	r3, [r7, #4]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <stringToInt>:

uint32_t stringToInt(char *str) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	str_cut(str, 4, -1);
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	2104      	movs	r1, #4
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffc6 	bl	80011dc <str_cut>

	//int l = strlen(str);
	return str[0] << 24 | str[1] << 16 | str[2] << 8 | str[3];
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	061a      	lsls	r2, r3, #24
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3301      	adds	r3, #1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	041b      	lsls	r3, r3, #16
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3302      	adds	r3, #2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	4313      	orrs	r3, r2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	3203      	adds	r2, #3
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	4313      	orrs	r3, r2

}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <HAL_UART_RxCpltCallback+0x64>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d122      	bne.n	80012d4 <HAL_UART_RxCpltCallback+0x58>
		__HAL_UART_FLUSH_DRREGISTER(&huart1);
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_UART_RxCpltCallback+0x68>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
		if (rxByte == 13 || rxByte == 10 || rxIdx >= 23) {
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_UART_RxCpltCallback+0x6c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b0d      	cmp	r3, #13
 800129a:	d007      	beq.n	80012ac <HAL_UART_RxCpltCallback+0x30>
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_UART_RxCpltCallback+0x6c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b0a      	cmp	r3, #10
 80012a2:	d003      	beq.n	80012ac <HAL_UART_RxCpltCallback+0x30>
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_UART_RxCpltCallback+0x70>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	2b16      	cmp	r3, #22
 80012aa:	d906      	bls.n	80012ba <HAL_UART_RxCpltCallback+0x3e>
			//rxBuffer[rxIdx] = rxByte;
			rxFlag = 1;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_UART_RxCpltCallback+0x74>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
			rxIdx = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_UART_RxCpltCallback+0x70>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	801a      	strh	r2, [r3, #0]
			rxBuffer[rxIdx] = rxByte;
			rxIdx++;
		}
	}

}
 80012b8:	e00c      	b.n	80012d4 <HAL_UART_RxCpltCallback+0x58>
			rxBuffer[rxIdx] = rxByte;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_UART_RxCpltCallback+0x70>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_UART_RxCpltCallback+0x6c>)
 80012c2:	7819      	ldrb	r1, [r3, #0]
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_UART_RxCpltCallback+0x78>)
 80012c6:	5499      	strb	r1, [r3, r2]
			rxIdx++;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_UART_RxCpltCallback+0x70>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_UART_RxCpltCallback+0x70>)
 80012d2:	801a      	strh	r2, [r3, #0]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40013800 	.word	0x40013800
 80012e4:	200002f4 	.word	0x200002f4
 80012e8:	200002ae 	.word	0x200002ae
 80012ec:	200002ac 	.word	0x200002ac
 80012f0:	20000352 	.word	0x20000352
 80012f4:	20000338 	.word	0x20000338

080012f8 <BQ25713Config>:
void BQ25713Config() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	//boot up time
	RGBTurnBlue();
 80012fc:	f7ff feca 	bl	8001094 <RGBTurnBlue>
	HAL_Delay(1000); //wait 1000ms to make sure IC is ready
 8001300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001304:	f000 ff32 	bl	800216c <HAL_Delay>
	//data_input[1] = 0x00;
	//setRegBQ25713(&hi2c1, InputVoltageReg, data_input);

	//data_input[0] = 0x08;
	//data_input[1] = 0x75;
	data_input[0] = 0x00;
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <BQ25713Config+0x9c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
	data_input[1] = 0x16;
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <BQ25713Config+0x9c>)
 8001310:	2216      	movs	r2, #22
 8001312:	705a      	strb	r2, [r3, #1]
	setRegBQ25713(&hi2c1, ChargeOption0Reg, data_input);
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <BQ25713Config+0x9c>)
 8001316:	2100      	movs	r1, #0
 8001318:	481f      	ldr	r0, [pc, #124]	; (8001398 <BQ25713Config+0xa0>)
 800131a:	f7ff fe76 	bl	800100a <setRegBQ25713>

	data_input[0] = 0x19;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <BQ25713Config+0x9c>)
 8001320:	2219      	movs	r2, #25
 8001322:	701a      	strb	r2, [r3, #0]
	data_input[1] = 0x02;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <BQ25713Config+0x9c>)
 8001326:	2202      	movs	r2, #2
 8001328:	705a      	strb	r2, [r3, #1]
	setRegBQ25713(&hi2c1, ChargeOption1Reg, data_input);
 800132a:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <BQ25713Config+0x9c>)
 800132c:	2130      	movs	r1, #48	; 0x30
 800132e:	481a      	ldr	r0, [pc, #104]	; (8001398 <BQ25713Config+0xa0>)
 8001330:	f7ff fe6b 	bl	800100a <setRegBQ25713>

	//data_input[0] = 0x34;
	//data_input[1] = 0x02;
	data_input[0] = 0x05;
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <BQ25713Config+0x9c>)
 8001336:	2205      	movs	r2, #5
 8001338:	701a      	strb	r2, [r3, #0]
	data_input[1] = 0x02;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <BQ25713Config+0x9c>)
 800133c:	2202      	movs	r2, #2
 800133e:	705a      	strb	r2, [r3, #1]
	setRegBQ25713(&hi2c1, ChargeOption2Reg, data_input);
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <BQ25713Config+0x9c>)
 8001342:	2132      	movs	r1, #50	; 0x32
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <BQ25713Config+0xa0>)
 8001346:	f7ff fe60 	bl	800100a <setRegBQ25713>

	//data_input[0] = 0x38;
	//data_input[1] = 0x28;
	data_input[0] = 0x30;
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <BQ25713Config+0x9c>)
 800134c:	2230      	movs	r2, #48	; 0x30
 800134e:	701a      	strb	r2, [r3, #0]
	data_input[1] = 0x20;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <BQ25713Config+0x9c>)
 8001352:	2220      	movs	r2, #32
 8001354:	705a      	strb	r2, [r3, #1]
	setRegBQ25713(&hi2c1, ChargeOption3Reg, data_input);
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <BQ25713Config+0x9c>)
 8001358:	2134      	movs	r1, #52	; 0x34
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <BQ25713Config+0xa0>)
 800135c:	f7ff fe55 	bl	800100a <setRegBQ25713>

	//data_input[0] = 0xC0;
	//data_input[1] = 0x1F;
	//setRegBQ25713(&hi2c1, IIN_DPMReg, data_input);

	data_input[0] = 0xFF;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <BQ25713Config+0x9c>)
 8001362:	22ff      	movs	r2, #255	; 0xff
 8001364:	701a      	strb	r2, [r3, #0]
	data_input[1] = 0x7F;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <BQ25713Config+0x9c>)
 8001368:	227f      	movs	r2, #127	; 0x7f
 800136a:	705a      	strb	r2, [r3, #1]
	setRegBQ25713(&hi2c1, IIN_HOSTReg, data_input);
 800136c:	4a09      	ldr	r2, [pc, #36]	; (8001394 <BQ25713Config+0x9c>)
 800136e:	210e      	movs	r1, #14
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <BQ25713Config+0xa0>)
 8001372:	f7ff fe4a 	bl	800100a <setRegBQ25713>

	//HAL_I2C_DeInit(&hi2c1);
	//HAL_I2C_Init(&hi2c2);

	//set CELL_BATPRESZ_Pin -> auto disable IDPM
	HAL_GPIO_WritePin(CELL_BATPRESZ_GPIO_Port, CELL_BATPRESZ_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2101      	movs	r1, #1
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <BQ25713Config+0xa4>)
 800137c:	f001 fc10 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OTG_VAP_GPIO_Port, OTG_VAP_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2102      	movs	r1, #2
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <BQ25713Config+0xa4>)
 8001386:	f001 fc0b 	bl	8002ba0 <HAL_GPIO_WritePin>

	RGBTurnOff();
 800138a:	f7ff fe57 	bl	800103c <RGBTurnOff>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000350 	.word	0x20000350
 8001398:	20000204 	.word	0x20000204
 800139c:	40011000 	.word	0x40011000

080013a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013a6:	f000 fe88 	bl	80020ba <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013aa:	f000 fb0d 	bl	80019c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013ae:	f000 fbeb 	bl	8001b88 <MX_GPIO_Init>
	MX_DMA_Init();
 80013b2:	f000 fbcb 	bl	8001b4c <MX_DMA_Init>
	MX_I2C1_Init();
 80013b6:	f000 fb43 	bl	8001a40 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80013ba:	f000 fb9d 	bl	8001af8 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 80013be:	f000 fb6d 	bl	8001a9c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2C_Init(&hi2c1);
 80013c2:	48c9      	ldr	r0, [pc, #804]	; (80016e8 <main+0x348>)
 80013c4:	f001 fc04 	bl	8002bd0 <HAL_I2C_Init>

	__HAL_UART_FLUSH_DRREGISTER(&huart1);
 80013c8:	4bc8      	ldr	r3, [pc, #800]	; (80016ec <main+0x34c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_DMA(&huart1, &rxByte, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	49c7      	ldr	r1, [pc, #796]	; (80016f0 <main+0x350>)
 80013d2:	48c6      	ldr	r0, [pc, #792]	; (80016ec <main+0x34c>)
 80013d4:	f003 f8ca 	bl	800456c <HAL_UART_Receive_DMA>

	BQ25713Config();
 80013d8:	f7ff ff8e 	bl	80012f8 <BQ25713Config>
		 HAL_I2C_Mem_Read(&hi2c1, 0xD6, 0x02, 1, ChargeCurrent, 2, 100);
		 HAL_Delay(100);
		 */
		//setRegBQ25713(&hi2c1, 0x0F, data_input);
		//	  HAL_I2C_Mem_Write(&hi2c1, 0xD6, 0x0E, 1, data_input, 2, 100);
		RGBTurnRED();
 80013dc:	f7ff fe44 	bl	8001068 <RGBTurnRED>
		HAL_Delay(500);
 80013e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013e4:	f000 fec2 	bl	800216c <HAL_Delay>
		RGBTurnOff();
 80013e8:	f7ff fe28 	bl	800103c <RGBTurnOff>
		HAL_Delay(500);
 80013ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f0:	f000 febc 	bl	800216c <HAL_Delay>

		if (rxFlag == 1) {
 80013f4:	4bbf      	ldr	r3, [pc, #764]	; (80016f4 <main+0x354>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 82b9 	bne.w	8001970 <main+0x5d0>
			RGBTurnGreen();
 80013fe:	f7ff fe5f 	bl	80010c0 <RGBTurnGreen>
			rxFlag = 0;
 8001402:	4bbc      	ldr	r3, [pc, #752]	; (80016f4 <main+0x354>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]

			printlnString(rxBuffer);
 8001408:	48bb      	ldr	r0, [pc, #748]	; (80016f8 <main+0x358>)
 800140a:	f7ff febd 	bl	8001188 <printlnString>

			if (rxBuffer[0] == 'A' && rxBuffer[1] == 'T'
 800140e:	4bba      	ldr	r3, [pc, #744]	; (80016f8 <main+0x358>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b41      	cmp	r3, #65	; 0x41
 8001414:	f040 8299 	bne.w	800194a <main+0x5aa>
 8001418:	4bb7      	ldr	r3, [pc, #732]	; (80016f8 <main+0x358>)
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	2b54      	cmp	r3, #84	; 0x54
 800141e:	f040 8294 	bne.w	800194a <main+0x5aa>
					&& rxBuffer[2] == '+') {
 8001422:	4bb5      	ldr	r3, [pc, #724]	; (80016f8 <main+0x358>)
 8001424:	789b      	ldrb	r3, [r3, #2]
 8001426:	2b2b      	cmp	r3, #43	; 0x2b
 8001428:	f040 828f 	bne.w	800194a <main+0x5aa>
				str_cut(rxBuffer, 0, 3); //cut AT+ off
 800142c:	2203      	movs	r2, #3
 800142e:	2100      	movs	r1, #0
 8001430:	48b1      	ldr	r0, [pc, #708]	; (80016f8 <main+0x358>)
 8001432:	f7ff fed3 	bl	80011dc <str_cut>
				//printlnString(rxBuffer);

				switch (stringToInt(rxBuffer)) {
 8001436:	48b0      	ldr	r0, [pc, #704]	; (80016f8 <main+0x358>)
 8001438:	f7ff ff00 	bl	800123c <stringToInt>
 800143c:	4603      	mov	r3, r0
 800143e:	4aaf      	ldr	r2, [pc, #700]	; (80016fc <main+0x35c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	f000 81ba 	beq.w	80017ba <main+0x41a>
 8001446:	4aad      	ldr	r2, [pc, #692]	; (80016fc <main+0x35c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	f200 8279 	bhi.w	8001940 <main+0x5a0>
 800144e:	4aac      	ldr	r2, [pc, #688]	; (8001700 <main+0x360>)
 8001450:	4293      	cmp	r3, r2
 8001452:	f000 81c1 	beq.w	80017d8 <main+0x438>
 8001456:	4aaa      	ldr	r2, [pc, #680]	; (8001700 <main+0x360>)
 8001458:	4293      	cmp	r3, r2
 800145a:	f200 8271 	bhi.w	8001940 <main+0x5a0>
 800145e:	4aa9      	ldr	r2, [pc, #676]	; (8001704 <main+0x364>)
 8001460:	4293      	cmp	r3, r2
 8001462:	f000 8195 	beq.w	8001790 <main+0x3f0>
 8001466:	4aa7      	ldr	r2, [pc, #668]	; (8001704 <main+0x364>)
 8001468:	4293      	cmp	r3, r2
 800146a:	f200 8269 	bhi.w	8001940 <main+0x5a0>
 800146e:	4aa6      	ldr	r2, [pc, #664]	; (8001708 <main+0x368>)
 8001470:	4293      	cmp	r3, r2
 8001472:	f000 812a 	beq.w	80016ca <main+0x32a>
 8001476:	4aa4      	ldr	r2, [pc, #656]	; (8001708 <main+0x368>)
 8001478:	4293      	cmp	r3, r2
 800147a:	f200 8261 	bhi.w	8001940 <main+0x5a0>
 800147e:	4aa3      	ldr	r2, [pc, #652]	; (800170c <main+0x36c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d046      	beq.n	8001512 <main+0x172>
 8001484:	4aa1      	ldr	r2, [pc, #644]	; (800170c <main+0x36c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	f200 825a 	bhi.w	8001940 <main+0x5a0>
 800148c:	4aa0      	ldr	r2, [pc, #640]	; (8001710 <main+0x370>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d03b      	beq.n	800150a <main+0x16a>
 8001492:	4a9f      	ldr	r2, [pc, #636]	; (8001710 <main+0x370>)
 8001494:	4293      	cmp	r3, r2
 8001496:	f200 8253 	bhi.w	8001940 <main+0x5a0>
 800149a:	4a9e      	ldr	r2, [pc, #632]	; (8001714 <main+0x374>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d82f      	bhi.n	8001500 <main+0x160>
 80014a0:	4a9d      	ldr	r2, [pc, #628]	; (8001718 <main+0x378>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	f0c0 824c 	bcc.w	8001940 <main+0x5a0>
 80014a8:	4a9c      	ldr	r2, [pc, #624]	; (800171c <main+0x37c>)
 80014aa:	441a      	add	r2, r3
 80014ac:	2a11      	cmp	r2, #17
 80014ae:	f200 8247 	bhi.w	8001940 <main+0x5a0>
 80014b2:	a301      	add	r3, pc, #4	; (adr r3, 80014b8 <main+0x118>)
 80014b4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80014b8:	080017f7 	.word	0x080017f7
 80014bc:	08001815 	.word	0x08001815
 80014c0:	08001833 	.word	0x08001833
 80014c4:	08001851 	.word	0x08001851
 80014c8:	0800186f 	.word	0x0800186f
 80014cc:	0800188d 	.word	0x0800188d
 80014d0:	080018ab 	.word	0x080018ab
 80014d4:	080018c9 	.word	0x080018c9
 80014d8:	080018e7 	.word	0x080018e7
 80014dc:	08001905 	.word	0x08001905
 80014e0:	08001941 	.word	0x08001941
 80014e4:	08001941 	.word	0x08001941
 80014e8:	08001941 	.word	0x08001941
 80014ec:	08001941 	.word	0x08001941
 80014f0:	08001941 	.word	0x08001941
 80014f4:	08001941 	.word	0x08001941
 80014f8:	08001941 	.word	0x08001941
 80014fc:	08001923 	.word	0x08001923
 8001500:	4a87      	ldr	r2, [pc, #540]	; (8001720 <main+0x380>)
 8001502:	4293      	cmp	r3, r2
 8001504:	f000 8153 	beq.w	80017ae <main+0x40e>
 8001508:	e21a      	b.n	8001940 <main+0x5a0>
				case 'O' << 24 | 'K' << 16 | '?' << 8 | 0:
					printlnString("OK");
 800150a:	4886      	ldr	r0, [pc, #536]	; (8001724 <main+0x384>)
 800150c:	f7ff fe3c 	bl	8001188 <printlnString>
					break;
 8001510:	e21a      	b.n	8001948 <main+0x5a8>
				case 'O' << 24 | 'V' << 16 | '?' << 8 | 0:
					printlnString("Overview:\r\n");
 8001512:	4885      	ldr	r0, [pc, #532]	; (8001728 <main+0x388>)
 8001514:	f7ff fe38 	bl	8001188 <printlnString>

					printlnString("ChargeOption0: [Hex]");
 8001518:	4884      	ldr	r0, [pc, #528]	; (800172c <main+0x38c>)
 800151a:	f7ff fe35 	bl	8001188 <printlnString>
					printHex(getChargeOption0(&hi2c1));
 800151e:	4872      	ldr	r0, [pc, #456]	; (80016e8 <main+0x348>)
 8001520:	f7ff fb12 	bl	8000b48 <getChargeOption0>
 8001524:	4603      	mov	r3, r0
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fdfc 	bl	8001124 <printHex>
					printlnString("ChargeCurrent: [Hex]");
 800152c:	4880      	ldr	r0, [pc, #512]	; (8001730 <main+0x390>)
 800152e:	f7ff fe2b 	bl	8001188 <printlnString>
					printHex(getChargeCurrent(&hi2c1));
 8001532:	486d      	ldr	r0, [pc, #436]	; (80016e8 <main+0x348>)
 8001534:	f7ff fb25 	bl	8000b82 <getChargeCurrent>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fdf2 	bl	8001124 <printHex>
					printlnString("MaxChargeVoltage: [Hex]");
 8001540:	487c      	ldr	r0, [pc, #496]	; (8001734 <main+0x394>)
 8001542:	f7ff fe21 	bl	8001188 <printlnString>
					printHex(getMaxChargeVoltage(&hi2c1));
 8001546:	4868      	ldr	r0, [pc, #416]	; (80016e8 <main+0x348>)
 8001548:	f7ff fb38 	bl	8000bbc <getMaxChargeVoltage>
 800154c:	4603      	mov	r3, r0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fde8 	bl	8001124 <printHex>
					printlnString("ChargeOption1: [Hex]");
 8001554:	4878      	ldr	r0, [pc, #480]	; (8001738 <main+0x398>)
 8001556:	f7ff fe17 	bl	8001188 <printlnString>
					printHex(getChargeOption1(&hi2c1));
 800155a:	4863      	ldr	r0, [pc, #396]	; (80016e8 <main+0x348>)
 800155c:	f7ff fb4b 	bl	8000bf6 <getChargeOption1>
 8001560:	4603      	mov	r3, r0
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fdde 	bl	8001124 <printHex>
					printlnString("ChargeOption2: [Hex]");
 8001568:	4874      	ldr	r0, [pc, #464]	; (800173c <main+0x39c>)
 800156a:	f7ff fe0d 	bl	8001188 <printlnString>
					printHex(getChargeOption2(&hi2c1));
 800156e:	485e      	ldr	r0, [pc, #376]	; (80016e8 <main+0x348>)
 8001570:	f7ff fb5e 	bl	8000c30 <getChargeOption2>
 8001574:	4603      	mov	r3, r0
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fdd4 	bl	8001124 <printHex>
					printlnString("ChargeOption3: [Hex]");
 800157c:	4870      	ldr	r0, [pc, #448]	; (8001740 <main+0x3a0>)
 800157e:	f7ff fe03 	bl	8001188 <printlnString>
					printHex(getChargeOption3(&hi2c1));
 8001582:	4859      	ldr	r0, [pc, #356]	; (80016e8 <main+0x348>)
 8001584:	f7ff fb71 	bl	8000c6a <getChargeOption3>
 8001588:	4603      	mov	r3, r0
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fdca 	bl	8001124 <printHex>
					printlnString("ProchotOption0: [Hex]");
 8001590:	486c      	ldr	r0, [pc, #432]	; (8001744 <main+0x3a4>)
 8001592:	f7ff fdf9 	bl	8001188 <printlnString>
					printHex(getProchotOption0(&hi2c1));
 8001596:	4854      	ldr	r0, [pc, #336]	; (80016e8 <main+0x348>)
 8001598:	f7ff fb84 	bl	8000ca4 <getProchotOption0>
 800159c:	4603      	mov	r3, r0
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fdc0 	bl	8001124 <printHex>
					printlnString("ProchotOption1: [Hex]");
 80015a4:	4868      	ldr	r0, [pc, #416]	; (8001748 <main+0x3a8>)
 80015a6:	f7ff fdef 	bl	8001188 <printlnString>
					printHex(getProchotOption1(&hi2c1));
 80015aa:	484f      	ldr	r0, [pc, #316]	; (80016e8 <main+0x348>)
 80015ac:	f7ff fb97 	bl	8000cde <getProchotOption1>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fdb6 	bl	8001124 <printHex>
					printlnString("ADCOption: [Hex]");
 80015b8:	4864      	ldr	r0, [pc, #400]	; (800174c <main+0x3ac>)
 80015ba:	f7ff fde5 	bl	8001188 <printlnString>
					printHex(getADCOption(&hi2c1));
 80015be:	484a      	ldr	r0, [pc, #296]	; (80016e8 <main+0x348>)
 80015c0:	f7ff fbaa 	bl	8000d18 <getADCOption>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fdac 	bl	8001124 <printHex>
					printlnString("ChargerStatus: [Hex]");
 80015cc:	4860      	ldr	r0, [pc, #384]	; (8001750 <main+0x3b0>)
 80015ce:	f7ff fddb 	bl	8001188 <printlnString>
					printHex(getChargerStatus(&hi2c1));
 80015d2:	4845      	ldr	r0, [pc, #276]	; (80016e8 <main+0x348>)
 80015d4:	f7ff fbbd 	bl	8000d52 <getChargerStatus>
 80015d8:	4603      	mov	r3, r0
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fda2 	bl	8001124 <printHex>
					printlnString("ProchotStatus: [Hex]");
 80015e0:	485c      	ldr	r0, [pc, #368]	; (8001754 <main+0x3b4>)
 80015e2:	f7ff fdd1 	bl	8001188 <printlnString>
					printHex(getProchotStatus(&hi2c1));
 80015e6:	4840      	ldr	r0, [pc, #256]	; (80016e8 <main+0x348>)
 80015e8:	f7ff fbd0 	bl	8000d8c <getProchotStatus>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fd98 	bl	8001124 <printHex>
					printlnString("IIN_DPM: [Hex]");
 80015f4:	4858      	ldr	r0, [pc, #352]	; (8001758 <main+0x3b8>)
 80015f6:	f7ff fdc7 	bl	8001188 <printlnString>
					printHex(getIIN_DPM(&hi2c1));
 80015fa:	483b      	ldr	r0, [pc, #236]	; (80016e8 <main+0x348>)
 80015fc:	f7ff fbe3 	bl	8000dc6 <getIIN_DPM>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fd8e 	bl	8001124 <printHex>
					printlnString("ADC_VBUS_PSYS: [Hex]");
 8001608:	4854      	ldr	r0, [pc, #336]	; (800175c <main+0x3bc>)
 800160a:	f7ff fdbd 	bl	8001188 <printlnString>
					printHex(getADC_VBUS_PSYS(&hi2c1));
 800160e:	4836      	ldr	r0, [pc, #216]	; (80016e8 <main+0x348>)
 8001610:	f7ff fbf6 	bl	8000e00 <getADC_VBUS_PSYS>
 8001614:	4603      	mov	r3, r0
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fd84 	bl	8001124 <printHex>
					printlnString("ADC_IBAT: [Hex]");
 800161c:	4850      	ldr	r0, [pc, #320]	; (8001760 <main+0x3c0>)
 800161e:	f7ff fdb3 	bl	8001188 <printlnString>
					printHex(getADC_IBAT(&hi2c1));
 8001622:	4831      	ldr	r0, [pc, #196]	; (80016e8 <main+0x348>)
 8001624:	f7ff fc09 	bl	8000e3a <getADC_IBAT>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fd7a 	bl	8001124 <printHex>
					printlnString("ADC_IINCMPIN: [Hex]");
 8001630:	484c      	ldr	r0, [pc, #304]	; (8001764 <main+0x3c4>)
 8001632:	f7ff fda9 	bl	8001188 <printlnString>
					printHex(getADC_IINCMPIN(&hi2c1));
 8001636:	482c      	ldr	r0, [pc, #176]	; (80016e8 <main+0x348>)
 8001638:	f7ff fc1c 	bl	8000e74 <getADC_IINCMPIN>
 800163c:	4603      	mov	r3, r0
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd70 	bl	8001124 <printHex>
					printlnString("ADC_VSYS_VBAT: [Hex]");
 8001644:	4848      	ldr	r0, [pc, #288]	; (8001768 <main+0x3c8>)
 8001646:	f7ff fd9f 	bl	8001188 <printlnString>
					printHex(getADC_VSYS_VBAT(&hi2c1));
 800164a:	4827      	ldr	r0, [pc, #156]	; (80016e8 <main+0x348>)
 800164c:	f7ff fc2f 	bl	8000eae <getADC_VSYS_VBAT>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fd66 	bl	8001124 <printHex>
					printlnString("OTGVoltage: [Hex]");
 8001658:	4844      	ldr	r0, [pc, #272]	; (800176c <main+0x3cc>)
 800165a:	f7ff fd95 	bl	8001188 <printlnString>
					printHex(getOTGVoltage(&hi2c1));
 800165e:	4822      	ldr	r0, [pc, #136]	; (80016e8 <main+0x348>)
 8001660:	f7ff fc42 	bl	8000ee8 <getOTGVoltage>
 8001664:	4603      	mov	r3, r0
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fd5c 	bl	8001124 <printHex>
					printlnString("OTGCurrent: [Hex]");
 800166c:	4840      	ldr	r0, [pc, #256]	; (8001770 <main+0x3d0>)
 800166e:	f7ff fd8b 	bl	8001188 <printlnString>
					printHex(getOTGCurrent(&hi2c1));
 8001672:	481d      	ldr	r0, [pc, #116]	; (80016e8 <main+0x348>)
 8001674:	f7ff fc55 	bl	8000f22 <getOTGCurrent>
 8001678:	4603      	mov	r3, r0
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fd52 	bl	8001124 <printHex>
					printlnString("InputVoltage: [Hex]");
 8001680:	483c      	ldr	r0, [pc, #240]	; (8001774 <main+0x3d4>)
 8001682:	f7ff fd81 	bl	8001188 <printlnString>
					printHex(getInputVoltage(&hi2c1));
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <main+0x348>)
 8001688:	f7ff fc68 	bl	8000f5c <getInputVoltage>
 800168c:	4603      	mov	r3, r0
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd48 	bl	8001124 <printHex>
					printlnString("MinSystemVoltage: [Hex]");
 8001694:	4838      	ldr	r0, [pc, #224]	; (8001778 <main+0x3d8>)
 8001696:	f7ff fd77 	bl	8001188 <printlnString>
					printHex(getMinSystemVoltage(&hi2c1));
 800169a:	4813      	ldr	r0, [pc, #76]	; (80016e8 <main+0x348>)
 800169c:	f7ff fc7b 	bl	8000f96 <getMinSystemVoltage>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd3e 	bl	8001124 <printHex>
					printlnString("IIN_HOST: [Hex]");
 80016a8:	4834      	ldr	r0, [pc, #208]	; (800177c <main+0x3dc>)
 80016aa:	f7ff fd6d 	bl	8001188 <printlnString>
					printHex(getIIN_HOST(&hi2c1));
 80016ae:	480e      	ldr	r0, [pc, #56]	; (80016e8 <main+0x348>)
 80016b0:	f7ff fc8e 	bl	8000fd0 <getIIN_HOST>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fd34 	bl	8001124 <printHex>
					printlnString("ManufactureID: [Hex]");
 80016bc:	4830      	ldr	r0, [pc, #192]	; (8001780 <main+0x3e0>)
 80016be:	f7ff fd63 	bl	8001188 <printlnString>
					//printHex(getManufactureID(&hi2c1));
					printlnString("DeviceID: [Hex]");
 80016c2:	4830      	ldr	r0, [pc, #192]	; (8001784 <main+0x3e4>)
 80016c4:	f7ff fd60 	bl	8001188 <printlnString>
					//printHex(getDeviceID(&hi2c1));
					break;
 80016c8:	e13e      	b.n	8001948 <main+0x5a8>
				case 'R' << 24 | 'S' << 16 | 'I' << 8 | 'V':
					data_input[0] = 0x00;
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <main+0x3e8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
					data_input[1] = 0x06; //zet dit ies wa hoger dan 3.2V (bij 00h) 06h -> 3.2V+1,024+0,512 = 4,736V
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <main+0x3e8>)
 80016d2:	2206      	movs	r2, #6
 80016d4:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, InputVoltageReg, data_input);
 80016d6:	4a2c      	ldr	r2, [pc, #176]	; (8001788 <main+0x3e8>)
 80016d8:	210a      	movs	r1, #10
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <main+0x348>)
 80016dc:	f7ff fc95 	bl	800100a <setRegBQ25713>
					printlnString("RSIV");
 80016e0:	482a      	ldr	r0, [pc, #168]	; (800178c <main+0x3ec>)
 80016e2:	f7ff fd51 	bl	8001188 <printlnString>
					break;
 80016e6:	e12f      	b.n	8001948 <main+0x5a8>
 80016e8:	20000204 	.word	0x20000204
 80016ec:	200002f4 	.word	0x200002f4
 80016f0:	200002ae 	.word	0x200002ae
 80016f4:	20000352 	.word	0x20000352
 80016f8:	20000338 	.word	0x20000338
 80016fc:	52535456 	.word	0x52535456
 8001700:	52535450 	.word	0x52535450
 8001704:	52534d56 	.word	0x52534d56
 8001708:	52534956 	.word	0x52534956
 800170c:	4f563f00 	.word	0x4f563f00
 8001710:	4f4b3f00 	.word	0x4f4b3f00
 8001714:	43555241 	.word	0x43555241
 8001718:	43555230 	.word	0x43555230
 800171c:	bcaaadd0 	.word	0xbcaaadd0
 8001720:	494e5400 	.word	0x494e5400
 8001724:	08007c48 	.word	0x08007c48
 8001728:	08007c4c 	.word	0x08007c4c
 800172c:	08007c58 	.word	0x08007c58
 8001730:	08007c70 	.word	0x08007c70
 8001734:	08007c88 	.word	0x08007c88
 8001738:	08007ca0 	.word	0x08007ca0
 800173c:	08007cb8 	.word	0x08007cb8
 8001740:	08007cd0 	.word	0x08007cd0
 8001744:	08007ce8 	.word	0x08007ce8
 8001748:	08007d00 	.word	0x08007d00
 800174c:	08007d18 	.word	0x08007d18
 8001750:	08007d2c 	.word	0x08007d2c
 8001754:	08007d44 	.word	0x08007d44
 8001758:	08007d5c 	.word	0x08007d5c
 800175c:	08007d6c 	.word	0x08007d6c
 8001760:	08007d84 	.word	0x08007d84
 8001764:	08007d94 	.word	0x08007d94
 8001768:	08007da8 	.word	0x08007da8
 800176c:	08007dc0 	.word	0x08007dc0
 8001770:	08007dd4 	.word	0x08007dd4
 8001774:	08007de8 	.word	0x08007de8
 8001778:	08007dfc 	.word	0x08007dfc
 800177c:	08007e14 	.word	0x08007e14
 8001780:	08007e24 	.word	0x08007e24
 8001784:	08007e3c 	.word	0x08007e3c
 8001788:	20000350 	.word	0x20000350
 800178c:	08007e4c 	.word	0x08007e4c
				case 'R' << 24 | 'S' << 16 | 'M' << 8 | 'V':
					data_input[0] = 0x00;
 8001790:	4b7a      	ldr	r3, [pc, #488]	; (800197c <main+0x5dc>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
					data_input[1] = 0x40;
 8001796:	4b79      	ldr	r3, [pc, #484]	; (800197c <main+0x5dc>)
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, MaxChargeVoltageReg, data_input);
 800179c:	4a77      	ldr	r2, [pc, #476]	; (800197c <main+0x5dc>)
 800179e:	2104      	movs	r1, #4
 80017a0:	4877      	ldr	r0, [pc, #476]	; (8001980 <main+0x5e0>)
 80017a2:	f7ff fc32 	bl	800100a <setRegBQ25713>
					printlnString("RSMV");
 80017a6:	4877      	ldr	r0, [pc, #476]	; (8001984 <main+0x5e4>)
 80017a8:	f7ff fcee 	bl	8001188 <printlnString>
					break;
 80017ac:	e0cc      	b.n	8001948 <main+0x5a8>

				case 'I' << 24 | 'N' << 16 | 'T' << 8 | 0:
					BQ25713Config();
 80017ae:	f7ff fda3 	bl	80012f8 <BQ25713Config>
					printlnString("INT");
 80017b2:	4875      	ldr	r0, [pc, #468]	; (8001988 <main+0x5e8>)
 80017b4:	f7ff fce8 	bl	8001188 <printlnString>
					break;
 80017b8:	e0c6      	b.n	8001948 <main+0x5a8>
				case 'R' << 24 | 'S' << 16 | 'T' << 8 | 'V':
					data_input[0] = 0x30;
 80017ba:	4b70      	ldr	r3, [pc, #448]	; (800197c <main+0x5dc>)
 80017bc:	2230      	movs	r2, #48	; 0x30
 80017be:	701a      	strb	r2, [r3, #0]
					data_input[1] = 0x20;
 80017c0:	4b6e      	ldr	r3, [pc, #440]	; (800197c <main+0x5dc>)
 80017c2:	2220      	movs	r2, #32
 80017c4:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeOption3Reg, data_input);
 80017c6:	4a6d      	ldr	r2, [pc, #436]	; (800197c <main+0x5dc>)
 80017c8:	2134      	movs	r1, #52	; 0x34
 80017ca:	486d      	ldr	r0, [pc, #436]	; (8001980 <main+0x5e0>)
 80017cc:	f7ff fc1d 	bl	800100a <setRegBQ25713>
					printlnString("RSTV");
 80017d0:	486e      	ldr	r0, [pc, #440]	; (800198c <main+0x5ec>)
 80017d2:	f7ff fcd9 	bl	8001188 <printlnString>
					break;
 80017d6:	e0b7      	b.n	8001948 <main+0x5a8>
				case 'R' << 24 | 'S' << 16 | 'T' << 8 | 'P':
					data_input[0] = 0x00;
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <main+0x5dc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
					data_input[1] = 0x20;
 80017de:	4b67      	ldr	r3, [pc, #412]	; (800197c <main+0x5dc>)
 80017e0:	2220      	movs	r2, #32
 80017e2:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ProchotStatusReg, data_input);
 80017e4:	4a65      	ldr	r2, [pc, #404]	; (800197c <main+0x5dc>)
 80017e6:	2122      	movs	r1, #34	; 0x22
 80017e8:	4865      	ldr	r0, [pc, #404]	; (8001980 <main+0x5e0>)
 80017ea:	f7ff fc0e 	bl	800100a <setRegBQ25713>
					printlnString("RSTP");
 80017ee:	4868      	ldr	r0, [pc, #416]	; (8001990 <main+0x5f0>)
 80017f0:	f7ff fcca 	bl	8001188 <printlnString>
					break;
 80017f4:	e0a8      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '0':

					current[0] = 0x00;
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <main+0x5f4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
					current[1] = 0x00;
 80017fc:	4b65      	ldr	r3, [pc, #404]	; (8001994 <main+0x5f4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 8001802:	4a64      	ldr	r2, [pc, #400]	; (8001994 <main+0x5f4>)
 8001804:	2102      	movs	r1, #2
 8001806:	485e      	ldr	r0, [pc, #376]	; (8001980 <main+0x5e0>)
 8001808:	f7ff fbff 	bl	800100a <setRegBQ25713>
					printlnString("CUR=0: OK");
 800180c:	4862      	ldr	r0, [pc, #392]	; (8001998 <main+0x5f8>)
 800180e:	f7ff fcbb 	bl	8001188 <printlnString>
					break;
 8001812:	e099      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '1':

					current[0] = 0x40;
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <main+0x5f4>)
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	701a      	strb	r2, [r3, #0]
					current[1] = 0x00;
 800181a:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <main+0x5f4>)
 800181c:	2200      	movs	r2, #0
 800181e:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 8001820:	4a5c      	ldr	r2, [pc, #368]	; (8001994 <main+0x5f4>)
 8001822:	2102      	movs	r1, #2
 8001824:	4856      	ldr	r0, [pc, #344]	; (8001980 <main+0x5e0>)
 8001826:	f7ff fbf0 	bl	800100a <setRegBQ25713>
					printlnString("CUR=1: OK");
 800182a:	485c      	ldr	r0, [pc, #368]	; (800199c <main+0x5fc>)
 800182c:	f7ff fcac 	bl	8001188 <printlnString>
					break;
 8001830:	e08a      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '2':

					current[0] = 0x80;
 8001832:	4b58      	ldr	r3, [pc, #352]	; (8001994 <main+0x5f4>)
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	701a      	strb	r2, [r3, #0]
					current[1] = 0x00;
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <main+0x5f4>)
 800183a:	2200      	movs	r2, #0
 800183c:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 800183e:	4a55      	ldr	r2, [pc, #340]	; (8001994 <main+0x5f4>)
 8001840:	2102      	movs	r1, #2
 8001842:	484f      	ldr	r0, [pc, #316]	; (8001980 <main+0x5e0>)
 8001844:	f7ff fbe1 	bl	800100a <setRegBQ25713>
					printlnString("CUR=2: OK");
 8001848:	4855      	ldr	r0, [pc, #340]	; (80019a0 <main+0x600>)
 800184a:	f7ff fc9d 	bl	8001188 <printlnString>
					break;
 800184e:	e07b      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '3':

					current[0] = 0x00;
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <main+0x5f4>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
					current[1] = 0x01;
 8001856:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <main+0x5f4>)
 8001858:	2201      	movs	r2, #1
 800185a:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <main+0x5f4>)
 800185e:	2102      	movs	r1, #2
 8001860:	4847      	ldr	r0, [pc, #284]	; (8001980 <main+0x5e0>)
 8001862:	f7ff fbd2 	bl	800100a <setRegBQ25713>
					printlnString("CUR=3: OK");
 8001866:	484f      	ldr	r0, [pc, #316]	; (80019a4 <main+0x604>)
 8001868:	f7ff fc8e 	bl	8001188 <printlnString>
					break;
 800186c:	e06c      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '4':

					current[0] = 0x00;
 800186e:	4b49      	ldr	r3, [pc, #292]	; (8001994 <main+0x5f4>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
					current[1] = 0x02;
 8001874:	4b47      	ldr	r3, [pc, #284]	; (8001994 <main+0x5f4>)
 8001876:	2202      	movs	r2, #2
 8001878:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 800187a:	4a46      	ldr	r2, [pc, #280]	; (8001994 <main+0x5f4>)
 800187c:	2102      	movs	r1, #2
 800187e:	4840      	ldr	r0, [pc, #256]	; (8001980 <main+0x5e0>)
 8001880:	f7ff fbc3 	bl	800100a <setRegBQ25713>
					printlnString("CUR=4: OK");
 8001884:	4848      	ldr	r0, [pc, #288]	; (80019a8 <main+0x608>)
 8001886:	f7ff fc7f 	bl	8001188 <printlnString>
					break;
 800188a:	e05d      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '5':

					current[0] = 0x00;
 800188c:	4b41      	ldr	r3, [pc, #260]	; (8001994 <main+0x5f4>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
					current[1] = 0x04;
 8001892:	4b40      	ldr	r3, [pc, #256]	; (8001994 <main+0x5f4>)
 8001894:	2204      	movs	r2, #4
 8001896:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 8001898:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <main+0x5f4>)
 800189a:	2102      	movs	r1, #2
 800189c:	4838      	ldr	r0, [pc, #224]	; (8001980 <main+0x5e0>)
 800189e:	f7ff fbb4 	bl	800100a <setRegBQ25713>
					printlnString("CUR=5: OK");
 80018a2:	4842      	ldr	r0, [pc, #264]	; (80019ac <main+0x60c>)
 80018a4:	f7ff fc70 	bl	8001188 <printlnString>
					break;
 80018a8:	e04e      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '6':

					current[0] = 0x00;
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <main+0x5f4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
					current[1] = 0x08;
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <main+0x5f4>)
 80018b2:	2208      	movs	r2, #8
 80018b4:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 80018b6:	4a37      	ldr	r2, [pc, #220]	; (8001994 <main+0x5f4>)
 80018b8:	2102      	movs	r1, #2
 80018ba:	4831      	ldr	r0, [pc, #196]	; (8001980 <main+0x5e0>)
 80018bc:	f7ff fba5 	bl	800100a <setRegBQ25713>
					printlnString("CUR=6: OK");
 80018c0:	483b      	ldr	r0, [pc, #236]	; (80019b0 <main+0x610>)
 80018c2:	f7ff fc61 	bl	8001188 <printlnString>
					break;
 80018c6:	e03f      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '7':

					current[0] = 0x00;
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <main+0x5f4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
					current[1] = 0x10;
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <main+0x5f4>)
 80018d0:	2210      	movs	r2, #16
 80018d2:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 80018d4:	4a2f      	ldr	r2, [pc, #188]	; (8001994 <main+0x5f4>)
 80018d6:	2102      	movs	r1, #2
 80018d8:	4829      	ldr	r0, [pc, #164]	; (8001980 <main+0x5e0>)
 80018da:	f7ff fb96 	bl	800100a <setRegBQ25713>
					printlnString("CUR=7: OK");
 80018de:	4835      	ldr	r0, [pc, #212]	; (80019b4 <main+0x614>)
 80018e0:	f7ff fc52 	bl	8001188 <printlnString>
					break;
 80018e4:	e030      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '8':

					current[0] = 0x00;
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <main+0x5f4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
					current[1] = 0x18;
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <main+0x5f4>)
 80018ee:	2218      	movs	r2, #24
 80018f0:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 80018f2:	4a28      	ldr	r2, [pc, #160]	; (8001994 <main+0x5f4>)
 80018f4:	2102      	movs	r1, #2
 80018f6:	4822      	ldr	r0, [pc, #136]	; (8001980 <main+0x5e0>)
 80018f8:	f7ff fb87 	bl	800100a <setRegBQ25713>
					printlnString("CUR=8: OK");
 80018fc:	482e      	ldr	r0, [pc, #184]	; (80019b8 <main+0x618>)
 80018fe:	f7ff fc43 	bl	8001188 <printlnString>
					break;
 8001902:	e021      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | '9':

					current[0] = 0x00;
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <main+0x5f4>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
					current[1] = 0x1C;
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <main+0x5f4>)
 800190c:	221c      	movs	r2, #28
 800190e:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 8001910:	4a20      	ldr	r2, [pc, #128]	; (8001994 <main+0x5f4>)
 8001912:	2102      	movs	r1, #2
 8001914:	481a      	ldr	r0, [pc, #104]	; (8001980 <main+0x5e0>)
 8001916:	f7ff fb78 	bl	800100a <setRegBQ25713>
					printlnString("CUR=9: OK");
 800191a:	4828      	ldr	r0, [pc, #160]	; (80019bc <main+0x61c>)
 800191c:	f7ff fc34 	bl	8001188 <printlnString>
					break;
 8001920:	e012      	b.n	8001948 <main+0x5a8>
				case 'C' << 24 | 'U' << 16 | 'R' << 8 | 'A':

					current[0] = 0xC0;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <main+0x5f4>)
 8001924:	22c0      	movs	r2, #192	; 0xc0
 8001926:	701a      	strb	r2, [r3, #0]
					current[1] = 0x1F;
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <main+0x5f4>)
 800192a:	221f      	movs	r2, #31
 800192c:	705a      	strb	r2, [r3, #1]
					setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 800192e:	4a19      	ldr	r2, [pc, #100]	; (8001994 <main+0x5f4>)
 8001930:	2102      	movs	r1, #2
 8001932:	4813      	ldr	r0, [pc, #76]	; (8001980 <main+0x5e0>)
 8001934:	f7ff fb69 	bl	800100a <setRegBQ25713>
					printlnString("CUR=A: OK");
 8001938:	4821      	ldr	r0, [pc, #132]	; (80019c0 <main+0x620>)
 800193a:	f7ff fc25 	bl	8001188 <printlnString>
					break;
 800193e:	e003      	b.n	8001948 <main+0x5a8>

				default:
					printAT_Comand_Error(AT_WRONG_COMMAND);
 8001940:	2002      	movs	r0, #2
 8001942:	f7ff fc3b 	bl	80011bc <printAT_Comand_Error>
					break;
 8001946:	bf00      	nop
				switch (stringToInt(rxBuffer)) {
 8001948:	e002      	b.n	8001950 <main+0x5b0>
				}

			} else
				printAT_Comand_Error(AT_WRONG_COMMAND);
 800194a:	2002      	movs	r0, #2
 800194c:	f7ff fc36 	bl	80011bc <printAT_Comand_Error>

			for (int var = 0; var < RxBufferLength; var++) {
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	e007      	b.n	8001966 <main+0x5c6>
				rxBuffer[var] = 0;
 8001956:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <main+0x624>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
			for (int var = 0; var < RxBufferLength; var++) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b17      	cmp	r3, #23
 800196a:	ddf4      	ble.n	8001956 <main+0x5b6>
			}
			RGBTurnOff();
 800196c:	f7ff fb66 	bl	800103c <RGBTurnOff>
		}
		setRegBQ25713(&hi2c1, ChargeCurrentReg, current);
 8001970:	4a08      	ldr	r2, [pc, #32]	; (8001994 <main+0x5f4>)
 8001972:	2102      	movs	r1, #2
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <main+0x5e0>)
 8001976:	f7ff fb48 	bl	800100a <setRegBQ25713>
		RGBTurnRED();
 800197a:	e52f      	b.n	80013dc <main+0x3c>
 800197c:	20000350 	.word	0x20000350
 8001980:	20000204 	.word	0x20000204
 8001984:	08007e54 	.word	0x08007e54
 8001988:	08007e5c 	.word	0x08007e5c
 800198c:	08007e60 	.word	0x08007e60
 8001990:	08007e68 	.word	0x08007e68
 8001994:	20000334 	.word	0x20000334
 8001998:	08007e70 	.word	0x08007e70
 800199c:	08007e7c 	.word	0x08007e7c
 80019a0:	08007e88 	.word	0x08007e88
 80019a4:	08007e94 	.word	0x08007e94
 80019a8:	08007ea0 	.word	0x08007ea0
 80019ac:	08007eac 	.word	0x08007eac
 80019b0:	08007eb8 	.word	0x08007eb8
 80019b4:	08007ec4 	.word	0x08007ec4
 80019b8:	08007ed0 	.word	0x08007ed0
 80019bc:	08007edc 	.word	0x08007edc
 80019c0:	08007ee8 	.word	0x08007ee8
 80019c4:	20000338 	.word	0x20000338

080019c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b090      	sub	sp, #64	; 0x40
 80019cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019ce:	f107 0318 	add.w	r3, r7, #24
 80019d2:	2228      	movs	r2, #40	; 0x28
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fa8e 	bl	8004ef8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ee:	2301      	movs	r3, #1
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f2:	2310      	movs	r3, #16
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019fa:	f107 0318 	add.w	r3, r7, #24
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 f8e6 	bl	8003bd0 <HAL_RCC_OscConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0x46>
		Error_Handler();
 8001a0a:	f000 f90d 	bl	8001c28 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a0e:	230f      	movs	r3, #15
 8001a10:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fb52 	bl	80040d0 <HAL_RCC_ClockConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0x6e>
		Error_Handler();
 8001a32:	f000 f8f9 	bl	8001c28 <Error_Handler>
	}
}
 8001a36:	bf00      	nop
 8001a38:	3740      	adds	r7, #64	; 0x40
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a46:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <MX_I2C1_Init+0x54>)
 8001a48:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a4c:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_I2C1_Init+0x58>)
 8001a4e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a7e:	f001 f8a7 	bl	8002bd0 <HAL_I2C_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001a88:	f000 f8ce 	bl	8001c28 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000204 	.word	0x20000204
 8001a94:	40005400 	.word	0x40005400
 8001a98:	000186a0 	.word	0x000186a0

08001a9c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_I2C2_Init+0x50>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <MX_I2C2_Init+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_I2C2_Init+0x50>)
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <MX_I2C2_Init+0x58>)
 8001aaa:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_I2C2_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_I2C2_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_I2C2_Init+0x50>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <MX_I2C2_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_I2C2_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MX_I2C2_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_I2C2_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <MX_I2C2_Init+0x50>)
 8001ada:	f001 f879 	bl	8002bd0 <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001ae4:	f000 f8a0 	bl	8001c28 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000258 	.word	0x20000258
 8001af0:	40005800 	.word	0x40005800
 8001af4:	000186a0 	.word	0x000186a0

08001af8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_USART1_UART_Init+0x50>)
 8001b00:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART1_UART_Init+0x4c>)
 8001b30:	f002 fc3c 	bl	80043ac <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001b3a:	f000 f875 	bl	8001c28 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200002f4 	.word	0x200002f4
 8001b48:	40013800 	.word	0x40013800

08001b4c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_DMA_Init+0x38>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <MX_DMA_Init+0x38>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6153      	str	r3, [r2, #20]
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_DMA_Init+0x38>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	200f      	movs	r0, #15
 8001b70:	f000 fbf7 	bl	8002362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b74:	200f      	movs	r0, #15
 8001b76:	f000 fc10 	bl	800239a <HAL_NVIC_EnableIRQ>

}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000

08001b88 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <MX_GPIO_Init+0x98>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <MX_GPIO_Init+0x98>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <MX_GPIO_Init+0x98>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_GPIO_Init+0x98>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <MX_GPIO_Init+0x98>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_GPIO_Init+0x98>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_GPIO_Init+0x98>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <MX_GPIO_Init+0x98>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_GPIO_Init+0x98>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001be4:	2201      	movs	r2, #1
 8001be6:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001bea:	480e      	ldr	r0, [pc, #56]	; (8001c24 <MX_GPIO_Init+0x9c>)
 8001bec:	f000 ffd8 	bl	8002ba0 <HAL_GPIO_WritePin>
	CELL_BATPRESZ_Pin | Blue_LED_Pin | Green_LED_Pin | Red_LED_Pin,
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_VAP_GPIO_Port, OTG_VAP_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <MX_GPIO_Init+0x9c>)
 8001bf6:	f000 ffd3 	bl	8002ba0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CELL_BATPRESZ_Pin OTG_VAP_Pin Blue_LED_Pin Green_LED_Pin
	 Red_LED_Pin */
	GPIO_InitStruct.Pin = CELL_BATPRESZ_Pin | OTG_VAP_Pin | Blue_LED_Pin
 8001bfa:	f240 13c3 	movw	r3, #451	; 0x1c3
 8001bfe:	613b      	str	r3, [r7, #16]
			| Green_LED_Pin | Red_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MX_GPIO_Init+0x9c>)
 8001c14:	f000 fe40 	bl	8002898 <HAL_GPIO_Init>

}
 8001c18:	bf00      	nop
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40011000 	.word	0x40011000

08001c28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c30:	e7fe      	b.n	8001c30 <Error_Handler+0x8>
	...

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6193      	str	r3, [r2, #24]
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_MspInit+0x5c>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_MspInit+0x60>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_MspInit+0x60>)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000

08001c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2b      	ldr	r2, [pc, #172]	; (8001d60 <HAL_I2C_MspInit+0xc8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d124      	bne.n	8001d02 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001cbe:	f043 0308 	orr.w	r3, r3, #8
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd0:	23c0      	movs	r3, #192	; 0xc0
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4821      	ldr	r0, [pc, #132]	; (8001d68 <HAL_I2C_MspInit+0xd0>)
 8001ce4:	f000 fdd8 	bl	8002898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d00:	e029      	b.n	8001d56 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_I2C_MspInit+0xd4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d124      	bne.n	8001d56 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2a:	2312      	movs	r3, #18
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0318 	add.w	r3, r7, #24
 8001d36:	4619      	mov	r1, r3
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <HAL_I2C_MspInit+0xd0>)
 8001d3a:	f000 fdad 	bl	8002898 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001d44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_I2C_MspInit+0xcc>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40005400 	.word	0x40005400
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010c00 	.word	0x40010c00
 8001d6c:	40005800 	.word	0x40005800

08001d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a33      	ldr	r2, [pc, #204]	; (8001e58 <HAL_UART_MspInit+0xe8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d15f      	bne.n	8001e50 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_UART_MspInit+0xec>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a31      	ldr	r2, [pc, #196]	; (8001e5c <HAL_UART_MspInit+0xec>)
 8001d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_UART_MspInit+0xec>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_UART_MspInit+0xec>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <HAL_UART_MspInit+0xec>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_UART_MspInit+0xec>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4822      	ldr	r0, [pc, #136]	; (8001e60 <HAL_UART_MspInit+0xf0>)
 8001dd6:	f000 fd5f 	bl	8002898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4619      	mov	r1, r3
 8001dee:	481c      	ldr	r0, [pc, #112]	; (8001e60 <HAL_UART_MspInit+0xf0>)
 8001df0:	f000 fd52 	bl	8002898 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001df6:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <HAL_UART_MspInit+0xf8>)
 8001df8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_DISABLE;
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e24:	480f      	ldr	r0, [pc, #60]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001e26:	f000 fad3 	bl	80023d0 <HAL_DMA_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001e30:	f7ff fefa 	bl	8001c28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <HAL_UART_MspInit+0xf4>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	2025      	movs	r0, #37	; 0x25
 8001e46:	f000 fa8c 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e4a:	2025      	movs	r0, #37	; 0x25
 8001e4c:	f000 faa5 	bl	800239a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010800 	.word	0x40010800
 8001e64:	200002b0 	.word	0x200002b0
 8001e68:	40020058 	.word	0x40020058

08001e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <NMI_Handler+0x4>

08001e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <MemManage_Handler+0x4>

08001e7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb2:	f000 f93f 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <DMA1_Channel5_IRQHandler+0x10>)
 8001ec2:	f000 fbb5 	bl	8002630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200002b0 	.word	0x200002b0

08001ed0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <USART1_IRQHandler+0x10>)
 8001ed6:	f002 fbc9 	bl	800466c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200002f4 	.word	0x200002f4

08001ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <_kill>:

int _kill(int pid, int sig)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001efc:	f002 ffb8 	bl	8004e70 <__errno>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2216      	movs	r2, #22
 8001f04:	601a      	str	r2, [r3, #0]
	return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_exit>:

void _exit (int status)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffe7 	bl	8001ef2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f24:	e7fe      	b.n	8001f24 <_exit+0x12>

08001f26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e00a      	b.n	8001f4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f38:	f3af 8000 	nop.w
 8001f3c:	4601      	mov	r1, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	60ba      	str	r2, [r7, #8]
 8001f44:	b2ca      	uxtb	r2, r1
 8001f46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbf0      	blt.n	8001f38 <_read+0x12>
	}

return len;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e009      	b.n	8001f86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	60ba      	str	r2, [r7, #8]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbf1      	blt.n	8001f72 <_write+0x12>
	}
	return len;
 8001f8e:	687b      	ldr	r3, [r7, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_close>:

int _close(int file)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <_isatty>:

int _isatty(int file)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	return 1;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
	return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f002 ff22 	bl	8004e70 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20002000 	.word	0x20002000
 8002058:	00000400 	.word	0x00000400
 800205c:	200001f8 	.word	0x200001f8
 8002060:	20000368 	.word	0x20000368

08002064 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002070:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002072:	e003      	b.n	800207c <LoopCopyDataInit>

08002074 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002076:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002078:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800207a:	3104      	adds	r1, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800207c:	480a      	ldr	r0, [pc, #40]	; (80020a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002080:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002082:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002084:	d3f6      	bcc.n	8002074 <CopyDataInit>
  ldr r2, =_sbss
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002088:	e002      	b.n	8002090 <LoopFillZerobss>

0800208a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800208c:	f842 3b04 	str.w	r3, [r2], #4

08002090 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002092:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002094:	d3f9      	bcc.n	800208a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002096:	f7ff ffe5 	bl	8002064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209a:	f002 feef 	bl	8004e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800209e:	f7ff f97f 	bl	80013a0 <main>
  bx lr
 80020a2:	4770      	bx	lr
  ldr r3, =_sidata
 80020a4:	08008314 	.word	0x08008314
  ldr r0, =_sdata
 80020a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80020b0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80020b4:	20000368 	.word	0x20000368

080020b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC1_IRQHandler>

080020ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020be:	2003      	movs	r0, #3
 80020c0:	f000 f944 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 f805 	bl	80020d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ca:	f7ff fdb3 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x54>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_InitTick+0x58>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f95f 	bl	80023b6 <HAL_SYSTICK_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00e      	b.n	8002120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0f      	cmp	r3, #15
 8002106:	d80a      	bhi.n	800211e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f000 f927 	bl	8002362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002114:	4a06      	ldr	r2, [pc, #24]	; (8002130 <HAL_InitTick+0x5c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000000 	.word	0x20000000
 800212c:	20000008 	.word	0x20000008
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_IncTick+0x1c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_IncTick+0x20>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_IncTick+0x20>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	20000008 	.word	0x20000008
 8002154:	20000354 	.word	0x20000354

08002158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <HAL_GetTick+0x10>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	20000354 	.word	0x20000354

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff fff0 	bl	8002158 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffe0 	bl	8002158 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4906      	ldr	r1, [pc, #24]	; (800224c <__NVIC_EnableIRQ+0x34>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	; (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	; (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff90 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff2d 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002374:	f7ff ff42 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff90 	bl	80022a4 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5f 	bl	8002250 <__NVIC_SetPriority>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff35 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffa2 	bl	8002308 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e043      	b.n	800246e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_DMA_Init+0xa8>)
 80023ee:	4413      	add	r3, r2
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_DMA_Init+0xac>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	009a      	lsls	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_DMA_Init+0xb0>)
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800241a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800241e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	bffdfff8 	.word	0xbffdfff8
 800247c:	cccccccd 	.word	0xcccccccd
 8002480:	40020000 	.word	0x40020000

08002484 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_DMA_Start_IT+0x20>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e04a      	b.n	800253a <HAL_DMA_Start_IT+0xb6>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d13a      	bne.n	800252c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f9ae 	bl	800283c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 020e 	orr.w	r2, r2, #14
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e00f      	b.n	800251a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0204 	bic.w	r2, r2, #4
 8002508:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 020a 	orr.w	r2, r2, #10
 8002518:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e005      	b.n	8002538 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002534:	2302      	movs	r3, #2
 8002536:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002538:	7dfb      	ldrb	r3, [r7, #23]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002556:	2b02      	cmp	r3, #2
 8002558:	d005      	beq.n	8002566 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2204      	movs	r2, #4
 800255e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e051      	b.n	800260a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 020e 	bic.w	r2, r2, #14
 8002574:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a22      	ldr	r2, [pc, #136]	; (8002614 <HAL_DMA_Abort_IT+0xd0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d029      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xa0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a20      	ldr	r2, [pc, #128]	; (8002618 <HAL_DMA_Abort_IT+0xd4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d022      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x9c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_DMA_Abort_IT+0xd8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d01a      	beq.n	80025da <HAL_DMA_Abort_IT+0x96>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_DMA_Abort_IT+0xdc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d012      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x90>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_DMA_Abort_IT+0xe0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00a      	beq.n	80025ce <HAL_DMA_Abort_IT+0x8a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <HAL_DMA_Abort_IT+0xe4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d102      	bne.n	80025c8 <HAL_DMA_Abort_IT+0x84>
 80025c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025c6:	e00e      	b.n	80025e6 <HAL_DMA_Abort_IT+0xa2>
 80025c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025cc:	e00b      	b.n	80025e6 <HAL_DMA_Abort_IT+0xa2>
 80025ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d2:	e008      	b.n	80025e6 <HAL_DMA_Abort_IT+0xa2>
 80025d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d8:	e005      	b.n	80025e6 <HAL_DMA_Abort_IT+0xa2>
 80025da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025de:	e002      	b.n	80025e6 <HAL_DMA_Abort_IT+0xa2>
 80025e0:	2310      	movs	r3, #16
 80025e2:	e000      	b.n	80025e6 <HAL_DMA_Abort_IT+0xa2>
 80025e4:	2301      	movs	r3, #1
 80025e6:	4a11      	ldr	r2, [pc, #68]	; (800262c <HAL_DMA_Abort_IT+0xe8>)
 80025e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
    } 
  }
  return status;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40020008 	.word	0x40020008
 8002618:	4002001c 	.word	0x4002001c
 800261c:	40020030 	.word	0x40020030
 8002620:	40020044 	.word	0x40020044
 8002624:	40020058 	.word	0x40020058
 8002628:	4002006c 	.word	0x4002006c
 800262c:	40020000 	.word	0x40020000

08002630 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	2204      	movs	r2, #4
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d04f      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xc8>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d04a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0204 	bic.w	r2, r2, #4
 800267e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a66      	ldr	r2, [pc, #408]	; (8002820 <HAL_DMA_IRQHandler+0x1f0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d029      	beq.n	80026de <HAL_DMA_IRQHandler+0xae>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a65      	ldr	r2, [pc, #404]	; (8002824 <HAL_DMA_IRQHandler+0x1f4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d022      	beq.n	80026da <HAL_DMA_IRQHandler+0xaa>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a63      	ldr	r2, [pc, #396]	; (8002828 <HAL_DMA_IRQHandler+0x1f8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01a      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xa4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a62      	ldr	r2, [pc, #392]	; (800282c <HAL_DMA_IRQHandler+0x1fc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d012      	beq.n	80026ce <HAL_DMA_IRQHandler+0x9e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a60      	ldr	r2, [pc, #384]	; (8002830 <HAL_DMA_IRQHandler+0x200>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00a      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x98>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a5f      	ldr	r2, [pc, #380]	; (8002834 <HAL_DMA_IRQHandler+0x204>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d102      	bne.n	80026c2 <HAL_DMA_IRQHandler+0x92>
 80026bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026c0:	e00e      	b.n	80026e0 <HAL_DMA_IRQHandler+0xb0>
 80026c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026c6:	e00b      	b.n	80026e0 <HAL_DMA_IRQHandler+0xb0>
 80026c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026cc:	e008      	b.n	80026e0 <HAL_DMA_IRQHandler+0xb0>
 80026ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026d2:	e005      	b.n	80026e0 <HAL_DMA_IRQHandler+0xb0>
 80026d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d8:	e002      	b.n	80026e0 <HAL_DMA_IRQHandler+0xb0>
 80026da:	2340      	movs	r3, #64	; 0x40
 80026dc:	e000      	b.n	80026e0 <HAL_DMA_IRQHandler+0xb0>
 80026de:	2304      	movs	r3, #4
 80026e0:	4a55      	ldr	r2, [pc, #340]	; (8002838 <HAL_DMA_IRQHandler+0x208>)
 80026e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8094 	beq.w	8002816 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026f6:	e08e      	b.n	8002816 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2202      	movs	r2, #2
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d056      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x186>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d051      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 020a 	bic.w	r2, r2, #10
 800272e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a38      	ldr	r2, [pc, #224]	; (8002820 <HAL_DMA_IRQHandler+0x1f0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d029      	beq.n	8002796 <HAL_DMA_IRQHandler+0x166>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a37      	ldr	r2, [pc, #220]	; (8002824 <HAL_DMA_IRQHandler+0x1f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_IRQHandler+0x162>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a35      	ldr	r2, [pc, #212]	; (8002828 <HAL_DMA_IRQHandler+0x1f8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01a      	beq.n	800278c <HAL_DMA_IRQHandler+0x15c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a34      	ldr	r2, [pc, #208]	; (800282c <HAL_DMA_IRQHandler+0x1fc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d012      	beq.n	8002786 <HAL_DMA_IRQHandler+0x156>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a32      	ldr	r2, [pc, #200]	; (8002830 <HAL_DMA_IRQHandler+0x200>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00a      	beq.n	8002780 <HAL_DMA_IRQHandler+0x150>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a31      	ldr	r2, [pc, #196]	; (8002834 <HAL_DMA_IRQHandler+0x204>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d102      	bne.n	800277a <HAL_DMA_IRQHandler+0x14a>
 8002774:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002778:	e00e      	b.n	8002798 <HAL_DMA_IRQHandler+0x168>
 800277a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277e:	e00b      	b.n	8002798 <HAL_DMA_IRQHandler+0x168>
 8002780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002784:	e008      	b.n	8002798 <HAL_DMA_IRQHandler+0x168>
 8002786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800278a:	e005      	b.n	8002798 <HAL_DMA_IRQHandler+0x168>
 800278c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002790:	e002      	b.n	8002798 <HAL_DMA_IRQHandler+0x168>
 8002792:	2320      	movs	r3, #32
 8002794:	e000      	b.n	8002798 <HAL_DMA_IRQHandler+0x168>
 8002796:	2302      	movs	r3, #2
 8002798:	4a27      	ldr	r2, [pc, #156]	; (8002838 <HAL_DMA_IRQHandler+0x208>)
 800279a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d034      	beq.n	8002816 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027b4:	e02f      	b.n	8002816 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2208      	movs	r2, #8
 80027bc:	409a      	lsls	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d028      	beq.n	8002818 <HAL_DMA_IRQHandler+0x1e8>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d023      	beq.n	8002818 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 020e 	bic.w	r2, r2, #14
 80027de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
    }
  }
  return;
 8002816:	bf00      	nop
 8002818:	bf00      	nop
}
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40020008 	.word	0x40020008
 8002824:	4002001c 	.word	0x4002001c
 8002828:	40020030 	.word	0x40020030
 800282c:	40020044 	.word	0x40020044
 8002830:	40020058 	.word	0x40020058
 8002834:	4002006c 	.word	0x4002006c
 8002838:	40020000 	.word	0x40020000

0800283c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b10      	cmp	r3, #16
 8002868:	d108      	bne.n	800287c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800287a:	e007      	b.n	800288c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
	...

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b08b      	sub	sp, #44	; 0x2c
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028aa:	e169      	b.n	8002b80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028ac:	2201      	movs	r2, #1
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f040 8158 	bne.w	8002b7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a9a      	ldr	r2, [pc, #616]	; (8002b38 <HAL_GPIO_Init+0x2a0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d05e      	beq.n	8002992 <HAL_GPIO_Init+0xfa>
 80028d4:	4a98      	ldr	r2, [pc, #608]	; (8002b38 <HAL_GPIO_Init+0x2a0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d875      	bhi.n	80029c6 <HAL_GPIO_Init+0x12e>
 80028da:	4a98      	ldr	r2, [pc, #608]	; (8002b3c <HAL_GPIO_Init+0x2a4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d058      	beq.n	8002992 <HAL_GPIO_Init+0xfa>
 80028e0:	4a96      	ldr	r2, [pc, #600]	; (8002b3c <HAL_GPIO_Init+0x2a4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d86f      	bhi.n	80029c6 <HAL_GPIO_Init+0x12e>
 80028e6:	4a96      	ldr	r2, [pc, #600]	; (8002b40 <HAL_GPIO_Init+0x2a8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d052      	beq.n	8002992 <HAL_GPIO_Init+0xfa>
 80028ec:	4a94      	ldr	r2, [pc, #592]	; (8002b40 <HAL_GPIO_Init+0x2a8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d869      	bhi.n	80029c6 <HAL_GPIO_Init+0x12e>
 80028f2:	4a94      	ldr	r2, [pc, #592]	; (8002b44 <HAL_GPIO_Init+0x2ac>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d04c      	beq.n	8002992 <HAL_GPIO_Init+0xfa>
 80028f8:	4a92      	ldr	r2, [pc, #584]	; (8002b44 <HAL_GPIO_Init+0x2ac>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d863      	bhi.n	80029c6 <HAL_GPIO_Init+0x12e>
 80028fe:	4a92      	ldr	r2, [pc, #584]	; (8002b48 <HAL_GPIO_Init+0x2b0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d046      	beq.n	8002992 <HAL_GPIO_Init+0xfa>
 8002904:	4a90      	ldr	r2, [pc, #576]	; (8002b48 <HAL_GPIO_Init+0x2b0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d85d      	bhi.n	80029c6 <HAL_GPIO_Init+0x12e>
 800290a:	2b12      	cmp	r3, #18
 800290c:	d82a      	bhi.n	8002964 <HAL_GPIO_Init+0xcc>
 800290e:	2b12      	cmp	r3, #18
 8002910:	d859      	bhi.n	80029c6 <HAL_GPIO_Init+0x12e>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <HAL_GPIO_Init+0x80>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	08002993 	.word	0x08002993
 800291c:	0800296d 	.word	0x0800296d
 8002920:	0800297f 	.word	0x0800297f
 8002924:	080029c1 	.word	0x080029c1
 8002928:	080029c7 	.word	0x080029c7
 800292c:	080029c7 	.word	0x080029c7
 8002930:	080029c7 	.word	0x080029c7
 8002934:	080029c7 	.word	0x080029c7
 8002938:	080029c7 	.word	0x080029c7
 800293c:	080029c7 	.word	0x080029c7
 8002940:	080029c7 	.word	0x080029c7
 8002944:	080029c7 	.word	0x080029c7
 8002948:	080029c7 	.word	0x080029c7
 800294c:	080029c7 	.word	0x080029c7
 8002950:	080029c7 	.word	0x080029c7
 8002954:	080029c7 	.word	0x080029c7
 8002958:	080029c7 	.word	0x080029c7
 800295c:	08002975 	.word	0x08002975
 8002960:	08002989 	.word	0x08002989
 8002964:	4a79      	ldr	r2, [pc, #484]	; (8002b4c <HAL_GPIO_Init+0x2b4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800296a:	e02c      	b.n	80029c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	623b      	str	r3, [r7, #32]
          break;
 8002972:	e029      	b.n	80029c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	3304      	adds	r3, #4
 800297a:	623b      	str	r3, [r7, #32]
          break;
 800297c:	e024      	b.n	80029c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	3308      	adds	r3, #8
 8002984:	623b      	str	r3, [r7, #32]
          break;
 8002986:	e01f      	b.n	80029c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	330c      	adds	r3, #12
 800298e:	623b      	str	r3, [r7, #32]
          break;
 8002990:	e01a      	b.n	80029c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800299a:	2304      	movs	r3, #4
 800299c:	623b      	str	r3, [r7, #32]
          break;
 800299e:	e013      	b.n	80029c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a8:	2308      	movs	r3, #8
 80029aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	611a      	str	r2, [r3, #16]
          break;
 80029b2:	e009      	b.n	80029c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b4:	2308      	movs	r3, #8
 80029b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	615a      	str	r2, [r3, #20]
          break;
 80029be:	e003      	b.n	80029c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
          break;
 80029c4:	e000      	b.n	80029c8 <HAL_GPIO_Init+0x130>
          break;
 80029c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2bff      	cmp	r3, #255	; 0xff
 80029cc:	d801      	bhi.n	80029d2 <HAL_GPIO_Init+0x13a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	e001      	b.n	80029d6 <HAL_GPIO_Init+0x13e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2bff      	cmp	r3, #255	; 0xff
 80029dc:	d802      	bhi.n	80029e4 <HAL_GPIO_Init+0x14c>
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	e002      	b.n	80029ea <HAL_GPIO_Init+0x152>
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	3b08      	subs	r3, #8
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	210f      	movs	r1, #15
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	401a      	ands	r2, r3
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	431a      	orrs	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80b1 	beq.w	8002b7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a18:	4b4d      	ldr	r3, [pc, #308]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a4c      	ldr	r2, [pc, #304]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6193      	str	r3, [r2, #24]
 8002a24:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_GPIO_Init+0x2b8>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a30:	4a48      	ldr	r2, [pc, #288]	; (8002b54 <HAL_GPIO_Init+0x2bc>)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	3302      	adds	r3, #2
 8002a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	220f      	movs	r2, #15
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4013      	ands	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a40      	ldr	r2, [pc, #256]	; (8002b58 <HAL_GPIO_Init+0x2c0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d013      	beq.n	8002a84 <HAL_GPIO_Init+0x1ec>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3f      	ldr	r2, [pc, #252]	; (8002b5c <HAL_GPIO_Init+0x2c4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00d      	beq.n	8002a80 <HAL_GPIO_Init+0x1e8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3e      	ldr	r2, [pc, #248]	; (8002b60 <HAL_GPIO_Init+0x2c8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d007      	beq.n	8002a7c <HAL_GPIO_Init+0x1e4>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3d      	ldr	r2, [pc, #244]	; (8002b64 <HAL_GPIO_Init+0x2cc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_GPIO_Init+0x1e0>
 8002a74:	2303      	movs	r3, #3
 8002a76:	e006      	b.n	8002a86 <HAL_GPIO_Init+0x1ee>
 8002a78:	2304      	movs	r3, #4
 8002a7a:	e004      	b.n	8002a86 <HAL_GPIO_Init+0x1ee>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e002      	b.n	8002a86 <HAL_GPIO_Init+0x1ee>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_GPIO_Init+0x1ee>
 8002a84:	2300      	movs	r3, #0
 8002a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a88:	f002 0203 	and.w	r2, r2, #3
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	4093      	lsls	r3, r2
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a96:	492f      	ldr	r1, [pc, #188]	; (8002b54 <HAL_GPIO_Init+0x2bc>)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	492c      	ldr	r1, [pc, #176]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	4928      	ldr	r1, [pc, #160]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d006      	beq.n	8002ae6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ad8:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4922      	ldr	r1, [pc, #136]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	491e      	ldr	r1, [pc, #120]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	4918      	ldr	r1, [pc, #96]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4914      	ldr	r1, [pc, #80]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d021      	beq.n	8002b6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	490e      	ldr	r1, [pc, #56]	; (8002b68 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60cb      	str	r3, [r1, #12]
 8002b34:	e021      	b.n	8002b7a <HAL_GPIO_Init+0x2e2>
 8002b36:	bf00      	nop
 8002b38:	10320000 	.word	0x10320000
 8002b3c:	10310000 	.word	0x10310000
 8002b40:	10220000 	.word	0x10220000
 8002b44:	10210000 	.word	0x10210000
 8002b48:	10120000 	.word	0x10120000
 8002b4c:	10110000 	.word	0x10110000
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40010800 	.word	0x40010800
 8002b5c:	40010c00 	.word	0x40010c00
 8002b60:	40011000 	.word	0x40011000
 8002b64:	40011400 	.word	0x40011400
 8002b68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	4909      	ldr	r1, [pc, #36]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f47f ae8e 	bne.w	80028ac <HAL_GPIO_Init+0x14>
  }
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	372c      	adds	r7, #44	; 0x2c
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	40010400 	.word	0x40010400

08002ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
 8002bac:	4613      	mov	r3, r2
 8002bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb0:	787b      	ldrb	r3, [r7, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bbc:	e003      	b.n	8002bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	041a      	lsls	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e12b      	b.n	8002e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff f84e 	bl	8001c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	; 0x24
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c34:	f001 fb74 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 8002c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a81      	ldr	r2, [pc, #516]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d807      	bhi.n	8002c54 <HAL_I2C_Init+0x84>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a80      	ldr	r2, [pc, #512]	; (8002e48 <HAL_I2C_Init+0x278>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	bf94      	ite	ls
 8002c4c:	2301      	movls	r3, #1
 8002c4e:	2300      	movhi	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e006      	b.n	8002c62 <HAL_I2C_Init+0x92>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a7d      	ldr	r2, [pc, #500]	; (8002e4c <HAL_I2C_Init+0x27c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	bf94      	ite	ls
 8002c5c:	2301      	movls	r3, #1
 8002c5e:	2300      	movhi	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0e7      	b.n	8002e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a78      	ldr	r2, [pc, #480]	; (8002e50 <HAL_I2C_Init+0x280>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0c9b      	lsrs	r3, r3, #18
 8002c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a6a      	ldr	r2, [pc, #424]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d802      	bhi.n	8002ca4 <HAL_I2C_Init+0xd4>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	e009      	b.n	8002cb8 <HAL_I2C_Init+0xe8>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	4a69      	ldr	r2, [pc, #420]	; (8002e54 <HAL_I2C_Init+0x284>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	495c      	ldr	r1, [pc, #368]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	d819      	bhi.n	8002d0c <HAL_I2C_Init+0x13c>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e59      	subs	r1, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cec:	400b      	ands	r3, r1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_I2C_Init+0x138>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e59      	subs	r1, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d06:	e051      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	e04f      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d111      	bne.n	8002d38 <HAL_I2C_Init+0x168>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e58      	subs	r0, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	440b      	add	r3, r1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e012      	b.n	8002d5e <HAL_I2C_Init+0x18e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Init+0x196>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e022      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10e      	bne.n	8002d8c <HAL_I2C_Init+0x1bc>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1e58      	subs	r0, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	440b      	add	r3, r1
 8002d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8a:	e00f      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1e58      	subs	r0, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	0099      	lsls	r1, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	6809      	ldr	r1, [r1, #0]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6911      	ldr	r1, [r2, #16]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	000186a0 	.word	0x000186a0
 8002e48:	001e847f 	.word	0x001e847f
 8002e4c:	003d08ff 	.word	0x003d08ff
 8002e50:	431bde83 	.word	0x431bde83
 8002e54:	10624dd3 	.word	0x10624dd3

08002e58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	817b      	strh	r3, [r7, #10]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	813b      	strh	r3, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e72:	f7ff f971 	bl	8002158 <HAL_GetTick>
 8002e76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	f040 80d9 	bne.w	8003038 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2319      	movs	r3, #25
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	496d      	ldr	r1, [pc, #436]	; (8003044 <HAL_I2C_Mem_Write+0x1ec>)
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fcc1 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e0cc      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_I2C_Mem_Write+0x56>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0c5      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d007      	beq.n	8002ed4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2221      	movs	r2, #33	; 0x21
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a4d      	ldr	r2, [pc, #308]	; (8003048 <HAL_I2C_Mem_Write+0x1f0>)
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f16:	88f8      	ldrh	r0, [r7, #6]
 8002f18:	893a      	ldrh	r2, [r7, #8]
 8002f1a:	8979      	ldrh	r1, [r7, #10]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	4603      	mov	r3, r0
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 faf8 	bl	800351c <I2C_RequestMemoryWrite>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d052      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e081      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fd42 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d107      	bne.n	8002f5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06b      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_I2C_Mem_Write+0x180>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d017      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1aa      	bne.n	8002f36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fd2e 	bl	8003a46 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d107      	bne.n	8003008 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003006:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e016      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e000      	b.n	800303a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	00100002 	.word	0x00100002
 8003048:	ffff0000 	.word	0xffff0000

0800304c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	4608      	mov	r0, r1
 8003056:	4611      	mov	r1, r2
 8003058:	461a      	mov	r2, r3
 800305a:	4603      	mov	r3, r0
 800305c:	817b      	strh	r3, [r7, #10]
 800305e:	460b      	mov	r3, r1
 8003060:	813b      	strh	r3, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800306a:	f7ff f875 	bl	8002158 <HAL_GetTick>
 800306e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b20      	cmp	r3, #32
 800307a:	f040 8244 	bne.w	8003506 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2319      	movs	r3, #25
 8003084:	2201      	movs	r2, #1
 8003086:	4982      	ldr	r1, [pc, #520]	; (8003290 <HAL_I2C_Mem_Read+0x244>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fbc5 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
 8003096:	e237      	b.n	8003508 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_I2C_Mem_Read+0x5a>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e230      	b.n	8003508 <HAL_I2C_Mem_Read+0x4bc>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d007      	beq.n	80030cc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2222      	movs	r2, #34	; 0x22
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2240      	movs	r2, #64	; 0x40
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a62      	ldr	r2, [pc, #392]	; (8003294 <HAL_I2C_Mem_Read+0x248>)
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800310e:	88f8      	ldrh	r0, [r7, #6]
 8003110:	893a      	ldrh	r2, [r7, #8]
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	4603      	mov	r3, r0
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fa92 	bl	8003648 <I2C_RequestMemoryRead>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e1ec      	b.n	8003508 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d113      	bne.n	800315e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e1c0      	b.n	80034e0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	2b01      	cmp	r3, #1
 8003164:	d11e      	bne.n	80031a4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003174:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003176:	b672      	cpsid	i
}
 8003178:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031a0:	b662      	cpsie	i
}
 80031a2:	e035      	b.n	8003210 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d11e      	bne.n	80031ea <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031bc:	b672      	cpsid	i
}
 80031be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031e6:	b662      	cpsie	i
}
 80031e8:	e012      	b.n	8003210 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003210:	e166      	b.n	80034e0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	2b03      	cmp	r3, #3
 8003218:	f200 811f 	bhi.w	800345a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	2b01      	cmp	r3, #1
 8003222:	d123      	bne.n	800326c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fc4d 	bl	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e167      	b.n	8003508 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	855a      	strh	r2, [r3, #42]	; 0x2a
 800326a:	e139      	b.n	80034e0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	2b02      	cmp	r3, #2
 8003272:	d152      	bne.n	800331a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	2200      	movs	r2, #0
 800327c:	4906      	ldr	r1, [pc, #24]	; (8003298 <HAL_I2C_Mem_Read+0x24c>)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 faca 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e13c      	b.n	8003508 <HAL_I2C_Mem_Read+0x4bc>
 800328e:	bf00      	nop
 8003290:	00100002 	.word	0x00100002
 8003294:	ffff0000 	.word	0xffff0000
 8003298:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800329c:	b672      	cpsid	i
}
 800329e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032e2:	b662      	cpsie	i
}
 80032e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003318:	e0e2      	b.n	80034e0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003320:	2200      	movs	r2, #0
 8003322:	497b      	ldr	r1, [pc, #492]	; (8003510 <HAL_I2C_Mem_Read+0x4c4>)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fa77 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0e9      	b.n	8003508 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003344:	b672      	cpsid	i
}
 8003346:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800337a:	4b66      	ldr	r3, [pc, #408]	; (8003514 <HAL_I2C_Mem_Read+0x4c8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	08db      	lsrs	r3, r3, #3
 8003380:	4a65      	ldr	r2, [pc, #404]	; (8003518 <HAL_I2C_Mem_Read+0x4cc>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	0a1a      	lsrs	r2, r3, #8
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00da      	lsls	r2, r3, #3
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	3b01      	subs	r3, #1
 8003398:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d118      	bne.n	80033d2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80033c2:	b662      	cpsie	i
}
 80033c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e09a      	b.n	8003508 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d1d9      	bne.n	8003394 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003422:	b662      	cpsie	i
}
 8003424:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003458:	e042      	b.n	80034e0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fb32 	bl	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e04c      	b.n	8003508 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d118      	bne.n	80034e0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f47f ae94 	bne.w	8003212 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e000      	b.n	8003508 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
  }
}
 8003508:	4618      	mov	r0, r3
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	00010004 	.word	0x00010004
 8003514:	20000000 	.word	0x20000000
 8003518:	14f8b589 	.word	0x14f8b589

0800351c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	817b      	strh	r3, [r7, #10]
 800352e:	460b      	mov	r3, r1
 8003530:	813b      	strh	r3, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003544:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	2200      	movs	r2, #0
 800354e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f960 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356c:	d103      	bne.n	8003576 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e05f      	b.n	800363a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003588:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	492d      	ldr	r1, [pc, #180]	; (8003644 <I2C_RequestMemoryWrite+0x128>)
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f998 	bl	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e04c      	b.n	800363a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	6a39      	ldr	r1, [r7, #32]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fa02 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d107      	bne.n	80035de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e02b      	b.n	800363a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035e8:	893b      	ldrh	r3, [r7, #8]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]
 80035f2:	e021      	b.n	8003638 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f9dc 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e005      	b.n	800363a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800362e:	893b      	ldrh	r3, [r7, #8]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	00010002 	.word	0x00010002

08003648 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4603      	mov	r3, r0
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	460b      	mov	r3, r1
 800365c:	813b      	strh	r3, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003670:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003680:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	2200      	movs	r2, #0
 800368a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f8c2 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a8:	d103      	bne.n	80036b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0aa      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	6a3a      	ldr	r2, [r7, #32]
 80036ca:	4952      	ldr	r1, [pc, #328]	; (8003814 <I2C_RequestMemoryRead+0x1cc>)
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f8fa 	bl	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e097      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f4:	6a39      	ldr	r1, [r7, #32]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f964 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	2b04      	cmp	r3, #4
 8003708:	d107      	bne.n	800371a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003718:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e076      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d105      	bne.n	8003730 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	611a      	str	r2, [r3, #16]
 800372e:	e021      	b.n	8003774 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003730:	893b      	ldrh	r3, [r7, #8]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b29b      	uxth	r3, r3
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	6a39      	ldr	r1, [r7, #32]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f93e 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2b04      	cmp	r3, #4
 8003754:	d107      	bne.n	8003766 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003764:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e050      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376a:	893b      	ldrh	r3, [r7, #8]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	6a39      	ldr	r1, [r7, #32]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f923 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2b04      	cmp	r3, #4
 800378a:	d107      	bne.n	800379c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e035      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f82b 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d6:	d103      	bne.n	80037e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e013      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037e4:	897b      	ldrh	r3, [r7, #10]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	6a3a      	ldr	r2, [r7, #32]
 80037f8:	4906      	ldr	r1, [pc, #24]	; (8003814 <I2C_RequestMemoryRead+0x1cc>)
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f863 	bl	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	00010002 	.word	0x00010002

08003818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003828:	e025      	b.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d021      	beq.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fe fc91 	bl	8002158 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d116      	bne.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e023      	b.n	80038be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d10d      	bne.n	800389c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4013      	ands	r3, r2
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	e00c      	b.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4013      	ands	r3, r2
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf0c      	ite	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	2300      	movne	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d0b6      	beq.n	800382a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038d4:	e051      	b.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e4:	d123      	bne.n	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e046      	b.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d021      	beq.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe fc0f 	bl	8002158 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e020      	b.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10c      	bne.n	800399e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	e00b      	b.n	80039b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	43da      	mvns	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4013      	ands	r3, r2
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d18d      	bne.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d0:	e02d      	b.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f8ce 	bl	8003b74 <I2C_IsAcknowledgeFailed>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e02d      	b.n	8003a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d021      	beq.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	f7fe fbb5 	bl	8002158 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d302      	bcc.n	8003a00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d116      	bne.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e007      	b.n	8003a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d1ca      	bne.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a52:	e02d      	b.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f88d 	bl	8003b74 <I2C_IsAcknowledgeFailed>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e02d      	b.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d021      	beq.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6c:	f7fe fb74 	bl	8002158 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d116      	bne.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	f043 0220 	orr.w	r2, r3, #32
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e007      	b.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d1ca      	bne.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ad4:	e042      	b.n	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d119      	bne.n	8003b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0210 	mvn.w	r2, #16
 8003aec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e029      	b.n	8003b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7fe fb1e 	bl	8002158 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d116      	bne.n	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e007      	b.n	8003b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d1b5      	bne.n	8003ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8a:	d11b      	bne.n	8003bc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f043 0204 	orr.w	r2, r3, #4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e26c      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf0:	4b92      	ldr	r3, [pc, #584]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bfc:	4b8f      	ldr	r3, [pc, #572]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d112      	bne.n	8003c2e <HAL_RCC_OscConfig+0x5e>
 8003c08:	4b8c      	ldr	r3, [pc, #560]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	4b89      	ldr	r3, [pc, #548]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x12c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e246      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x76>
 8003c38:	4b80      	ldr	r3, [pc, #512]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a7f      	ldr	r2, [pc, #508]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e02e      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd4>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x98>
 8003c4e:	4b7b      	ldr	r3, [pc, #492]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7a      	ldr	r2, [pc, #488]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b78      	ldr	r3, [pc, #480]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a77      	ldr	r2, [pc, #476]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0xbc>
 8003c72:	4b72      	ldr	r3, [pc, #456]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a71      	ldr	r2, [pc, #452]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b6f      	ldr	r3, [pc, #444]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6e      	ldr	r2, [pc, #440]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd4>
 8003c8c:	4b6b      	ldr	r3, [pc, #428]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6a      	ldr	r2, [pc, #424]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b68      	ldr	r3, [pc, #416]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a67      	ldr	r2, [pc, #412]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fa54 	bl	8002158 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fa50 	bl	8002158 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1fa      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b5d      	ldr	r3, [pc, #372]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe4>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fa40 	bl	8002158 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fa3c 	bl	8002158 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1e6      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x10c>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0a:	4b4c      	ldr	r3, [pc, #304]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d16:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x18c>
 8003d22:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x176>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1ba      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4939      	ldr	r1, [pc, #228]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e03a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCC_OscConfig+0x270>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6a:	f7fe f9f5 	bl	8002158 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fe f9f1 	bl	8002158 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e19b      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4927      	ldr	r1, [pc, #156]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCC_OscConfig+0x270>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fe f9d4 	bl	8002158 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db4:	f7fe f9d0 	bl	8002158 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e17a      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d03a      	beq.n	8003e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d019      	beq.n	8003e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de6:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <HAL_RCC_OscConfig+0x274>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dec:	f7fe f9b4 	bl	8002158 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe f9b0 	bl	8002158 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e15a      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e12:	2001      	movs	r0, #1
 8003e14:	f000 faac 	bl	8004370 <RCC_Delay>
 8003e18:	e01c      	b.n	8003e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e20:	f7fe f99a 	bl	8002158 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e26:	e00f      	b.n	8003e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fe f996 	bl	8002158 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d908      	bls.n	8003e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e140      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	42420000 	.word	0x42420000
 8003e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	4b9e      	ldr	r3, [pc, #632]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e9      	bne.n	8003e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a6 	beq.w	8003fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e66:	4b97      	ldr	r3, [pc, #604]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10d      	bne.n	8003e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	4b94      	ldr	r3, [pc, #592]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4a93      	ldr	r2, [pc, #588]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	61d3      	str	r3, [r2, #28]
 8003e7e:	4b91      	ldr	r3, [pc, #580]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	4b8e      	ldr	r3, [pc, #568]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d118      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9a:	4b8b      	ldr	r3, [pc, #556]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a8a      	ldr	r2, [pc, #552]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea6:	f7fe f957 	bl	8002158 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eae:	f7fe f953 	bl	8002158 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e0fd      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	4b81      	ldr	r3, [pc, #516]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x312>
 8003ed4:	4b7b      	ldr	r3, [pc, #492]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4a7a      	ldr	r2, [pc, #488]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6213      	str	r3, [r2, #32]
 8003ee0:	e02d      	b.n	8003f3e <HAL_RCC_OscConfig+0x36e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x334>
 8003eea:	4b76      	ldr	r3, [pc, #472]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4a75      	ldr	r2, [pc, #468]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	6213      	str	r3, [r2, #32]
 8003ef6:	4b73      	ldr	r3, [pc, #460]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4a72      	ldr	r2, [pc, #456]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	6213      	str	r3, [r2, #32]
 8003f02:	e01c      	b.n	8003f3e <HAL_RCC_OscConfig+0x36e>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCC_OscConfig+0x356>
 8003f0c:	4b6d      	ldr	r3, [pc, #436]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4a6c      	ldr	r2, [pc, #432]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	6213      	str	r3, [r2, #32]
 8003f18:	4b6a      	ldr	r3, [pc, #424]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4a69      	ldr	r2, [pc, #420]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6213      	str	r3, [r2, #32]
 8003f24:	e00b      	b.n	8003f3e <HAL_RCC_OscConfig+0x36e>
 8003f26:	4b67      	ldr	r3, [pc, #412]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4a66      	ldr	r2, [pc, #408]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6213      	str	r3, [r2, #32]
 8003f32:	4b64      	ldr	r3, [pc, #400]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4a63      	ldr	r2, [pc, #396]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f38:	f023 0304 	bic.w	r3, r3, #4
 8003f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d015      	beq.n	8003f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f46:	f7fe f907 	bl	8002158 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fe f903 	bl	8002158 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0ab      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f64:	4b57      	ldr	r3, [pc, #348]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ee      	beq.n	8003f4e <HAL_RCC_OscConfig+0x37e>
 8003f70:	e014      	b.n	8003f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f72:	f7fe f8f1 	bl	8002158 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fe f8ed 	bl	8002158 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e095      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f90:	4b4c      	ldr	r3, [pc, #304]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ee      	bne.n	8003f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa2:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4a47      	ldr	r2, [pc, #284]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8081 	beq.w	80040ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb8:	4b42      	ldr	r3, [pc, #264]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d061      	beq.n	8004088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d146      	bne.n	800405a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fcc:	4b3f      	ldr	r3, [pc, #252]	; (80040cc <HAL_RCC_OscConfig+0x4fc>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f8c1 	bl	8002158 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fe f8bd 	bl	8002158 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e067      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fec:	4b35      	ldr	r3, [pc, #212]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004000:	d108      	bne.n	8004014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004002:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f023 020f 	bic.w	r2, r3, #15
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	492d      	ldr	r1, [pc, #180]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8004010:	4313      	orrs	r3, r2
 8004012:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004014:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a19      	ldr	r1, [r3, #32]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	430b      	orrs	r3, r1
 8004026:	4927      	ldr	r1, [pc, #156]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <HAL_RCC_OscConfig+0x4fc>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe f891 	bl	8002158 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe f88d 	bl	8002158 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e037      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800404c:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x46a>
 8004058:	e02f      	b.n	80040ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <HAL_RCC_OscConfig+0x4fc>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe f87a 	bl	8002158 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004068:	f7fe f876 	bl	8002158 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e020      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x498>
 8004086:	e018      	b.n	80040ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e013      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <HAL_RCC_OscConfig+0x4f4>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40007000 	.word	0x40007000
 80040cc:	42420060 	.word	0x42420060

080040d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0a0      	b.n	8004226 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a4b      	ldr	r2, [pc, #300]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 8004102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004114:	4b46      	ldr	r3, [pc, #280]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a45      	ldr	r2, [pc, #276]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 800411a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800411e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b43      	ldr	r3, [pc, #268]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4940      	ldr	r1, [pc, #256]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d040      	beq.n	80041c0 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b3a      	ldr	r3, [pc, #232]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d115      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e067      	b.n	8004226 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e05b      	b.n	8004226 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b30      	ldr	r3, [pc, #192]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e053      	b.n	8004226 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4929      	ldr	r1, [pc, #164]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004190:	f7fd ffe2 	bl	8002158 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fd ffde 	bl	8002158 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e03b      	b.n	8004226 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4915      	ldr	r1, [pc, #84]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	490d      	ldr	r1, [pc, #52]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041fe:	f000 f81f 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 8004202:	4602      	mov	r2, r0
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCC_ClockConfig+0x160>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	4909      	ldr	r1, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x164>)
 8004210:	5ccb      	ldrb	r3, [r1, r3]
 8004212:	fa22 f303 	lsr.w	r3, r2, r3
 8004216:	4a08      	ldr	r2, [pc, #32]	; (8004238 <HAL_RCC_ClockConfig+0x168>)
 8004218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800421a:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_RCC_ClockConfig+0x16c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd ff58 	bl	80020d4 <HAL_InitTick>

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	08007f14 	.word	0x08007f14
 8004238:	20000000 	.word	0x20000000
 800423c:	20000004 	.word	0x20000004

08004240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	b490      	push	{r4, r7}
 8004242:	b08e      	sub	sp, #56	; 0x38
 8004244:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004246:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004248:	f107 0414 	add.w	r4, r7, #20
 800424c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800424e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004252:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004254:	1d3c      	adds	r4, r7, #4
 8004256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004260:	2300      	movs	r3, #0
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
 8004264:	2300      	movs	r3, #0
 8004266:	637b      	str	r3, [r7, #52]	; 0x34
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004270:	4b22      	ldr	r3, [pc, #136]	; (80042fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b04      	cmp	r3, #4
 800427e:	d002      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0x46>
 8004280:	2b08      	cmp	r3, #8
 8004282:	d003      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x4c>
 8004284:	e02c      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004286:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800428a:	e02c      	b.n	80042e6 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	0c9b      	lsrs	r3, r3, #18
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004298:	4413      	add	r3, r2
 800429a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d012      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80042aa:	4b14      	ldr	r3, [pc, #80]	; (80042fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042b6:	4413      	add	r3, r2
 80042b8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042c2:	fb02 f203 	mul.w	r2, r2, r3
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
 80042ce:	e004      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	4a0c      	ldr	r2, [pc, #48]	; (8004304 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80042da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042de:	e002      	b.n	80042e6 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_GetSysClockFreq+0xc8>)
 80042e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3738      	adds	r7, #56	; 0x38
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc90      	pop	{r4, r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	08007ef4 	.word	0x08007ef4
 80042f8:	08007f04 	.word	0x08007f04
 80042fc:	40021000 	.word	0x40021000
 8004300:	016e3600 	.word	0x016e3600
 8004304:	003d0900 	.word	0x003d0900
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <HAL_RCC_GetHCLKFreq+0x10>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	20000000 	.word	0x20000000

08004320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004324:	f7ff fff2 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4903      	ldr	r1, [pc, #12]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	08007f24 	.word	0x08007f24

08004348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800434c:	f7ff ffde 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004350:	4602      	mov	r2, r0
 8004352:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	0adb      	lsrs	r3, r3, #11
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	4903      	ldr	r1, [pc, #12]	; (800436c <HAL_RCC_GetPCLK2Freq+0x24>)
 800435e:	5ccb      	ldrb	r3, [r1, r3]
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000
 800436c:	08007f24 	.word	0x08007f24

08004370 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <RCC_Delay+0x34>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <RCC_Delay+0x38>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	0a5b      	lsrs	r3, r3, #9
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800438c:	bf00      	nop
  }
  while (Delay --);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1e5a      	subs	r2, r3, #1
 8004392:	60fa      	str	r2, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f9      	bne.n	800438c <RCC_Delay+0x1c>
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	20000000 	.word	0x20000000
 80043a8:	10624dd3 	.word	0x10624dd3

080043ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e03f      	b.n	800443e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fccc 	bl	8001d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fc59 	bl	8004ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08a      	sub	sp, #40	; 0x28
 800444a:	af02      	add	r7, sp, #8
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b20      	cmp	r3, #32
 8004464:	d17c      	bne.n	8004560 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_UART_Transmit+0x2c>
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e075      	b.n	8004562 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_UART_Transmit+0x3e>
 8004480:	2302      	movs	r3, #2
 8004482:	e06e      	b.n	8004562 <HAL_UART_Transmit+0x11c>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2221      	movs	r2, #33	; 0x21
 8004496:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800449a:	f7fd fe5d 	bl	8002158 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	88fa      	ldrh	r2, [r7, #6]
 80044a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b4:	d108      	bne.n	80044c8 <HAL_UART_Transmit+0x82>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	e003      	b.n	80044d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80044d8:	e02a      	b.n	8004530 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fa68 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e036      	b.n	8004562 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	3302      	adds	r3, #2
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e007      	b.n	8004522 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	3301      	adds	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1cf      	bne.n	80044da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	2140      	movs	r1, #64	; 0x40
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fa38 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e006      	b.n	8004562 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
  }
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b20      	cmp	r3, #32
 8004584:	d166      	bne.n	8004654 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_UART_Receive_DMA+0x26>
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e05f      	b.n	8004656 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_UART_Receive_DMA+0x38>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e058      	b.n	8004656 <HAL_UART_Receive_DMA+0xea>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2222      	movs	r2, #34	; 0x22
 80045c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	4a25      	ldr	r2, [pc, #148]	; (8004660 <HAL_UART_Receive_DMA+0xf4>)
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	4a24      	ldr	r2, [pc, #144]	; (8004664 <HAL_UART_Receive_DMA+0xf8>)
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	4a23      	ldr	r2, [pc, #140]	; (8004668 <HAL_UART_Receive_DMA+0xfc>)
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	2200      	movs	r2, #0
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	f7fd ff41 	bl	8002484 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800462e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800464e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	080048a3 	.word	0x080048a3
 8004664:	0800490b 	.word	0x0800490b
 8004668:	08004927 	.word	0x08004927

0800466c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_UART_IRQHandler+0x52>
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fa76 	bl	8004ba8 <UART_Receive_IT>
      return;
 80046bc:	e0d0      	b.n	8004860 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80b0 	beq.w	8004826 <HAL_UART_IRQHandler+0x1ba>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_UART_IRQHandler+0x70>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80a5 	beq.w	8004826 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_UART_IRQHandler+0x90>
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_UART_IRQHandler+0xb0>
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004714:	f043 0202 	orr.w	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_UART_IRQHandler+0xd0>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00f      	beq.n	8004766 <HAL_UART_IRQHandler+0xfa>
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <HAL_UART_IRQHandler+0xee>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475e:	f043 0208 	orr.w	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d077      	beq.n	800485e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <HAL_UART_IRQHandler+0x11c>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa10 	bl	8004ba8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	bf14      	ite	ne
 8004796:	2301      	movne	r3, #1
 8004798:	2300      	moveq	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_UART_IRQHandler+0x144>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d031      	beq.n	8004814 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f961 	bl	8004a78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d023      	beq.n	800480c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d013      	beq.n	8004804 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e0:	4a21      	ldr	r2, [pc, #132]	; (8004868 <HAL_UART_IRQHandler+0x1fc>)
 80047e2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd feab 	bl	8002544 <HAL_DMA_Abort_IT>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d016      	beq.n	8004822 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047fe:	4610      	mov	r0, r2
 8004800:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004802:	e00e      	b.n	8004822 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f843 	bl	8004890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480a:	e00a      	b.n	8004822 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f83f 	bl	8004890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004812:	e006      	b.n	8004822 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f83b 	bl	8004890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004820:	e01d      	b.n	800485e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004822:	bf00      	nop
    return;
 8004824:	e01b      	b.n	800485e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_UART_IRQHandler+0x1d6>
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f94d 	bl	8004ada <UART_Transmit_IT>
    return;
 8004840:	e00e      	b.n	8004860 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <HAL_UART_IRQHandler+0x1f4>
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f98e 	bl	8004b78 <UART_EndTransmit_IT>
    return;
 800485c:	e000      	b.n	8004860 <HAL_UART_IRQHandler+0x1f4>
    return;
 800485e:	bf00      	nop
  }
}
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	08004ab3 	.word	0x08004ab3

0800486c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d11e      	bne.n	80048fc <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695a      	ldr	r2, [r3, #20]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7fc fcbd 	bl	800127c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff ffb0 	bl	800487e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b21      	cmp	r3, #33	; 0x21
 8004958:	d108      	bne.n	800496c <UART_DMAError+0x46>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2200      	movs	r2, #0
 8004964:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004966:	68b8      	ldr	r0, [r7, #8]
 8004968:	f000 f871 	bl	8004a4e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b22      	cmp	r3, #34	; 0x22
 800498c:	d108      	bne.n	80049a0 <UART_DMAError+0x7a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2200      	movs	r2, #0
 8004998:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800499a:	68b8      	ldr	r0, [r7, #8]
 800499c:	f000 f86c 	bl	8004a78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	f043 0210 	orr.w	r2, r3, #16
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049ac:	68b8      	ldr	r0, [r7, #8]
 80049ae:	f7ff ff6f 	bl	8004890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ca:	e02c      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d028      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <UART_WaitOnFlagUntilTimeout+0x30>
 80049da:	f7fd fbbd 	bl	8002158 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d21d      	bcs.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e00f      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d0c3      	beq.n	80049cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a64:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695a      	ldr	r2, [r3, #20]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff fedf 	bl	8004890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b21      	cmp	r3, #33	; 0x21
 8004aec:	d13e      	bne.n	8004b6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af6:	d114      	bne.n	8004b22 <UART_Transmit_IT+0x48>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d110      	bne.n	8004b22 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	1c9a      	adds	r2, r3, #2
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	621a      	str	r2, [r3, #32]
 8004b20:	e008      	b.n	8004b34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	1c59      	adds	r1, r3, #1
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6211      	str	r1, [r2, #32]
 8004b2c:	781a      	ldrb	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4619      	mov	r1, r3
 8004b42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e000      	b.n	8004b6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b6c:	2302      	movs	r3, #2
  }
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff fe67 	bl	800486c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b22      	cmp	r3, #34	; 0x22
 8004bba:	d170      	bne.n	8004c9e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d117      	bne.n	8004bf6 <UART_Receive_IT+0x4e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d113      	bne.n	8004bf6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	1c9a      	adds	r2, r3, #2
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8004bf4:	e026      	b.n	8004c44 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c08:	d007      	beq.n	8004c1a <UART_Receive_IT+0x72>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <UART_Receive_IT+0x80>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e008      	b.n	8004c3a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	4619      	mov	r1, r3
 8004c52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d120      	bne.n	8004c9a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0220 	bic.w	r2, r2, #32
 8004c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc faf3 	bl	800127c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e002      	b.n	8004ca0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ce8:	f023 030c 	bic.w	r3, r3, #12
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699a      	ldr	r2, [r3, #24]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a55      	ldr	r2, [pc, #340]	; (8004e68 <UART_SetConfig+0x1c0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d103      	bne.n	8004d1e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d16:	f7ff fb17 	bl	8004348 <HAL_RCC_GetPCLK2Freq>
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	e002      	b.n	8004d24 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d1e:	f7ff faff 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 8004d22:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d14c      	bne.n	8004dc8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	009a      	lsls	r2, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	4a49      	ldr	r2, [pc, #292]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	0119      	lsls	r1, r3, #4
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009a      	lsls	r2, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d64:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004d66:	fba3 0302 	umull	r0, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2064      	movs	r0, #100	; 0x64
 8004d6e:	fb00 f303 	mul.w	r3, r0, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	3332      	adds	r3, #50	; 0x32
 8004d78:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d86:	4419      	add	r1, r3
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	009a      	lsls	r2, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d9e:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004da0:	fba3 0302 	umull	r0, r3, r3, r2
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	2064      	movs	r0, #100	; 0x64
 8004da8:	fb00 f303 	mul.w	r3, r0, r3
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	3332      	adds	r3, #50	; 0x32
 8004db2:	4a2e      	ldr	r2, [pc, #184]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	095b      	lsrs	r3, r3, #5
 8004dba:	f003 0207 	and.w	r2, r3, #7
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8004dc6:	e04a      	b.n	8004e5e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	009a      	lsls	r2, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dde:	4a23      	ldr	r2, [pc, #140]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004de0:	fba2 2303 	umull	r2, r3, r2, r3
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	0119      	lsls	r1, r3, #4
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009a      	lsls	r2, r3, #2
 8004df2:	441a      	add	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004e00:	fba3 0302 	umull	r0, r3, r3, r2
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	2064      	movs	r0, #100	; 0x64
 8004e08:	fb00 f303 	mul.w	r3, r0, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	3332      	adds	r3, #50	; 0x32
 8004e12:	4a16      	ldr	r2, [pc, #88]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e1e:	4419      	add	r1, r3
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009a      	lsls	r2, r3, #2
 8004e2a:	441a      	add	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004e38:	fba3 0302 	umull	r0, r3, r3, r2
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	2064      	movs	r0, #100	; 0x64
 8004e40:	fb00 f303 	mul.w	r3, r0, r3
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	3332      	adds	r3, #50	; 0x32
 8004e4a:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <UART_SetConfig+0x1c4>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	f003 020f 	and.w	r2, r3, #15
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40013800 	.word	0x40013800
 8004e6c:	51eb851f 	.word	0x51eb851f

08004e70 <__errno>:
 8004e70:	4b01      	ldr	r3, [pc, #4]	; (8004e78 <__errno+0x8>)
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	2000000c 	.word	0x2000000c

08004e7c <__libc_init_array>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	2600      	movs	r6, #0
 8004e80:	4d0c      	ldr	r5, [pc, #48]	; (8004eb4 <__libc_init_array+0x38>)
 8004e82:	4c0d      	ldr	r4, [pc, #52]	; (8004eb8 <__libc_init_array+0x3c>)
 8004e84:	1b64      	subs	r4, r4, r5
 8004e86:	10a4      	asrs	r4, r4, #2
 8004e88:	42a6      	cmp	r6, r4
 8004e8a:	d109      	bne.n	8004ea0 <__libc_init_array+0x24>
 8004e8c:	f002 febc 	bl	8007c08 <_init>
 8004e90:	2600      	movs	r6, #0
 8004e92:	4d0a      	ldr	r5, [pc, #40]	; (8004ebc <__libc_init_array+0x40>)
 8004e94:	4c0a      	ldr	r4, [pc, #40]	; (8004ec0 <__libc_init_array+0x44>)
 8004e96:	1b64      	subs	r4, r4, r5
 8004e98:	10a4      	asrs	r4, r4, #2
 8004e9a:	42a6      	cmp	r6, r4
 8004e9c:	d105      	bne.n	8004eaa <__libc_init_array+0x2e>
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea4:	4798      	blx	r3
 8004ea6:	3601      	adds	r6, #1
 8004ea8:	e7ee      	b.n	8004e88 <__libc_init_array+0xc>
 8004eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eae:	4798      	blx	r3
 8004eb0:	3601      	adds	r6, #1
 8004eb2:	e7f2      	b.n	8004e9a <__libc_init_array+0x1e>
 8004eb4:	0800830c 	.word	0x0800830c
 8004eb8:	0800830c 	.word	0x0800830c
 8004ebc:	0800830c 	.word	0x0800830c
 8004ec0:	08008310 	.word	0x08008310

08004ec4 <memmove>:
 8004ec4:	4288      	cmp	r0, r1
 8004ec6:	b510      	push	{r4, lr}
 8004ec8:	eb01 0402 	add.w	r4, r1, r2
 8004ecc:	d902      	bls.n	8004ed4 <memmove+0x10>
 8004ece:	4284      	cmp	r4, r0
 8004ed0:	4623      	mov	r3, r4
 8004ed2:	d807      	bhi.n	8004ee4 <memmove+0x20>
 8004ed4:	1e43      	subs	r3, r0, #1
 8004ed6:	42a1      	cmp	r1, r4
 8004ed8:	d008      	beq.n	8004eec <memmove+0x28>
 8004eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ee2:	e7f8      	b.n	8004ed6 <memmove+0x12>
 8004ee4:	4601      	mov	r1, r0
 8004ee6:	4402      	add	r2, r0
 8004ee8:	428a      	cmp	r2, r1
 8004eea:	d100      	bne.n	8004eee <memmove+0x2a>
 8004eec:	bd10      	pop	{r4, pc}
 8004eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ef6:	e7f7      	b.n	8004ee8 <memmove+0x24>

08004ef8 <memset>:
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4402      	add	r2, r0
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d100      	bne.n	8004f02 <memset+0xa>
 8004f00:	4770      	bx	lr
 8004f02:	f803 1b01 	strb.w	r1, [r3], #1
 8004f06:	e7f9      	b.n	8004efc <memset+0x4>

08004f08 <__cvt>:
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0e:	461f      	mov	r7, r3
 8004f10:	bfbb      	ittet	lt
 8004f12:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004f16:	461f      	movlt	r7, r3
 8004f18:	2300      	movge	r3, #0
 8004f1a:	232d      	movlt	r3, #45	; 0x2d
 8004f1c:	b088      	sub	sp, #32
 8004f1e:	4614      	mov	r4, r2
 8004f20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004f24:	7013      	strb	r3, [r2, #0]
 8004f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004f2c:	f023 0820 	bic.w	r8, r3, #32
 8004f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f34:	d005      	beq.n	8004f42 <__cvt+0x3a>
 8004f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f3a:	d100      	bne.n	8004f3e <__cvt+0x36>
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e000      	b.n	8004f44 <__cvt+0x3c>
 8004f42:	2303      	movs	r3, #3
 8004f44:	aa07      	add	r2, sp, #28
 8004f46:	9204      	str	r2, [sp, #16]
 8004f48:	aa06      	add	r2, sp, #24
 8004f4a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004f4e:	e9cd 3500 	strd	r3, r5, [sp]
 8004f52:	4622      	mov	r2, r4
 8004f54:	463b      	mov	r3, r7
 8004f56:	f000 fce7 	bl	8005928 <_dtoa_r>
 8004f5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f5e:	4606      	mov	r6, r0
 8004f60:	d102      	bne.n	8004f68 <__cvt+0x60>
 8004f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f64:	07db      	lsls	r3, r3, #31
 8004f66:	d522      	bpl.n	8004fae <__cvt+0xa6>
 8004f68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f6c:	eb06 0905 	add.w	r9, r6, r5
 8004f70:	d110      	bne.n	8004f94 <__cvt+0x8c>
 8004f72:	7833      	ldrb	r3, [r6, #0]
 8004f74:	2b30      	cmp	r3, #48	; 0x30
 8004f76:	d10a      	bne.n	8004f8e <__cvt+0x86>
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4639      	mov	r1, r7
 8004f80:	f7fb fd72 	bl	8000a68 <__aeabi_dcmpeq>
 8004f84:	b918      	cbnz	r0, 8004f8e <__cvt+0x86>
 8004f86:	f1c5 0501 	rsb	r5, r5, #1
 8004f8a:	f8ca 5000 	str.w	r5, [sl]
 8004f8e:	f8da 3000 	ldr.w	r3, [sl]
 8004f92:	4499      	add	r9, r3
 8004f94:	2200      	movs	r2, #0
 8004f96:	2300      	movs	r3, #0
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	f7fb fd64 	bl	8000a68 <__aeabi_dcmpeq>
 8004fa0:	b108      	cbz	r0, 8004fa6 <__cvt+0x9e>
 8004fa2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004fa6:	2230      	movs	r2, #48	; 0x30
 8004fa8:	9b07      	ldr	r3, [sp, #28]
 8004faa:	454b      	cmp	r3, r9
 8004fac:	d307      	bcc.n	8004fbe <__cvt+0xb6>
 8004fae:	4630      	mov	r0, r6
 8004fb0:	9b07      	ldr	r3, [sp, #28]
 8004fb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004fb4:	1b9b      	subs	r3, r3, r6
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	b008      	add	sp, #32
 8004fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbe:	1c59      	adds	r1, r3, #1
 8004fc0:	9107      	str	r1, [sp, #28]
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	e7f0      	b.n	8004fa8 <__cvt+0xa0>

08004fc6 <__exponent>:
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	f803 2b02 	strb.w	r2, [r3], #2
 8004fd0:	bfb6      	itet	lt
 8004fd2:	222d      	movlt	r2, #45	; 0x2d
 8004fd4:	222b      	movge	r2, #43	; 0x2b
 8004fd6:	4249      	neglt	r1, r1
 8004fd8:	2909      	cmp	r1, #9
 8004fda:	7042      	strb	r2, [r0, #1]
 8004fdc:	dd2b      	ble.n	8005036 <__exponent+0x70>
 8004fde:	f10d 0407 	add.w	r4, sp, #7
 8004fe2:	46a4      	mov	ip, r4
 8004fe4:	270a      	movs	r7, #10
 8004fe6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004fea:	460a      	mov	r2, r1
 8004fec:	46a6      	mov	lr, r4
 8004fee:	fb07 1516 	mls	r5, r7, r6, r1
 8004ff2:	2a63      	cmp	r2, #99	; 0x63
 8004ff4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ffe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005002:	dcf0      	bgt.n	8004fe6 <__exponent+0x20>
 8005004:	3130      	adds	r1, #48	; 0x30
 8005006:	f1ae 0502 	sub.w	r5, lr, #2
 800500a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800500e:	4629      	mov	r1, r5
 8005010:	1c44      	adds	r4, r0, #1
 8005012:	4561      	cmp	r1, ip
 8005014:	d30a      	bcc.n	800502c <__exponent+0x66>
 8005016:	f10d 0209 	add.w	r2, sp, #9
 800501a:	eba2 020e 	sub.w	r2, r2, lr
 800501e:	4565      	cmp	r5, ip
 8005020:	bf88      	it	hi
 8005022:	2200      	movhi	r2, #0
 8005024:	4413      	add	r3, r2
 8005026:	1a18      	subs	r0, r3, r0
 8005028:	b003      	add	sp, #12
 800502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005030:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005034:	e7ed      	b.n	8005012 <__exponent+0x4c>
 8005036:	2330      	movs	r3, #48	; 0x30
 8005038:	3130      	adds	r1, #48	; 0x30
 800503a:	7083      	strb	r3, [r0, #2]
 800503c:	70c1      	strb	r1, [r0, #3]
 800503e:	1d03      	adds	r3, r0, #4
 8005040:	e7f1      	b.n	8005026 <__exponent+0x60>
	...

08005044 <_printf_float>:
 8005044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005048:	b091      	sub	sp, #68	; 0x44
 800504a:	460c      	mov	r4, r1
 800504c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005050:	4616      	mov	r6, r2
 8005052:	461f      	mov	r7, r3
 8005054:	4605      	mov	r5, r0
 8005056:	f001 fa55 	bl	8006504 <_localeconv_r>
 800505a:	6803      	ldr	r3, [r0, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	9309      	str	r3, [sp, #36]	; 0x24
 8005060:	f7fb f8d6 	bl	8000210 <strlen>
 8005064:	2300      	movs	r3, #0
 8005066:	930e      	str	r3, [sp, #56]	; 0x38
 8005068:	f8d8 3000 	ldr.w	r3, [r8]
 800506c:	900a      	str	r0, [sp, #40]	; 0x28
 800506e:	3307      	adds	r3, #7
 8005070:	f023 0307 	bic.w	r3, r3, #7
 8005074:	f103 0208 	add.w	r2, r3, #8
 8005078:	f894 9018 	ldrb.w	r9, [r4, #24]
 800507c:	f8d4 b000 	ldr.w	fp, [r4]
 8005080:	f8c8 2000 	str.w	r2, [r8]
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800508c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005090:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005094:	930b      	str	r3, [sp, #44]	; 0x2c
 8005096:	f04f 32ff 	mov.w	r2, #4294967295
 800509a:	4640      	mov	r0, r8
 800509c:	4b9c      	ldr	r3, [pc, #624]	; (8005310 <_printf_float+0x2cc>)
 800509e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050a0:	f7fb fd14 	bl	8000acc <__aeabi_dcmpun>
 80050a4:	bb70      	cbnz	r0, 8005104 <_printf_float+0xc0>
 80050a6:	f04f 32ff 	mov.w	r2, #4294967295
 80050aa:	4640      	mov	r0, r8
 80050ac:	4b98      	ldr	r3, [pc, #608]	; (8005310 <_printf_float+0x2cc>)
 80050ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050b0:	f7fb fcee 	bl	8000a90 <__aeabi_dcmple>
 80050b4:	bb30      	cbnz	r0, 8005104 <_printf_float+0xc0>
 80050b6:	2200      	movs	r2, #0
 80050b8:	2300      	movs	r3, #0
 80050ba:	4640      	mov	r0, r8
 80050bc:	4651      	mov	r1, sl
 80050be:	f7fb fcdd 	bl	8000a7c <__aeabi_dcmplt>
 80050c2:	b110      	cbz	r0, 80050ca <_printf_float+0x86>
 80050c4:	232d      	movs	r3, #45	; 0x2d
 80050c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ca:	4b92      	ldr	r3, [pc, #584]	; (8005314 <_printf_float+0x2d0>)
 80050cc:	4892      	ldr	r0, [pc, #584]	; (8005318 <_printf_float+0x2d4>)
 80050ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80050d2:	bf94      	ite	ls
 80050d4:	4698      	movls	r8, r3
 80050d6:	4680      	movhi	r8, r0
 80050d8:	2303      	movs	r3, #3
 80050da:	f04f 0a00 	mov.w	sl, #0
 80050de:	6123      	str	r3, [r4, #16]
 80050e0:	f02b 0304 	bic.w	r3, fp, #4
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	4633      	mov	r3, r6
 80050e8:	4621      	mov	r1, r4
 80050ea:	4628      	mov	r0, r5
 80050ec:	9700      	str	r7, [sp, #0]
 80050ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80050f0:	f000 f9d4 	bl	800549c <_printf_common>
 80050f4:	3001      	adds	r0, #1
 80050f6:	f040 8090 	bne.w	800521a <_printf_float+0x1d6>
 80050fa:	f04f 30ff 	mov.w	r0, #4294967295
 80050fe:	b011      	add	sp, #68	; 0x44
 8005100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005104:	4642      	mov	r2, r8
 8005106:	4653      	mov	r3, sl
 8005108:	4640      	mov	r0, r8
 800510a:	4651      	mov	r1, sl
 800510c:	f7fb fcde 	bl	8000acc <__aeabi_dcmpun>
 8005110:	b148      	cbz	r0, 8005126 <_printf_float+0xe2>
 8005112:	f1ba 0f00 	cmp.w	sl, #0
 8005116:	bfb8      	it	lt
 8005118:	232d      	movlt	r3, #45	; 0x2d
 800511a:	4880      	ldr	r0, [pc, #512]	; (800531c <_printf_float+0x2d8>)
 800511c:	bfb8      	it	lt
 800511e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005122:	4b7f      	ldr	r3, [pc, #508]	; (8005320 <_printf_float+0x2dc>)
 8005124:	e7d3      	b.n	80050ce <_printf_float+0x8a>
 8005126:	6863      	ldr	r3, [r4, #4]
 8005128:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	d142      	bne.n	80051b6 <_printf_float+0x172>
 8005130:	2306      	movs	r3, #6
 8005132:	6063      	str	r3, [r4, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	9206      	str	r2, [sp, #24]
 8005138:	aa0e      	add	r2, sp, #56	; 0x38
 800513a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800513e:	aa0d      	add	r2, sp, #52	; 0x34
 8005140:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005144:	9203      	str	r2, [sp, #12]
 8005146:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800514a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	4642      	mov	r2, r8
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	4628      	mov	r0, r5
 8005158:	4653      	mov	r3, sl
 800515a:	910b      	str	r1, [sp, #44]	; 0x2c
 800515c:	f7ff fed4 	bl	8004f08 <__cvt>
 8005160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005162:	4680      	mov	r8, r0
 8005164:	2947      	cmp	r1, #71	; 0x47
 8005166:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005168:	d108      	bne.n	800517c <_printf_float+0x138>
 800516a:	1cc8      	adds	r0, r1, #3
 800516c:	db02      	blt.n	8005174 <_printf_float+0x130>
 800516e:	6863      	ldr	r3, [r4, #4]
 8005170:	4299      	cmp	r1, r3
 8005172:	dd40      	ble.n	80051f6 <_printf_float+0x1b2>
 8005174:	f1a9 0902 	sub.w	r9, r9, #2
 8005178:	fa5f f989 	uxtb.w	r9, r9
 800517c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005180:	d81f      	bhi.n	80051c2 <_printf_float+0x17e>
 8005182:	464a      	mov	r2, r9
 8005184:	3901      	subs	r1, #1
 8005186:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800518a:	910d      	str	r1, [sp, #52]	; 0x34
 800518c:	f7ff ff1b 	bl	8004fc6 <__exponent>
 8005190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005192:	4682      	mov	sl, r0
 8005194:	1813      	adds	r3, r2, r0
 8005196:	2a01      	cmp	r2, #1
 8005198:	6123      	str	r3, [r4, #16]
 800519a:	dc02      	bgt.n	80051a2 <_printf_float+0x15e>
 800519c:	6822      	ldr	r2, [r4, #0]
 800519e:	07d2      	lsls	r2, r2, #31
 80051a0:	d501      	bpl.n	80051a6 <_printf_float+0x162>
 80051a2:	3301      	adds	r3, #1
 80051a4:	6123      	str	r3, [r4, #16]
 80051a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d09b      	beq.n	80050e6 <_printf_float+0xa2>
 80051ae:	232d      	movs	r3, #45	; 0x2d
 80051b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b4:	e797      	b.n	80050e6 <_printf_float+0xa2>
 80051b6:	2947      	cmp	r1, #71	; 0x47
 80051b8:	d1bc      	bne.n	8005134 <_printf_float+0xf0>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1ba      	bne.n	8005134 <_printf_float+0xf0>
 80051be:	2301      	movs	r3, #1
 80051c0:	e7b7      	b.n	8005132 <_printf_float+0xee>
 80051c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80051c6:	d118      	bne.n	80051fa <_printf_float+0x1b6>
 80051c8:	2900      	cmp	r1, #0
 80051ca:	6863      	ldr	r3, [r4, #4]
 80051cc:	dd0b      	ble.n	80051e6 <_printf_float+0x1a2>
 80051ce:	6121      	str	r1, [r4, #16]
 80051d0:	b913      	cbnz	r3, 80051d8 <_printf_float+0x194>
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	07d0      	lsls	r0, r2, #31
 80051d6:	d502      	bpl.n	80051de <_printf_float+0x19a>
 80051d8:	3301      	adds	r3, #1
 80051da:	440b      	add	r3, r1
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	f04f 0a00 	mov.w	sl, #0
 80051e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80051e4:	e7df      	b.n	80051a6 <_printf_float+0x162>
 80051e6:	b913      	cbnz	r3, 80051ee <_printf_float+0x1aa>
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	07d2      	lsls	r2, r2, #31
 80051ec:	d501      	bpl.n	80051f2 <_printf_float+0x1ae>
 80051ee:	3302      	adds	r3, #2
 80051f0:	e7f4      	b.n	80051dc <_printf_float+0x198>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e7f2      	b.n	80051dc <_printf_float+0x198>
 80051f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80051fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051fc:	4299      	cmp	r1, r3
 80051fe:	db05      	blt.n	800520c <_printf_float+0x1c8>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	6121      	str	r1, [r4, #16]
 8005204:	07d8      	lsls	r0, r3, #31
 8005206:	d5ea      	bpl.n	80051de <_printf_float+0x19a>
 8005208:	1c4b      	adds	r3, r1, #1
 800520a:	e7e7      	b.n	80051dc <_printf_float+0x198>
 800520c:	2900      	cmp	r1, #0
 800520e:	bfcc      	ite	gt
 8005210:	2201      	movgt	r2, #1
 8005212:	f1c1 0202 	rsble	r2, r1, #2
 8005216:	4413      	add	r3, r2
 8005218:	e7e0      	b.n	80051dc <_printf_float+0x198>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	055a      	lsls	r2, r3, #21
 800521e:	d407      	bmi.n	8005230 <_printf_float+0x1ec>
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	4642      	mov	r2, r8
 8005224:	4631      	mov	r1, r6
 8005226:	4628      	mov	r0, r5
 8005228:	47b8      	blx	r7
 800522a:	3001      	adds	r0, #1
 800522c:	d12b      	bne.n	8005286 <_printf_float+0x242>
 800522e:	e764      	b.n	80050fa <_printf_float+0xb6>
 8005230:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005234:	f240 80dd 	bls.w	80053f2 <_printf_float+0x3ae>
 8005238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	f7fb fc12 	bl	8000a68 <__aeabi_dcmpeq>
 8005244:	2800      	cmp	r0, #0
 8005246:	d033      	beq.n	80052b0 <_printf_float+0x26c>
 8005248:	2301      	movs	r3, #1
 800524a:	4631      	mov	r1, r6
 800524c:	4628      	mov	r0, r5
 800524e:	4a35      	ldr	r2, [pc, #212]	; (8005324 <_printf_float+0x2e0>)
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f af51 	beq.w	80050fa <_printf_float+0xb6>
 8005258:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800525c:	429a      	cmp	r2, r3
 800525e:	db02      	blt.n	8005266 <_printf_float+0x222>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	07d8      	lsls	r0, r3, #31
 8005264:	d50f      	bpl.n	8005286 <_printf_float+0x242>
 8005266:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800526a:	4631      	mov	r1, r6
 800526c:	4628      	mov	r0, r5
 800526e:	47b8      	blx	r7
 8005270:	3001      	adds	r0, #1
 8005272:	f43f af42 	beq.w	80050fa <_printf_float+0xb6>
 8005276:	f04f 0800 	mov.w	r8, #0
 800527a:	f104 091a 	add.w	r9, r4, #26
 800527e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005280:	3b01      	subs	r3, #1
 8005282:	4543      	cmp	r3, r8
 8005284:	dc09      	bgt.n	800529a <_printf_float+0x256>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	079b      	lsls	r3, r3, #30
 800528a:	f100 8102 	bmi.w	8005492 <_printf_float+0x44e>
 800528e:	68e0      	ldr	r0, [r4, #12]
 8005290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005292:	4298      	cmp	r0, r3
 8005294:	bfb8      	it	lt
 8005296:	4618      	movlt	r0, r3
 8005298:	e731      	b.n	80050fe <_printf_float+0xba>
 800529a:	2301      	movs	r3, #1
 800529c:	464a      	mov	r2, r9
 800529e:	4631      	mov	r1, r6
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	f43f af28 	beq.w	80050fa <_printf_float+0xb6>
 80052aa:	f108 0801 	add.w	r8, r8, #1
 80052ae:	e7e6      	b.n	800527e <_printf_float+0x23a>
 80052b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	dc38      	bgt.n	8005328 <_printf_float+0x2e4>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4631      	mov	r1, r6
 80052ba:	4628      	mov	r0, r5
 80052bc:	4a19      	ldr	r2, [pc, #100]	; (8005324 <_printf_float+0x2e0>)
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	f43f af1a 	beq.w	80050fa <_printf_float+0xb6>
 80052c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052ca:	4313      	orrs	r3, r2
 80052cc:	d102      	bne.n	80052d4 <_printf_float+0x290>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	07d9      	lsls	r1, r3, #31
 80052d2:	d5d8      	bpl.n	8005286 <_printf_float+0x242>
 80052d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d8:	4631      	mov	r1, r6
 80052da:	4628      	mov	r0, r5
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f af0b 	beq.w	80050fa <_printf_float+0xb6>
 80052e4:	f04f 0900 	mov.w	r9, #0
 80052e8:	f104 0a1a 	add.w	sl, r4, #26
 80052ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052ee:	425b      	negs	r3, r3
 80052f0:	454b      	cmp	r3, r9
 80052f2:	dc01      	bgt.n	80052f8 <_printf_float+0x2b4>
 80052f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f6:	e794      	b.n	8005222 <_printf_float+0x1de>
 80052f8:	2301      	movs	r3, #1
 80052fa:	4652      	mov	r2, sl
 80052fc:	4631      	mov	r1, r6
 80052fe:	4628      	mov	r0, r5
 8005300:	47b8      	blx	r7
 8005302:	3001      	adds	r0, #1
 8005304:	f43f aef9 	beq.w	80050fa <_printf_float+0xb6>
 8005308:	f109 0901 	add.w	r9, r9, #1
 800530c:	e7ee      	b.n	80052ec <_printf_float+0x2a8>
 800530e:	bf00      	nop
 8005310:	7fefffff 	.word	0x7fefffff
 8005314:	08007f30 	.word	0x08007f30
 8005318:	08007f34 	.word	0x08007f34
 800531c:	08007f3c 	.word	0x08007f3c
 8005320:	08007f38 	.word	0x08007f38
 8005324:	08007f40 	.word	0x08007f40
 8005328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800532a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800532c:	429a      	cmp	r2, r3
 800532e:	bfa8      	it	ge
 8005330:	461a      	movge	r2, r3
 8005332:	2a00      	cmp	r2, #0
 8005334:	4691      	mov	r9, r2
 8005336:	dc37      	bgt.n	80053a8 <_printf_float+0x364>
 8005338:	f04f 0b00 	mov.w	fp, #0
 800533c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005340:	f104 021a 	add.w	r2, r4, #26
 8005344:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005348:	ebaa 0309 	sub.w	r3, sl, r9
 800534c:	455b      	cmp	r3, fp
 800534e:	dc33      	bgt.n	80053b8 <_printf_float+0x374>
 8005350:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005354:	429a      	cmp	r2, r3
 8005356:	db3b      	blt.n	80053d0 <_printf_float+0x38c>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	07da      	lsls	r2, r3, #31
 800535c:	d438      	bmi.n	80053d0 <_printf_float+0x38c>
 800535e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005360:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005362:	eba2 030a 	sub.w	r3, r2, sl
 8005366:	eba2 0901 	sub.w	r9, r2, r1
 800536a:	4599      	cmp	r9, r3
 800536c:	bfa8      	it	ge
 800536e:	4699      	movge	r9, r3
 8005370:	f1b9 0f00 	cmp.w	r9, #0
 8005374:	dc34      	bgt.n	80053e0 <_printf_float+0x39c>
 8005376:	f04f 0800 	mov.w	r8, #0
 800537a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800537e:	f104 0a1a 	add.w	sl, r4, #26
 8005382:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	eba3 0309 	sub.w	r3, r3, r9
 800538c:	4543      	cmp	r3, r8
 800538e:	f77f af7a 	ble.w	8005286 <_printf_float+0x242>
 8005392:	2301      	movs	r3, #1
 8005394:	4652      	mov	r2, sl
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	f43f aeac 	beq.w	80050fa <_printf_float+0xb6>
 80053a2:	f108 0801 	add.w	r8, r8, #1
 80053a6:	e7ec      	b.n	8005382 <_printf_float+0x33e>
 80053a8:	4613      	mov	r3, r2
 80053aa:	4631      	mov	r1, r6
 80053ac:	4642      	mov	r2, r8
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b8      	blx	r7
 80053b2:	3001      	adds	r0, #1
 80053b4:	d1c0      	bne.n	8005338 <_printf_float+0x2f4>
 80053b6:	e6a0      	b.n	80050fa <_printf_float+0xb6>
 80053b8:	2301      	movs	r3, #1
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	920b      	str	r2, [sp, #44]	; 0x2c
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	f43f ae99 	beq.w	80050fa <_printf_float+0xb6>
 80053c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053ca:	f10b 0b01 	add.w	fp, fp, #1
 80053ce:	e7b9      	b.n	8005344 <_printf_float+0x300>
 80053d0:	4631      	mov	r1, r6
 80053d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053d6:	4628      	mov	r0, r5
 80053d8:	47b8      	blx	r7
 80053da:	3001      	adds	r0, #1
 80053dc:	d1bf      	bne.n	800535e <_printf_float+0x31a>
 80053de:	e68c      	b.n	80050fa <_printf_float+0xb6>
 80053e0:	464b      	mov	r3, r9
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	eb08 020a 	add.w	r2, r8, sl
 80053ea:	47b8      	blx	r7
 80053ec:	3001      	adds	r0, #1
 80053ee:	d1c2      	bne.n	8005376 <_printf_float+0x332>
 80053f0:	e683      	b.n	80050fa <_printf_float+0xb6>
 80053f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053f4:	2a01      	cmp	r2, #1
 80053f6:	dc01      	bgt.n	80053fc <_printf_float+0x3b8>
 80053f8:	07db      	lsls	r3, r3, #31
 80053fa:	d537      	bpl.n	800546c <_printf_float+0x428>
 80053fc:	2301      	movs	r3, #1
 80053fe:	4642      	mov	r2, r8
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	f43f ae77 	beq.w	80050fa <_printf_float+0xb6>
 800540c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005410:	4631      	mov	r1, r6
 8005412:	4628      	mov	r0, r5
 8005414:	47b8      	blx	r7
 8005416:	3001      	adds	r0, #1
 8005418:	f43f ae6f 	beq.w	80050fa <_printf_float+0xb6>
 800541c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005420:	2200      	movs	r2, #0
 8005422:	2300      	movs	r3, #0
 8005424:	f7fb fb20 	bl	8000a68 <__aeabi_dcmpeq>
 8005428:	b9d8      	cbnz	r0, 8005462 <_printf_float+0x41e>
 800542a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800542c:	f108 0201 	add.w	r2, r8, #1
 8005430:	3b01      	subs	r3, #1
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	d10e      	bne.n	800545a <_printf_float+0x416>
 800543c:	e65d      	b.n	80050fa <_printf_float+0xb6>
 800543e:	2301      	movs	r3, #1
 8005440:	464a      	mov	r2, r9
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	f43f ae56 	beq.w	80050fa <_printf_float+0xb6>
 800544e:	f108 0801 	add.w	r8, r8, #1
 8005452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005454:	3b01      	subs	r3, #1
 8005456:	4543      	cmp	r3, r8
 8005458:	dcf1      	bgt.n	800543e <_printf_float+0x3fa>
 800545a:	4653      	mov	r3, sl
 800545c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005460:	e6e0      	b.n	8005224 <_printf_float+0x1e0>
 8005462:	f04f 0800 	mov.w	r8, #0
 8005466:	f104 091a 	add.w	r9, r4, #26
 800546a:	e7f2      	b.n	8005452 <_printf_float+0x40e>
 800546c:	2301      	movs	r3, #1
 800546e:	4642      	mov	r2, r8
 8005470:	e7df      	b.n	8005432 <_printf_float+0x3ee>
 8005472:	2301      	movs	r3, #1
 8005474:	464a      	mov	r2, r9
 8005476:	4631      	mov	r1, r6
 8005478:	4628      	mov	r0, r5
 800547a:	47b8      	blx	r7
 800547c:	3001      	adds	r0, #1
 800547e:	f43f ae3c 	beq.w	80050fa <_printf_float+0xb6>
 8005482:	f108 0801 	add.w	r8, r8, #1
 8005486:	68e3      	ldr	r3, [r4, #12]
 8005488:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800548a:	1a5b      	subs	r3, r3, r1
 800548c:	4543      	cmp	r3, r8
 800548e:	dcf0      	bgt.n	8005472 <_printf_float+0x42e>
 8005490:	e6fd      	b.n	800528e <_printf_float+0x24a>
 8005492:	f04f 0800 	mov.w	r8, #0
 8005496:	f104 0919 	add.w	r9, r4, #25
 800549a:	e7f4      	b.n	8005486 <_printf_float+0x442>

0800549c <_printf_common>:
 800549c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a0:	4616      	mov	r6, r2
 80054a2:	4699      	mov	r9, r3
 80054a4:	688a      	ldr	r2, [r1, #8]
 80054a6:	690b      	ldr	r3, [r1, #16]
 80054a8:	4607      	mov	r7, r0
 80054aa:	4293      	cmp	r3, r2
 80054ac:	bfb8      	it	lt
 80054ae:	4613      	movlt	r3, r2
 80054b0:	6033      	str	r3, [r6, #0]
 80054b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054b6:	460c      	mov	r4, r1
 80054b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054bc:	b10a      	cbz	r2, 80054c2 <_printf_common+0x26>
 80054be:	3301      	adds	r3, #1
 80054c0:	6033      	str	r3, [r6, #0]
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	0699      	lsls	r1, r3, #26
 80054c6:	bf42      	ittt	mi
 80054c8:	6833      	ldrmi	r3, [r6, #0]
 80054ca:	3302      	addmi	r3, #2
 80054cc:	6033      	strmi	r3, [r6, #0]
 80054ce:	6825      	ldr	r5, [r4, #0]
 80054d0:	f015 0506 	ands.w	r5, r5, #6
 80054d4:	d106      	bne.n	80054e4 <_printf_common+0x48>
 80054d6:	f104 0a19 	add.w	sl, r4, #25
 80054da:	68e3      	ldr	r3, [r4, #12]
 80054dc:	6832      	ldr	r2, [r6, #0]
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	42ab      	cmp	r3, r5
 80054e2:	dc28      	bgt.n	8005536 <_printf_common+0x9a>
 80054e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054e8:	1e13      	subs	r3, r2, #0
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	bf18      	it	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	0692      	lsls	r2, r2, #26
 80054f2:	d42d      	bmi.n	8005550 <_printf_common+0xb4>
 80054f4:	4649      	mov	r1, r9
 80054f6:	4638      	mov	r0, r7
 80054f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054fc:	47c0      	blx	r8
 80054fe:	3001      	adds	r0, #1
 8005500:	d020      	beq.n	8005544 <_printf_common+0xa8>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	68e5      	ldr	r5, [r4, #12]
 8005506:	f003 0306 	and.w	r3, r3, #6
 800550a:	2b04      	cmp	r3, #4
 800550c:	bf18      	it	ne
 800550e:	2500      	movne	r5, #0
 8005510:	6832      	ldr	r2, [r6, #0]
 8005512:	f04f 0600 	mov.w	r6, #0
 8005516:	68a3      	ldr	r3, [r4, #8]
 8005518:	bf08      	it	eq
 800551a:	1aad      	subeq	r5, r5, r2
 800551c:	6922      	ldr	r2, [r4, #16]
 800551e:	bf08      	it	eq
 8005520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005524:	4293      	cmp	r3, r2
 8005526:	bfc4      	itt	gt
 8005528:	1a9b      	subgt	r3, r3, r2
 800552a:	18ed      	addgt	r5, r5, r3
 800552c:	341a      	adds	r4, #26
 800552e:	42b5      	cmp	r5, r6
 8005530:	d11a      	bne.n	8005568 <_printf_common+0xcc>
 8005532:	2000      	movs	r0, #0
 8005534:	e008      	b.n	8005548 <_printf_common+0xac>
 8005536:	2301      	movs	r3, #1
 8005538:	4652      	mov	r2, sl
 800553a:	4649      	mov	r1, r9
 800553c:	4638      	mov	r0, r7
 800553e:	47c0      	blx	r8
 8005540:	3001      	adds	r0, #1
 8005542:	d103      	bne.n	800554c <_printf_common+0xb0>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554c:	3501      	adds	r5, #1
 800554e:	e7c4      	b.n	80054da <_printf_common+0x3e>
 8005550:	2030      	movs	r0, #48	; 0x30
 8005552:	18e1      	adds	r1, r4, r3
 8005554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800555e:	4422      	add	r2, r4
 8005560:	3302      	adds	r3, #2
 8005562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005566:	e7c5      	b.n	80054f4 <_printf_common+0x58>
 8005568:	2301      	movs	r3, #1
 800556a:	4622      	mov	r2, r4
 800556c:	4649      	mov	r1, r9
 800556e:	4638      	mov	r0, r7
 8005570:	47c0      	blx	r8
 8005572:	3001      	adds	r0, #1
 8005574:	d0e6      	beq.n	8005544 <_printf_common+0xa8>
 8005576:	3601      	adds	r6, #1
 8005578:	e7d9      	b.n	800552e <_printf_common+0x92>
	...

0800557c <_printf_i>:
 800557c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005580:	460c      	mov	r4, r1
 8005582:	7e27      	ldrb	r7, [r4, #24]
 8005584:	4691      	mov	r9, r2
 8005586:	2f78      	cmp	r7, #120	; 0x78
 8005588:	4680      	mov	r8, r0
 800558a:	469a      	mov	sl, r3
 800558c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800558e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005592:	d807      	bhi.n	80055a4 <_printf_i+0x28>
 8005594:	2f62      	cmp	r7, #98	; 0x62
 8005596:	d80a      	bhi.n	80055ae <_printf_i+0x32>
 8005598:	2f00      	cmp	r7, #0
 800559a:	f000 80d9 	beq.w	8005750 <_printf_i+0x1d4>
 800559e:	2f58      	cmp	r7, #88	; 0x58
 80055a0:	f000 80a4 	beq.w	80056ec <_printf_i+0x170>
 80055a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055ac:	e03a      	b.n	8005624 <_printf_i+0xa8>
 80055ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055b2:	2b15      	cmp	r3, #21
 80055b4:	d8f6      	bhi.n	80055a4 <_printf_i+0x28>
 80055b6:	a001      	add	r0, pc, #4	; (adr r0, 80055bc <_printf_i+0x40>)
 80055b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055bc:	08005615 	.word	0x08005615
 80055c0:	08005629 	.word	0x08005629
 80055c4:	080055a5 	.word	0x080055a5
 80055c8:	080055a5 	.word	0x080055a5
 80055cc:	080055a5 	.word	0x080055a5
 80055d0:	080055a5 	.word	0x080055a5
 80055d4:	08005629 	.word	0x08005629
 80055d8:	080055a5 	.word	0x080055a5
 80055dc:	080055a5 	.word	0x080055a5
 80055e0:	080055a5 	.word	0x080055a5
 80055e4:	080055a5 	.word	0x080055a5
 80055e8:	08005737 	.word	0x08005737
 80055ec:	08005659 	.word	0x08005659
 80055f0:	08005719 	.word	0x08005719
 80055f4:	080055a5 	.word	0x080055a5
 80055f8:	080055a5 	.word	0x080055a5
 80055fc:	08005759 	.word	0x08005759
 8005600:	080055a5 	.word	0x080055a5
 8005604:	08005659 	.word	0x08005659
 8005608:	080055a5 	.word	0x080055a5
 800560c:	080055a5 	.word	0x080055a5
 8005610:	08005721 	.word	0x08005721
 8005614:	680b      	ldr	r3, [r1, #0]
 8005616:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800561a:	1d1a      	adds	r2, r3, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	600a      	str	r2, [r1, #0]
 8005620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005624:	2301      	movs	r3, #1
 8005626:	e0a4      	b.n	8005772 <_printf_i+0x1f6>
 8005628:	6825      	ldr	r5, [r4, #0]
 800562a:	6808      	ldr	r0, [r1, #0]
 800562c:	062e      	lsls	r6, r5, #24
 800562e:	f100 0304 	add.w	r3, r0, #4
 8005632:	d50a      	bpl.n	800564a <_printf_i+0xce>
 8005634:	6805      	ldr	r5, [r0, #0]
 8005636:	600b      	str	r3, [r1, #0]
 8005638:	2d00      	cmp	r5, #0
 800563a:	da03      	bge.n	8005644 <_printf_i+0xc8>
 800563c:	232d      	movs	r3, #45	; 0x2d
 800563e:	426d      	negs	r5, r5
 8005640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005644:	230a      	movs	r3, #10
 8005646:	485e      	ldr	r0, [pc, #376]	; (80057c0 <_printf_i+0x244>)
 8005648:	e019      	b.n	800567e <_printf_i+0x102>
 800564a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800564e:	6805      	ldr	r5, [r0, #0]
 8005650:	600b      	str	r3, [r1, #0]
 8005652:	bf18      	it	ne
 8005654:	b22d      	sxthne	r5, r5
 8005656:	e7ef      	b.n	8005638 <_printf_i+0xbc>
 8005658:	680b      	ldr	r3, [r1, #0]
 800565a:	6825      	ldr	r5, [r4, #0]
 800565c:	1d18      	adds	r0, r3, #4
 800565e:	6008      	str	r0, [r1, #0]
 8005660:	0628      	lsls	r0, r5, #24
 8005662:	d501      	bpl.n	8005668 <_printf_i+0xec>
 8005664:	681d      	ldr	r5, [r3, #0]
 8005666:	e002      	b.n	800566e <_printf_i+0xf2>
 8005668:	0669      	lsls	r1, r5, #25
 800566a:	d5fb      	bpl.n	8005664 <_printf_i+0xe8>
 800566c:	881d      	ldrh	r5, [r3, #0]
 800566e:	2f6f      	cmp	r7, #111	; 0x6f
 8005670:	bf0c      	ite	eq
 8005672:	2308      	moveq	r3, #8
 8005674:	230a      	movne	r3, #10
 8005676:	4852      	ldr	r0, [pc, #328]	; (80057c0 <_printf_i+0x244>)
 8005678:	2100      	movs	r1, #0
 800567a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800567e:	6866      	ldr	r6, [r4, #4]
 8005680:	2e00      	cmp	r6, #0
 8005682:	bfa8      	it	ge
 8005684:	6821      	ldrge	r1, [r4, #0]
 8005686:	60a6      	str	r6, [r4, #8]
 8005688:	bfa4      	itt	ge
 800568a:	f021 0104 	bicge.w	r1, r1, #4
 800568e:	6021      	strge	r1, [r4, #0]
 8005690:	b90d      	cbnz	r5, 8005696 <_printf_i+0x11a>
 8005692:	2e00      	cmp	r6, #0
 8005694:	d04d      	beq.n	8005732 <_printf_i+0x1b6>
 8005696:	4616      	mov	r6, r2
 8005698:	fbb5 f1f3 	udiv	r1, r5, r3
 800569c:	fb03 5711 	mls	r7, r3, r1, r5
 80056a0:	5dc7      	ldrb	r7, [r0, r7]
 80056a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056a6:	462f      	mov	r7, r5
 80056a8:	42bb      	cmp	r3, r7
 80056aa:	460d      	mov	r5, r1
 80056ac:	d9f4      	bls.n	8005698 <_printf_i+0x11c>
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d10b      	bne.n	80056ca <_printf_i+0x14e>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	07df      	lsls	r7, r3, #31
 80056b6:	d508      	bpl.n	80056ca <_printf_i+0x14e>
 80056b8:	6923      	ldr	r3, [r4, #16]
 80056ba:	6861      	ldr	r1, [r4, #4]
 80056bc:	4299      	cmp	r1, r3
 80056be:	bfde      	ittt	le
 80056c0:	2330      	movle	r3, #48	; 0x30
 80056c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056ca:	1b92      	subs	r2, r2, r6
 80056cc:	6122      	str	r2, [r4, #16]
 80056ce:	464b      	mov	r3, r9
 80056d0:	4621      	mov	r1, r4
 80056d2:	4640      	mov	r0, r8
 80056d4:	f8cd a000 	str.w	sl, [sp]
 80056d8:	aa03      	add	r2, sp, #12
 80056da:	f7ff fedf 	bl	800549c <_printf_common>
 80056de:	3001      	adds	r0, #1
 80056e0:	d14c      	bne.n	800577c <_printf_i+0x200>
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295
 80056e6:	b004      	add	sp, #16
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	4834      	ldr	r0, [pc, #208]	; (80057c0 <_printf_i+0x244>)
 80056ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056f2:	680e      	ldr	r6, [r1, #0]
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80056fa:	061f      	lsls	r7, r3, #24
 80056fc:	600e      	str	r6, [r1, #0]
 80056fe:	d514      	bpl.n	800572a <_printf_i+0x1ae>
 8005700:	07d9      	lsls	r1, r3, #31
 8005702:	bf44      	itt	mi
 8005704:	f043 0320 	orrmi.w	r3, r3, #32
 8005708:	6023      	strmi	r3, [r4, #0]
 800570a:	b91d      	cbnz	r5, 8005714 <_printf_i+0x198>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	f023 0320 	bic.w	r3, r3, #32
 8005712:	6023      	str	r3, [r4, #0]
 8005714:	2310      	movs	r3, #16
 8005716:	e7af      	b.n	8005678 <_printf_i+0xfc>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	f043 0320 	orr.w	r3, r3, #32
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	2378      	movs	r3, #120	; 0x78
 8005722:	4828      	ldr	r0, [pc, #160]	; (80057c4 <_printf_i+0x248>)
 8005724:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005728:	e7e3      	b.n	80056f2 <_printf_i+0x176>
 800572a:	065e      	lsls	r6, r3, #25
 800572c:	bf48      	it	mi
 800572e:	b2ad      	uxthmi	r5, r5
 8005730:	e7e6      	b.n	8005700 <_printf_i+0x184>
 8005732:	4616      	mov	r6, r2
 8005734:	e7bb      	b.n	80056ae <_printf_i+0x132>
 8005736:	680b      	ldr	r3, [r1, #0]
 8005738:	6826      	ldr	r6, [r4, #0]
 800573a:	1d1d      	adds	r5, r3, #4
 800573c:	6960      	ldr	r0, [r4, #20]
 800573e:	600d      	str	r5, [r1, #0]
 8005740:	0635      	lsls	r5, r6, #24
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	d501      	bpl.n	800574a <_printf_i+0x1ce>
 8005746:	6018      	str	r0, [r3, #0]
 8005748:	e002      	b.n	8005750 <_printf_i+0x1d4>
 800574a:	0671      	lsls	r1, r6, #25
 800574c:	d5fb      	bpl.n	8005746 <_printf_i+0x1ca>
 800574e:	8018      	strh	r0, [r3, #0]
 8005750:	2300      	movs	r3, #0
 8005752:	4616      	mov	r6, r2
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	e7ba      	b.n	80056ce <_printf_i+0x152>
 8005758:	680b      	ldr	r3, [r1, #0]
 800575a:	1d1a      	adds	r2, r3, #4
 800575c:	600a      	str	r2, [r1, #0]
 800575e:	681e      	ldr	r6, [r3, #0]
 8005760:	2100      	movs	r1, #0
 8005762:	4630      	mov	r0, r6
 8005764:	6862      	ldr	r2, [r4, #4]
 8005766:	f000 fed9 	bl	800651c <memchr>
 800576a:	b108      	cbz	r0, 8005770 <_printf_i+0x1f4>
 800576c:	1b80      	subs	r0, r0, r6
 800576e:	6060      	str	r0, [r4, #4]
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	6123      	str	r3, [r4, #16]
 8005774:	2300      	movs	r3, #0
 8005776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800577a:	e7a8      	b.n	80056ce <_printf_i+0x152>
 800577c:	4632      	mov	r2, r6
 800577e:	4649      	mov	r1, r9
 8005780:	4640      	mov	r0, r8
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	47d0      	blx	sl
 8005786:	3001      	adds	r0, #1
 8005788:	d0ab      	beq.n	80056e2 <_printf_i+0x166>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	079b      	lsls	r3, r3, #30
 800578e:	d413      	bmi.n	80057b8 <_printf_i+0x23c>
 8005790:	68e0      	ldr	r0, [r4, #12]
 8005792:	9b03      	ldr	r3, [sp, #12]
 8005794:	4298      	cmp	r0, r3
 8005796:	bfb8      	it	lt
 8005798:	4618      	movlt	r0, r3
 800579a:	e7a4      	b.n	80056e6 <_printf_i+0x16a>
 800579c:	2301      	movs	r3, #1
 800579e:	4632      	mov	r2, r6
 80057a0:	4649      	mov	r1, r9
 80057a2:	4640      	mov	r0, r8
 80057a4:	47d0      	blx	sl
 80057a6:	3001      	adds	r0, #1
 80057a8:	d09b      	beq.n	80056e2 <_printf_i+0x166>
 80057aa:	3501      	adds	r5, #1
 80057ac:	68e3      	ldr	r3, [r4, #12]
 80057ae:	9903      	ldr	r1, [sp, #12]
 80057b0:	1a5b      	subs	r3, r3, r1
 80057b2:	42ab      	cmp	r3, r5
 80057b4:	dcf2      	bgt.n	800579c <_printf_i+0x220>
 80057b6:	e7eb      	b.n	8005790 <_printf_i+0x214>
 80057b8:	2500      	movs	r5, #0
 80057ba:	f104 0619 	add.w	r6, r4, #25
 80057be:	e7f5      	b.n	80057ac <_printf_i+0x230>
 80057c0:	08007f42 	.word	0x08007f42
 80057c4:	08007f53 	.word	0x08007f53

080057c8 <siprintf>:
 80057c8:	b40e      	push	{r1, r2, r3}
 80057ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057ce:	b500      	push	{lr}
 80057d0:	b09c      	sub	sp, #112	; 0x70
 80057d2:	ab1d      	add	r3, sp, #116	; 0x74
 80057d4:	9002      	str	r0, [sp, #8]
 80057d6:	9006      	str	r0, [sp, #24]
 80057d8:	9107      	str	r1, [sp, #28]
 80057da:	9104      	str	r1, [sp, #16]
 80057dc:	4808      	ldr	r0, [pc, #32]	; (8005800 <siprintf+0x38>)
 80057de:	4909      	ldr	r1, [pc, #36]	; (8005804 <siprintf+0x3c>)
 80057e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e4:	9105      	str	r1, [sp, #20]
 80057e6:	6800      	ldr	r0, [r0, #0]
 80057e8:	a902      	add	r1, sp, #8
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	f001 fb44 	bl	8006e78 <_svfiprintf_r>
 80057f0:	2200      	movs	r2, #0
 80057f2:	9b02      	ldr	r3, [sp, #8]
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	b01c      	add	sp, #112	; 0x70
 80057f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057fc:	b003      	add	sp, #12
 80057fe:	4770      	bx	lr
 8005800:	2000000c 	.word	0x2000000c
 8005804:	ffff0208 	.word	0xffff0208

08005808 <quorem>:
 8005808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580c:	6903      	ldr	r3, [r0, #16]
 800580e:	690c      	ldr	r4, [r1, #16]
 8005810:	4607      	mov	r7, r0
 8005812:	42a3      	cmp	r3, r4
 8005814:	f2c0 8083 	blt.w	800591e <quorem+0x116>
 8005818:	3c01      	subs	r4, #1
 800581a:	f100 0514 	add.w	r5, r0, #20
 800581e:	f101 0814 	add.w	r8, r1, #20
 8005822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800582c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005830:	3301      	adds	r3, #1
 8005832:	429a      	cmp	r2, r3
 8005834:	fbb2 f6f3 	udiv	r6, r2, r3
 8005838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800583c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005840:	d332      	bcc.n	80058a8 <quorem+0xa0>
 8005842:	f04f 0e00 	mov.w	lr, #0
 8005846:	4640      	mov	r0, r8
 8005848:	46ac      	mov	ip, r5
 800584a:	46f2      	mov	sl, lr
 800584c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005850:	b293      	uxth	r3, r2
 8005852:	fb06 e303 	mla	r3, r6, r3, lr
 8005856:	0c12      	lsrs	r2, r2, #16
 8005858:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800585c:	fb06 e202 	mla	r2, r6, r2, lr
 8005860:	b29b      	uxth	r3, r3
 8005862:	ebaa 0303 	sub.w	r3, sl, r3
 8005866:	f8dc a000 	ldr.w	sl, [ip]
 800586a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800586e:	fa1f fa8a 	uxth.w	sl, sl
 8005872:	4453      	add	r3, sl
 8005874:	fa1f fa82 	uxth.w	sl, r2
 8005878:	f8dc 2000 	ldr.w	r2, [ip]
 800587c:	4581      	cmp	r9, r0
 800587e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005882:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005886:	b29b      	uxth	r3, r3
 8005888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800588c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005890:	f84c 3b04 	str.w	r3, [ip], #4
 8005894:	d2da      	bcs.n	800584c <quorem+0x44>
 8005896:	f855 300b 	ldr.w	r3, [r5, fp]
 800589a:	b92b      	cbnz	r3, 80058a8 <quorem+0xa0>
 800589c:	9b01      	ldr	r3, [sp, #4]
 800589e:	3b04      	subs	r3, #4
 80058a0:	429d      	cmp	r5, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	d32f      	bcc.n	8005906 <quorem+0xfe>
 80058a6:	613c      	str	r4, [r7, #16]
 80058a8:	4638      	mov	r0, r7
 80058aa:	f001 f8cd 	bl	8006a48 <__mcmp>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	db25      	blt.n	80058fe <quorem+0xf6>
 80058b2:	4628      	mov	r0, r5
 80058b4:	f04f 0c00 	mov.w	ip, #0
 80058b8:	3601      	adds	r6, #1
 80058ba:	f858 1b04 	ldr.w	r1, [r8], #4
 80058be:	f8d0 e000 	ldr.w	lr, [r0]
 80058c2:	b28b      	uxth	r3, r1
 80058c4:	ebac 0303 	sub.w	r3, ip, r3
 80058c8:	fa1f f28e 	uxth.w	r2, lr
 80058cc:	4413      	add	r3, r2
 80058ce:	0c0a      	lsrs	r2, r1, #16
 80058d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058de:	45c1      	cmp	r9, r8
 80058e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058e4:	f840 3b04 	str.w	r3, [r0], #4
 80058e8:	d2e7      	bcs.n	80058ba <quorem+0xb2>
 80058ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058f2:	b922      	cbnz	r2, 80058fe <quorem+0xf6>
 80058f4:	3b04      	subs	r3, #4
 80058f6:	429d      	cmp	r5, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	d30a      	bcc.n	8005912 <quorem+0x10a>
 80058fc:	613c      	str	r4, [r7, #16]
 80058fe:	4630      	mov	r0, r6
 8005900:	b003      	add	sp, #12
 8005902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	3b04      	subs	r3, #4
 800590a:	2a00      	cmp	r2, #0
 800590c:	d1cb      	bne.n	80058a6 <quorem+0x9e>
 800590e:	3c01      	subs	r4, #1
 8005910:	e7c6      	b.n	80058a0 <quorem+0x98>
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	3b04      	subs	r3, #4
 8005916:	2a00      	cmp	r2, #0
 8005918:	d1f0      	bne.n	80058fc <quorem+0xf4>
 800591a:	3c01      	subs	r4, #1
 800591c:	e7eb      	b.n	80058f6 <quorem+0xee>
 800591e:	2000      	movs	r0, #0
 8005920:	e7ee      	b.n	8005900 <quorem+0xf8>
 8005922:	0000      	movs	r0, r0
 8005924:	0000      	movs	r0, r0
	...

08005928 <_dtoa_r>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	4616      	mov	r6, r2
 800592e:	461f      	mov	r7, r3
 8005930:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005932:	b099      	sub	sp, #100	; 0x64
 8005934:	4605      	mov	r5, r0
 8005936:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800593a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800593e:	b974      	cbnz	r4, 800595e <_dtoa_r+0x36>
 8005940:	2010      	movs	r0, #16
 8005942:	f000 fde3 	bl	800650c <malloc>
 8005946:	4602      	mov	r2, r0
 8005948:	6268      	str	r0, [r5, #36]	; 0x24
 800594a:	b920      	cbnz	r0, 8005956 <_dtoa_r+0x2e>
 800594c:	21ea      	movs	r1, #234	; 0xea
 800594e:	4bae      	ldr	r3, [pc, #696]	; (8005c08 <_dtoa_r+0x2e0>)
 8005950:	48ae      	ldr	r0, [pc, #696]	; (8005c0c <_dtoa_r+0x2e4>)
 8005952:	f001 fba1 	bl	8007098 <__assert_func>
 8005956:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800595a:	6004      	str	r4, [r0, #0]
 800595c:	60c4      	str	r4, [r0, #12]
 800595e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005960:	6819      	ldr	r1, [r3, #0]
 8005962:	b151      	cbz	r1, 800597a <_dtoa_r+0x52>
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	2301      	movs	r3, #1
 8005968:	4093      	lsls	r3, r2
 800596a:	604a      	str	r2, [r1, #4]
 800596c:	608b      	str	r3, [r1, #8]
 800596e:	4628      	mov	r0, r5
 8005970:	f000 fe30 	bl	80065d4 <_Bfree>
 8005974:	2200      	movs	r2, #0
 8005976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	1e3b      	subs	r3, r7, #0
 800597c:	bfaf      	iteee	ge
 800597e:	2300      	movge	r3, #0
 8005980:	2201      	movlt	r2, #1
 8005982:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005986:	9305      	strlt	r3, [sp, #20]
 8005988:	bfa8      	it	ge
 800598a:	f8c8 3000 	strge.w	r3, [r8]
 800598e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005992:	4b9f      	ldr	r3, [pc, #636]	; (8005c10 <_dtoa_r+0x2e8>)
 8005994:	bfb8      	it	lt
 8005996:	f8c8 2000 	strlt.w	r2, [r8]
 800599a:	ea33 0309 	bics.w	r3, r3, r9
 800599e:	d119      	bne.n	80059d4 <_dtoa_r+0xac>
 80059a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80059a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059ac:	4333      	orrs	r3, r6
 80059ae:	f000 8580 	beq.w	80064b2 <_dtoa_r+0xb8a>
 80059b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059b4:	b953      	cbnz	r3, 80059cc <_dtoa_r+0xa4>
 80059b6:	4b97      	ldr	r3, [pc, #604]	; (8005c14 <_dtoa_r+0x2ec>)
 80059b8:	e022      	b.n	8005a00 <_dtoa_r+0xd8>
 80059ba:	4b97      	ldr	r3, [pc, #604]	; (8005c18 <_dtoa_r+0x2f0>)
 80059bc:	9308      	str	r3, [sp, #32]
 80059be:	3308      	adds	r3, #8
 80059c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	9808      	ldr	r0, [sp, #32]
 80059c6:	b019      	add	sp, #100	; 0x64
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	4b91      	ldr	r3, [pc, #580]	; (8005c14 <_dtoa_r+0x2ec>)
 80059ce:	9308      	str	r3, [sp, #32]
 80059d0:	3303      	adds	r3, #3
 80059d2:	e7f5      	b.n	80059c0 <_dtoa_r+0x98>
 80059d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80059dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059e0:	2200      	movs	r2, #0
 80059e2:	2300      	movs	r3, #0
 80059e4:	f7fb f840 	bl	8000a68 <__aeabi_dcmpeq>
 80059e8:	4680      	mov	r8, r0
 80059ea:	b158      	cbz	r0, 8005a04 <_dtoa_r+0xdc>
 80059ec:	2301      	movs	r3, #1
 80059ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8559 	beq.w	80064ac <_dtoa_r+0xb84>
 80059fa:	4888      	ldr	r0, [pc, #544]	; (8005c1c <_dtoa_r+0x2f4>)
 80059fc:	6018      	str	r0, [r3, #0]
 80059fe:	1e43      	subs	r3, r0, #1
 8005a00:	9308      	str	r3, [sp, #32]
 8005a02:	e7df      	b.n	80059c4 <_dtoa_r+0x9c>
 8005a04:	ab16      	add	r3, sp, #88	; 0x58
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	ab17      	add	r3, sp, #92	; 0x5c
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a12:	f001 f8c5 	bl	8006ba0 <__d2b>
 8005a16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005a1a:	4682      	mov	sl, r0
 8005a1c:	2c00      	cmp	r4, #0
 8005a1e:	d07e      	beq.n	8005b1e <_dtoa_r+0x1f6>
 8005a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005a2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005a32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005a36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4b78      	ldr	r3, [pc, #480]	; (8005c20 <_dtoa_r+0x2f8>)
 8005a3e:	f7fa fbf3 	bl	8000228 <__aeabi_dsub>
 8005a42:	a36b      	add	r3, pc, #428	; (adr r3, 8005bf0 <_dtoa_r+0x2c8>)
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f7fa fda6 	bl	8000598 <__aeabi_dmul>
 8005a4c:	a36a      	add	r3, pc, #424	; (adr r3, 8005bf8 <_dtoa_r+0x2d0>)
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f7fa fbeb 	bl	800022c <__adddf3>
 8005a56:	4606      	mov	r6, r0
 8005a58:	4620      	mov	r0, r4
 8005a5a:	460f      	mov	r7, r1
 8005a5c:	f7fa fd32 	bl	80004c4 <__aeabi_i2d>
 8005a60:	a367      	add	r3, pc, #412	; (adr r3, 8005c00 <_dtoa_r+0x2d8>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f7fa fd97 	bl	8000598 <__aeabi_dmul>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4630      	mov	r0, r6
 8005a70:	4639      	mov	r1, r7
 8005a72:	f7fa fbdb 	bl	800022c <__adddf3>
 8005a76:	4606      	mov	r6, r0
 8005a78:	460f      	mov	r7, r1
 8005a7a:	f7fb f83d 	bl	8000af8 <__aeabi_d2iz>
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4681      	mov	r9, r0
 8005a82:	2300      	movs	r3, #0
 8005a84:	4630      	mov	r0, r6
 8005a86:	4639      	mov	r1, r7
 8005a88:	f7fa fff8 	bl	8000a7c <__aeabi_dcmplt>
 8005a8c:	b148      	cbz	r0, 8005aa2 <_dtoa_r+0x17a>
 8005a8e:	4648      	mov	r0, r9
 8005a90:	f7fa fd18 	bl	80004c4 <__aeabi_i2d>
 8005a94:	4632      	mov	r2, r6
 8005a96:	463b      	mov	r3, r7
 8005a98:	f7fa ffe6 	bl	8000a68 <__aeabi_dcmpeq>
 8005a9c:	b908      	cbnz	r0, 8005aa2 <_dtoa_r+0x17a>
 8005a9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005aa2:	f1b9 0f16 	cmp.w	r9, #22
 8005aa6:	d857      	bhi.n	8005b58 <_dtoa_r+0x230>
 8005aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aac:	4b5d      	ldr	r3, [pc, #372]	; (8005c24 <_dtoa_r+0x2fc>)
 8005aae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa ffe1 	bl	8000a7c <__aeabi_dcmplt>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d04e      	beq.n	8005b5c <_dtoa_r+0x234>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ac8:	1b1c      	subs	r4, r3, r4
 8005aca:	1e63      	subs	r3, r4, #1
 8005acc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ace:	bf49      	itett	mi
 8005ad0:	f1c4 0301 	rsbmi	r3, r4, #1
 8005ad4:	2300      	movpl	r3, #0
 8005ad6:	9306      	strmi	r3, [sp, #24]
 8005ad8:	2300      	movmi	r3, #0
 8005ada:	bf54      	ite	pl
 8005adc:	9306      	strpl	r3, [sp, #24]
 8005ade:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ae0:	f1b9 0f00 	cmp.w	r9, #0
 8005ae4:	db3c      	blt.n	8005b60 <_dtoa_r+0x238>
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005aec:	444b      	add	r3, r9
 8005aee:	9309      	str	r3, [sp, #36]	; 0x24
 8005af0:	2300      	movs	r3, #0
 8005af2:	930a      	str	r3, [sp, #40]	; 0x28
 8005af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005af6:	2b09      	cmp	r3, #9
 8005af8:	d86c      	bhi.n	8005bd4 <_dtoa_r+0x2ac>
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	bfc4      	itt	gt
 8005afe:	3b04      	subgt	r3, #4
 8005b00:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005b02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b04:	bfc8      	it	gt
 8005b06:	2400      	movgt	r4, #0
 8005b08:	f1a3 0302 	sub.w	r3, r3, #2
 8005b0c:	bfd8      	it	le
 8005b0e:	2401      	movle	r4, #1
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	f200 808b 	bhi.w	8005c2c <_dtoa_r+0x304>
 8005b16:	e8df f003 	tbb	[pc, r3]
 8005b1a:	4f2d      	.short	0x4f2d
 8005b1c:	5b4d      	.short	0x5b4d
 8005b1e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005b22:	441c      	add	r4, r3
 8005b24:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	bfc3      	ittte	gt
 8005b2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b30:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005b34:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b38:	f1c3 0320 	rsble	r3, r3, #32
 8005b3c:	bfc6      	itte	gt
 8005b3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b42:	4318      	orrgt	r0, r3
 8005b44:	fa06 f003 	lslle.w	r0, r6, r3
 8005b48:	f7fa fcac 	bl	80004a4 <__aeabi_ui2d>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005b52:	3c01      	subs	r4, #1
 8005b54:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b56:	e770      	b.n	8005a3a <_dtoa_r+0x112>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e7b3      	b.n	8005ac4 <_dtoa_r+0x19c>
 8005b5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b5e:	e7b2      	b.n	8005ac6 <_dtoa_r+0x19e>
 8005b60:	9b06      	ldr	r3, [sp, #24]
 8005b62:	eba3 0309 	sub.w	r3, r3, r9
 8005b66:	9306      	str	r3, [sp, #24]
 8005b68:	f1c9 0300 	rsb	r3, r9, #0
 8005b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b6e:	2300      	movs	r3, #0
 8005b70:	930e      	str	r3, [sp, #56]	; 0x38
 8005b72:	e7bf      	b.n	8005af4 <_dtoa_r+0x1cc>
 8005b74:	2300      	movs	r3, #0
 8005b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dc59      	bgt.n	8005c32 <_dtoa_r+0x30a>
 8005b7e:	f04f 0b01 	mov.w	fp, #1
 8005b82:	465b      	mov	r3, fp
 8005b84:	f8cd b008 	str.w	fp, [sp, #8]
 8005b88:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005b90:	6042      	str	r2, [r0, #4]
 8005b92:	2204      	movs	r2, #4
 8005b94:	f102 0614 	add.w	r6, r2, #20
 8005b98:	429e      	cmp	r6, r3
 8005b9a:	6841      	ldr	r1, [r0, #4]
 8005b9c:	d94f      	bls.n	8005c3e <_dtoa_r+0x316>
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fcd8 	bl	8006554 <_Balloc>
 8005ba4:	9008      	str	r0, [sp, #32]
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d14d      	bne.n	8005c46 <_dtoa_r+0x31e>
 8005baa:	4602      	mov	r2, r0
 8005bac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <_dtoa_r+0x300>)
 8005bb2:	e6cd      	b.n	8005950 <_dtoa_r+0x28>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e7de      	b.n	8005b76 <_dtoa_r+0x24e>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bbe:	eb09 0b03 	add.w	fp, r9, r3
 8005bc2:	f10b 0301 	add.w	r3, fp, #1
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	9302      	str	r3, [sp, #8]
 8005bca:	bfb8      	it	lt
 8005bcc:	2301      	movlt	r3, #1
 8005bce:	e7dd      	b.n	8005b8c <_dtoa_r+0x264>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e7f2      	b.n	8005bba <_dtoa_r+0x292>
 8005bd4:	2401      	movs	r4, #1
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005bda:	9322      	str	r3, [sp, #136]	; 0x88
 8005bdc:	f04f 3bff 	mov.w	fp, #4294967295
 8005be0:	2200      	movs	r2, #0
 8005be2:	2312      	movs	r3, #18
 8005be4:	f8cd b008 	str.w	fp, [sp, #8]
 8005be8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005bea:	e7cf      	b.n	8005b8c <_dtoa_r+0x264>
 8005bec:	f3af 8000 	nop.w
 8005bf0:	636f4361 	.word	0x636f4361
 8005bf4:	3fd287a7 	.word	0x3fd287a7
 8005bf8:	8b60c8b3 	.word	0x8b60c8b3
 8005bfc:	3fc68a28 	.word	0x3fc68a28
 8005c00:	509f79fb 	.word	0x509f79fb
 8005c04:	3fd34413 	.word	0x3fd34413
 8005c08:	08007f71 	.word	0x08007f71
 8005c0c:	08007f88 	.word	0x08007f88
 8005c10:	7ff00000 	.word	0x7ff00000
 8005c14:	08007f6d 	.word	0x08007f6d
 8005c18:	08007f64 	.word	0x08007f64
 8005c1c:	08007f41 	.word	0x08007f41
 8005c20:	3ff80000 	.word	0x3ff80000
 8005c24:	08008080 	.word	0x08008080
 8005c28:	08007fe7 	.word	0x08007fe7
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c30:	e7d4      	b.n	8005bdc <_dtoa_r+0x2b4>
 8005c32:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005c36:	465b      	mov	r3, fp
 8005c38:	f8cd b008 	str.w	fp, [sp, #8]
 8005c3c:	e7a6      	b.n	8005b8c <_dtoa_r+0x264>
 8005c3e:	3101      	adds	r1, #1
 8005c40:	6041      	str	r1, [r0, #4]
 8005c42:	0052      	lsls	r2, r2, #1
 8005c44:	e7a6      	b.n	8005b94 <_dtoa_r+0x26c>
 8005c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c48:	9a08      	ldr	r2, [sp, #32]
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	9b02      	ldr	r3, [sp, #8]
 8005c4e:	2b0e      	cmp	r3, #14
 8005c50:	f200 80a8 	bhi.w	8005da4 <_dtoa_r+0x47c>
 8005c54:	2c00      	cmp	r4, #0
 8005c56:	f000 80a5 	beq.w	8005da4 <_dtoa_r+0x47c>
 8005c5a:	f1b9 0f00 	cmp.w	r9, #0
 8005c5e:	dd34      	ble.n	8005cca <_dtoa_r+0x3a2>
 8005c60:	4a9a      	ldr	r2, [pc, #616]	; (8005ecc <_dtoa_r+0x5a4>)
 8005c62:	f009 030f 	and.w	r3, r9, #15
 8005c66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c6a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005c6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c76:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005c7a:	d016      	beq.n	8005caa <_dtoa_r+0x382>
 8005c7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c80:	4b93      	ldr	r3, [pc, #588]	; (8005ed0 <_dtoa_r+0x5a8>)
 8005c82:	2703      	movs	r7, #3
 8005c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c88:	f7fa fdb0 	bl	80007ec <__aeabi_ddiv>
 8005c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c90:	f004 040f 	and.w	r4, r4, #15
 8005c94:	4e8e      	ldr	r6, [pc, #568]	; (8005ed0 <_dtoa_r+0x5a8>)
 8005c96:	b954      	cbnz	r4, 8005cae <_dtoa_r+0x386>
 8005c98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ca0:	f7fa fda4 	bl	80007ec <__aeabi_ddiv>
 8005ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ca8:	e029      	b.n	8005cfe <_dtoa_r+0x3d6>
 8005caa:	2702      	movs	r7, #2
 8005cac:	e7f2      	b.n	8005c94 <_dtoa_r+0x36c>
 8005cae:	07e1      	lsls	r1, r4, #31
 8005cb0:	d508      	bpl.n	8005cc4 <_dtoa_r+0x39c>
 8005cb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cba:	f7fa fc6d 	bl	8000598 <__aeabi_dmul>
 8005cbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cc2:	3701      	adds	r7, #1
 8005cc4:	1064      	asrs	r4, r4, #1
 8005cc6:	3608      	adds	r6, #8
 8005cc8:	e7e5      	b.n	8005c96 <_dtoa_r+0x36e>
 8005cca:	f000 80a5 	beq.w	8005e18 <_dtoa_r+0x4f0>
 8005cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cd2:	f1c9 0400 	rsb	r4, r9, #0
 8005cd6:	4b7d      	ldr	r3, [pc, #500]	; (8005ecc <_dtoa_r+0x5a4>)
 8005cd8:	f004 020f 	and.w	r2, r4, #15
 8005cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f7fa fc58 	bl	8000598 <__aeabi_dmul>
 8005ce8:	2702      	movs	r7, #2
 8005cea:	2300      	movs	r3, #0
 8005cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cf0:	4e77      	ldr	r6, [pc, #476]	; (8005ed0 <_dtoa_r+0x5a8>)
 8005cf2:	1124      	asrs	r4, r4, #4
 8005cf4:	2c00      	cmp	r4, #0
 8005cf6:	f040 8084 	bne.w	8005e02 <_dtoa_r+0x4da>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1d2      	bne.n	8005ca4 <_dtoa_r+0x37c>
 8005cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 808b 	beq.w	8005e1c <_dtoa_r+0x4f4>
 8005d06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d12:	2200      	movs	r2, #0
 8005d14:	4b6f      	ldr	r3, [pc, #444]	; (8005ed4 <_dtoa_r+0x5ac>)
 8005d16:	f7fa feb1 	bl	8000a7c <__aeabi_dcmplt>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d07e      	beq.n	8005e1c <_dtoa_r+0x4f4>
 8005d1e:	9b02      	ldr	r3, [sp, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d07b      	beq.n	8005e1c <_dtoa_r+0x4f4>
 8005d24:	f1bb 0f00 	cmp.w	fp, #0
 8005d28:	dd38      	ble.n	8005d9c <_dtoa_r+0x474>
 8005d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4b69      	ldr	r3, [pc, #420]	; (8005ed8 <_dtoa_r+0x5b0>)
 8005d32:	f7fa fc31 	bl	8000598 <__aeabi_dmul>
 8005d36:	465c      	mov	r4, fp
 8005d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d3c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005d40:	3701      	adds	r7, #1
 8005d42:	4638      	mov	r0, r7
 8005d44:	f7fa fbbe 	bl	80004c4 <__aeabi_i2d>
 8005d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d4c:	f7fa fc24 	bl	8000598 <__aeabi_dmul>
 8005d50:	2200      	movs	r2, #0
 8005d52:	4b62      	ldr	r3, [pc, #392]	; (8005edc <_dtoa_r+0x5b4>)
 8005d54:	f7fa fa6a 	bl	800022c <__adddf3>
 8005d58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005d5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d60:	9611      	str	r6, [sp, #68]	; 0x44
 8005d62:	2c00      	cmp	r4, #0
 8005d64:	d15d      	bne.n	8005e22 <_dtoa_r+0x4fa>
 8005d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4b5c      	ldr	r3, [pc, #368]	; (8005ee0 <_dtoa_r+0x5b8>)
 8005d6e:	f7fa fa5b 	bl	8000228 <__aeabi_dsub>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d7a:	4633      	mov	r3, r6
 8005d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d7e:	f7fa fe9b 	bl	8000ab8 <__aeabi_dcmpgt>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	f040 829e 	bne.w	80062c4 <_dtoa_r+0x99c>
 8005d88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d92:	f7fa fe73 	bl	8000a7c <__aeabi_dcmplt>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f040 8292 	bne.w	80062c0 <_dtoa_r+0x998>
 8005d9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005da0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f2c0 8153 	blt.w	8006052 <_dtoa_r+0x72a>
 8005dac:	f1b9 0f0e 	cmp.w	r9, #14
 8005db0:	f300 814f 	bgt.w	8006052 <_dtoa_r+0x72a>
 8005db4:	4b45      	ldr	r3, [pc, #276]	; (8005ecc <_dtoa_r+0x5a4>)
 8005db6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005dba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f280 80db 	bge.w	8005f80 <_dtoa_r+0x658>
 8005dca:	9b02      	ldr	r3, [sp, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f300 80d7 	bgt.w	8005f80 <_dtoa_r+0x658>
 8005dd2:	f040 8274 	bne.w	80062be <_dtoa_r+0x996>
 8005dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4b40      	ldr	r3, [pc, #256]	; (8005ee0 <_dtoa_r+0x5b8>)
 8005dde:	f7fa fbdb 	bl	8000598 <__aeabi_dmul>
 8005de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005de6:	f7fa fe5d 	bl	8000aa4 <__aeabi_dcmpge>
 8005dea:	9c02      	ldr	r4, [sp, #8]
 8005dec:	4626      	mov	r6, r4
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f040 824a 	bne.w	8006288 <_dtoa_r+0x960>
 8005df4:	2331      	movs	r3, #49	; 0x31
 8005df6:	9f08      	ldr	r7, [sp, #32]
 8005df8:	f109 0901 	add.w	r9, r9, #1
 8005dfc:	f807 3b01 	strb.w	r3, [r7], #1
 8005e00:	e246      	b.n	8006290 <_dtoa_r+0x968>
 8005e02:	07e2      	lsls	r2, r4, #31
 8005e04:	d505      	bpl.n	8005e12 <_dtoa_r+0x4ea>
 8005e06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e0a:	f7fa fbc5 	bl	8000598 <__aeabi_dmul>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	3701      	adds	r7, #1
 8005e12:	1064      	asrs	r4, r4, #1
 8005e14:	3608      	adds	r6, #8
 8005e16:	e76d      	b.n	8005cf4 <_dtoa_r+0x3cc>
 8005e18:	2702      	movs	r7, #2
 8005e1a:	e770      	b.n	8005cfe <_dtoa_r+0x3d6>
 8005e1c:	46c8      	mov	r8, r9
 8005e1e:	9c02      	ldr	r4, [sp, #8]
 8005e20:	e78f      	b.n	8005d42 <_dtoa_r+0x41a>
 8005e22:	9908      	ldr	r1, [sp, #32]
 8005e24:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <_dtoa_r+0x5a4>)
 8005e26:	4421      	add	r1, r4
 8005e28:	9112      	str	r1, [sp, #72]	; 0x48
 8005e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	d055      	beq.n	8005ee8 <_dtoa_r+0x5c0>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	4929      	ldr	r1, [pc, #164]	; (8005ee4 <_dtoa_r+0x5bc>)
 8005e40:	f7fa fcd4 	bl	80007ec <__aeabi_ddiv>
 8005e44:	463b      	mov	r3, r7
 8005e46:	4632      	mov	r2, r6
 8005e48:	f7fa f9ee 	bl	8000228 <__aeabi_dsub>
 8005e4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e50:	9f08      	ldr	r7, [sp, #32]
 8005e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e56:	f7fa fe4f 	bl	8000af8 <__aeabi_d2iz>
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	f7fa fb32 	bl	80004c4 <__aeabi_i2d>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e68:	f7fa f9de 	bl	8000228 <__aeabi_dsub>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	3430      	adds	r4, #48	; 0x30
 8005e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e7a:	f807 4b01 	strb.w	r4, [r7], #1
 8005e7e:	f7fa fdfd 	bl	8000a7c <__aeabi_dcmplt>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d174      	bne.n	8005f70 <_dtoa_r+0x648>
 8005e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	4911      	ldr	r1, [pc, #68]	; (8005ed4 <_dtoa_r+0x5ac>)
 8005e8e:	f7fa f9cb 	bl	8000228 <__aeabi_dsub>
 8005e92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e96:	f7fa fdf1 	bl	8000a7c <__aeabi_dcmplt>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	f040 80b6 	bne.w	800600c <_dtoa_r+0x6e4>
 8005ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ea2:	429f      	cmp	r7, r3
 8005ea4:	f43f af7a 	beq.w	8005d9c <_dtoa_r+0x474>
 8005ea8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005eac:	2200      	movs	r2, #0
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <_dtoa_r+0x5b0>)
 8005eb0:	f7fa fb72 	bl	8000598 <__aeabi_dmul>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <_dtoa_r+0x5b0>)
 8005ec0:	f7fa fb6a 	bl	8000598 <__aeabi_dmul>
 8005ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ec8:	e7c3      	b.n	8005e52 <_dtoa_r+0x52a>
 8005eca:	bf00      	nop
 8005ecc:	08008080 	.word	0x08008080
 8005ed0:	08008058 	.word	0x08008058
 8005ed4:	3ff00000 	.word	0x3ff00000
 8005ed8:	40240000 	.word	0x40240000
 8005edc:	401c0000 	.word	0x401c0000
 8005ee0:	40140000 	.word	0x40140000
 8005ee4:	3fe00000 	.word	0x3fe00000
 8005ee8:	4630      	mov	r0, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	f7fa fb54 	bl	8000598 <__aeabi_dmul>
 8005ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ef2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ef6:	9c08      	ldr	r4, [sp, #32]
 8005ef8:	9314      	str	r3, [sp, #80]	; 0x50
 8005efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005efe:	f7fa fdfb 	bl	8000af8 <__aeabi_d2iz>
 8005f02:	9015      	str	r0, [sp, #84]	; 0x54
 8005f04:	f7fa fade 	bl	80004c4 <__aeabi_i2d>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f10:	f7fa f98a 	bl	8000228 <__aeabi_dsub>
 8005f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f16:	4606      	mov	r6, r0
 8005f18:	3330      	adds	r3, #48	; 0x30
 8005f1a:	f804 3b01 	strb.w	r3, [r4], #1
 8005f1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f20:	460f      	mov	r7, r1
 8005f22:	429c      	cmp	r4, r3
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	d124      	bne.n	8005f74 <_dtoa_r+0x64c>
 8005f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f2e:	4bb3      	ldr	r3, [pc, #716]	; (80061fc <_dtoa_r+0x8d4>)
 8005f30:	f7fa f97c 	bl	800022c <__adddf3>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4630      	mov	r0, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	f7fa fdbc 	bl	8000ab8 <__aeabi_dcmpgt>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d162      	bne.n	800600a <_dtoa_r+0x6e2>
 8005f44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f48:	2000      	movs	r0, #0
 8005f4a:	49ac      	ldr	r1, [pc, #688]	; (80061fc <_dtoa_r+0x8d4>)
 8005f4c:	f7fa f96c 	bl	8000228 <__aeabi_dsub>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4630      	mov	r0, r6
 8005f56:	4639      	mov	r1, r7
 8005f58:	f7fa fd90 	bl	8000a7c <__aeabi_dcmplt>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f43f af1d 	beq.w	8005d9c <_dtoa_r+0x474>
 8005f62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005f64:	1e7b      	subs	r3, r7, #1
 8005f66:	9314      	str	r3, [sp, #80]	; 0x50
 8005f68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005f6c:	2b30      	cmp	r3, #48	; 0x30
 8005f6e:	d0f8      	beq.n	8005f62 <_dtoa_r+0x63a>
 8005f70:	46c1      	mov	r9, r8
 8005f72:	e03a      	b.n	8005fea <_dtoa_r+0x6c2>
 8005f74:	4ba2      	ldr	r3, [pc, #648]	; (8006200 <_dtoa_r+0x8d8>)
 8005f76:	f7fa fb0f 	bl	8000598 <__aeabi_dmul>
 8005f7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f7e:	e7bc      	b.n	8005efa <_dtoa_r+0x5d2>
 8005f80:	9f08      	ldr	r7, [sp, #32]
 8005f82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f8a:	f7fa fc2f 	bl	80007ec <__aeabi_ddiv>
 8005f8e:	f7fa fdb3 	bl	8000af8 <__aeabi_d2iz>
 8005f92:	4604      	mov	r4, r0
 8005f94:	f7fa fa96 	bl	80004c4 <__aeabi_i2d>
 8005f98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f9c:	f7fa fafc 	bl	8000598 <__aeabi_dmul>
 8005fa0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fac:	f7fa f93c 	bl	8000228 <__aeabi_dsub>
 8005fb0:	f807 6b01 	strb.w	r6, [r7], #1
 8005fb4:	9e08      	ldr	r6, [sp, #32]
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	1bbe      	subs	r6, r7, r6
 8005fba:	42b3      	cmp	r3, r6
 8005fbc:	d13a      	bne.n	8006034 <_dtoa_r+0x70c>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	f7fa f933 	bl	800022c <__adddf3>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fd2:	f7fa fd71 	bl	8000ab8 <__aeabi_dcmpgt>
 8005fd6:	bb58      	cbnz	r0, 8006030 <_dtoa_r+0x708>
 8005fd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fe0:	f7fa fd42 	bl	8000a68 <__aeabi_dcmpeq>
 8005fe4:	b108      	cbz	r0, 8005fea <_dtoa_r+0x6c2>
 8005fe6:	07e1      	lsls	r1, r4, #31
 8005fe8:	d422      	bmi.n	8006030 <_dtoa_r+0x708>
 8005fea:	4628      	mov	r0, r5
 8005fec:	4651      	mov	r1, sl
 8005fee:	f000 faf1 	bl	80065d4 <_Bfree>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	703b      	strb	r3, [r7, #0]
 8005ff6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ff8:	f109 0001 	add.w	r0, r9, #1
 8005ffc:	6018      	str	r0, [r3, #0]
 8005ffe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006000:	2b00      	cmp	r3, #0
 8006002:	f43f acdf 	beq.w	80059c4 <_dtoa_r+0x9c>
 8006006:	601f      	str	r7, [r3, #0]
 8006008:	e4dc      	b.n	80059c4 <_dtoa_r+0x9c>
 800600a:	4627      	mov	r7, r4
 800600c:	463b      	mov	r3, r7
 800600e:	461f      	mov	r7, r3
 8006010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006014:	2a39      	cmp	r2, #57	; 0x39
 8006016:	d107      	bne.n	8006028 <_dtoa_r+0x700>
 8006018:	9a08      	ldr	r2, [sp, #32]
 800601a:	429a      	cmp	r2, r3
 800601c:	d1f7      	bne.n	800600e <_dtoa_r+0x6e6>
 800601e:	2230      	movs	r2, #48	; 0x30
 8006020:	9908      	ldr	r1, [sp, #32]
 8006022:	f108 0801 	add.w	r8, r8, #1
 8006026:	700a      	strb	r2, [r1, #0]
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	3201      	adds	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	e79f      	b.n	8005f70 <_dtoa_r+0x648>
 8006030:	46c8      	mov	r8, r9
 8006032:	e7eb      	b.n	800600c <_dtoa_r+0x6e4>
 8006034:	2200      	movs	r2, #0
 8006036:	4b72      	ldr	r3, [pc, #456]	; (8006200 <_dtoa_r+0x8d8>)
 8006038:	f7fa faae 	bl	8000598 <__aeabi_dmul>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	f7fa fd0e 	bl	8000a68 <__aeabi_dcmpeq>
 800604c:	2800      	cmp	r0, #0
 800604e:	d098      	beq.n	8005f82 <_dtoa_r+0x65a>
 8006050:	e7cb      	b.n	8005fea <_dtoa_r+0x6c2>
 8006052:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006054:	2a00      	cmp	r2, #0
 8006056:	f000 80cd 	beq.w	80061f4 <_dtoa_r+0x8cc>
 800605a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800605c:	2a01      	cmp	r2, #1
 800605e:	f300 80af 	bgt.w	80061c0 <_dtoa_r+0x898>
 8006062:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006064:	2a00      	cmp	r2, #0
 8006066:	f000 80a7 	beq.w	80061b8 <_dtoa_r+0x890>
 800606a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800606e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006070:	9f06      	ldr	r7, [sp, #24]
 8006072:	9a06      	ldr	r2, [sp, #24]
 8006074:	2101      	movs	r1, #1
 8006076:	441a      	add	r2, r3
 8006078:	9206      	str	r2, [sp, #24]
 800607a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800607c:	4628      	mov	r0, r5
 800607e:	441a      	add	r2, r3
 8006080:	9209      	str	r2, [sp, #36]	; 0x24
 8006082:	f000 fb61 	bl	8006748 <__i2b>
 8006086:	4606      	mov	r6, r0
 8006088:	2f00      	cmp	r7, #0
 800608a:	dd0c      	ble.n	80060a6 <_dtoa_r+0x77e>
 800608c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800608e:	2b00      	cmp	r3, #0
 8006090:	dd09      	ble.n	80060a6 <_dtoa_r+0x77e>
 8006092:	42bb      	cmp	r3, r7
 8006094:	bfa8      	it	ge
 8006096:	463b      	movge	r3, r7
 8006098:	9a06      	ldr	r2, [sp, #24]
 800609a:	1aff      	subs	r7, r7, r3
 800609c:	1ad2      	subs	r2, r2, r3
 800609e:	9206      	str	r2, [sp, #24]
 80060a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	9309      	str	r3, [sp, #36]	; 0x24
 80060a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a8:	b1f3      	cbz	r3, 80060e8 <_dtoa_r+0x7c0>
 80060aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80a9 	beq.w	8006204 <_dtoa_r+0x8dc>
 80060b2:	2c00      	cmp	r4, #0
 80060b4:	dd10      	ble.n	80060d8 <_dtoa_r+0x7b0>
 80060b6:	4631      	mov	r1, r6
 80060b8:	4622      	mov	r2, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 fbfe 	bl	80068bc <__pow5mult>
 80060c0:	4652      	mov	r2, sl
 80060c2:	4601      	mov	r1, r0
 80060c4:	4606      	mov	r6, r0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 fb54 	bl	8006774 <__multiply>
 80060cc:	4680      	mov	r8, r0
 80060ce:	4651      	mov	r1, sl
 80060d0:	4628      	mov	r0, r5
 80060d2:	f000 fa7f 	bl	80065d4 <_Bfree>
 80060d6:	46c2      	mov	sl, r8
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	1b1a      	subs	r2, r3, r4
 80060dc:	d004      	beq.n	80060e8 <_dtoa_r+0x7c0>
 80060de:	4651      	mov	r1, sl
 80060e0:	4628      	mov	r0, r5
 80060e2:	f000 fbeb 	bl	80068bc <__pow5mult>
 80060e6:	4682      	mov	sl, r0
 80060e8:	2101      	movs	r1, #1
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 fb2c 	bl	8006748 <__i2b>
 80060f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060f2:	4604      	mov	r4, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f340 8087 	ble.w	8006208 <_dtoa_r+0x8e0>
 80060fa:	461a      	mov	r2, r3
 80060fc:	4601      	mov	r1, r0
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 fbdc 	bl	80068bc <__pow5mult>
 8006104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006106:	4604      	mov	r4, r0
 8006108:	2b01      	cmp	r3, #1
 800610a:	f340 8080 	ble.w	800620e <_dtoa_r+0x8e6>
 800610e:	f04f 0800 	mov.w	r8, #0
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006118:	6918      	ldr	r0, [r3, #16]
 800611a:	f000 fac7 	bl	80066ac <__hi0bits>
 800611e:	f1c0 0020 	rsb	r0, r0, #32
 8006122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006124:	4418      	add	r0, r3
 8006126:	f010 001f 	ands.w	r0, r0, #31
 800612a:	f000 8092 	beq.w	8006252 <_dtoa_r+0x92a>
 800612e:	f1c0 0320 	rsb	r3, r0, #32
 8006132:	2b04      	cmp	r3, #4
 8006134:	f340 808a 	ble.w	800624c <_dtoa_r+0x924>
 8006138:	f1c0 001c 	rsb	r0, r0, #28
 800613c:	9b06      	ldr	r3, [sp, #24]
 800613e:	4407      	add	r7, r0
 8006140:	4403      	add	r3, r0
 8006142:	9306      	str	r3, [sp, #24]
 8006144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006146:	4403      	add	r3, r0
 8006148:	9309      	str	r3, [sp, #36]	; 0x24
 800614a:	9b06      	ldr	r3, [sp, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	dd05      	ble.n	800615c <_dtoa_r+0x834>
 8006150:	4651      	mov	r1, sl
 8006152:	461a      	mov	r2, r3
 8006154:	4628      	mov	r0, r5
 8006156:	f000 fc0b 	bl	8006970 <__lshift>
 800615a:	4682      	mov	sl, r0
 800615c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd05      	ble.n	800616e <_dtoa_r+0x846>
 8006162:	4621      	mov	r1, r4
 8006164:	461a      	mov	r2, r3
 8006166:	4628      	mov	r0, r5
 8006168:	f000 fc02 	bl	8006970 <__lshift>
 800616c:	4604      	mov	r4, r0
 800616e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d070      	beq.n	8006256 <_dtoa_r+0x92e>
 8006174:	4621      	mov	r1, r4
 8006176:	4650      	mov	r0, sl
 8006178:	f000 fc66 	bl	8006a48 <__mcmp>
 800617c:	2800      	cmp	r0, #0
 800617e:	da6a      	bge.n	8006256 <_dtoa_r+0x92e>
 8006180:	2300      	movs	r3, #0
 8006182:	4651      	mov	r1, sl
 8006184:	220a      	movs	r2, #10
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fa46 	bl	8006618 <__multadd>
 800618c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800618e:	4682      	mov	sl, r0
 8006190:	f109 39ff 	add.w	r9, r9, #4294967295
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8193 	beq.w	80064c0 <_dtoa_r+0xb98>
 800619a:	4631      	mov	r1, r6
 800619c:	2300      	movs	r3, #0
 800619e:	220a      	movs	r2, #10
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 fa39 	bl	8006618 <__multadd>
 80061a6:	f1bb 0f00 	cmp.w	fp, #0
 80061aa:	4606      	mov	r6, r0
 80061ac:	f300 8093 	bgt.w	80062d6 <_dtoa_r+0x9ae>
 80061b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	dc57      	bgt.n	8006266 <_dtoa_r+0x93e>
 80061b6:	e08e      	b.n	80062d6 <_dtoa_r+0x9ae>
 80061b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061be:	e756      	b.n	800606e <_dtoa_r+0x746>
 80061c0:	9b02      	ldr	r3, [sp, #8]
 80061c2:	1e5c      	subs	r4, r3, #1
 80061c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c6:	42a3      	cmp	r3, r4
 80061c8:	bfb7      	itett	lt
 80061ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061cc:	1b1c      	subge	r4, r3, r4
 80061ce:	1ae2      	sublt	r2, r4, r3
 80061d0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80061d2:	bfbe      	ittt	lt
 80061d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80061d6:	189b      	addlt	r3, r3, r2
 80061d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80061da:	9b02      	ldr	r3, [sp, #8]
 80061dc:	bfb8      	it	lt
 80061de:	2400      	movlt	r4, #0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bfbb      	ittet	lt
 80061e4:	9b06      	ldrlt	r3, [sp, #24]
 80061e6:	9a02      	ldrlt	r2, [sp, #8]
 80061e8:	9f06      	ldrge	r7, [sp, #24]
 80061ea:	1a9f      	sublt	r7, r3, r2
 80061ec:	bfac      	ite	ge
 80061ee:	9b02      	ldrge	r3, [sp, #8]
 80061f0:	2300      	movlt	r3, #0
 80061f2:	e73e      	b.n	8006072 <_dtoa_r+0x74a>
 80061f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061f6:	9f06      	ldr	r7, [sp, #24]
 80061f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80061fa:	e745      	b.n	8006088 <_dtoa_r+0x760>
 80061fc:	3fe00000 	.word	0x3fe00000
 8006200:	40240000 	.word	0x40240000
 8006204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006206:	e76a      	b.n	80060de <_dtoa_r+0x7b6>
 8006208:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800620a:	2b01      	cmp	r3, #1
 800620c:	dc19      	bgt.n	8006242 <_dtoa_r+0x91a>
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	b9bb      	cbnz	r3, 8006242 <_dtoa_r+0x91a>
 8006212:	9b05      	ldr	r3, [sp, #20]
 8006214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006218:	b99b      	cbnz	r3, 8006242 <_dtoa_r+0x91a>
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006220:	0d1b      	lsrs	r3, r3, #20
 8006222:	051b      	lsls	r3, r3, #20
 8006224:	b183      	cbz	r3, 8006248 <_dtoa_r+0x920>
 8006226:	f04f 0801 	mov.w	r8, #1
 800622a:	9b06      	ldr	r3, [sp, #24]
 800622c:	3301      	adds	r3, #1
 800622e:	9306      	str	r3, [sp, #24]
 8006230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006232:	3301      	adds	r3, #1
 8006234:	9309      	str	r3, [sp, #36]	; 0x24
 8006236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	f47f af6a 	bne.w	8006112 <_dtoa_r+0x7ea>
 800623e:	2001      	movs	r0, #1
 8006240:	e76f      	b.n	8006122 <_dtoa_r+0x7fa>
 8006242:	f04f 0800 	mov.w	r8, #0
 8006246:	e7f6      	b.n	8006236 <_dtoa_r+0x90e>
 8006248:	4698      	mov	r8, r3
 800624a:	e7f4      	b.n	8006236 <_dtoa_r+0x90e>
 800624c:	f43f af7d 	beq.w	800614a <_dtoa_r+0x822>
 8006250:	4618      	mov	r0, r3
 8006252:	301c      	adds	r0, #28
 8006254:	e772      	b.n	800613c <_dtoa_r+0x814>
 8006256:	9b02      	ldr	r3, [sp, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dc36      	bgt.n	80062ca <_dtoa_r+0x9a2>
 800625c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800625e:	2b02      	cmp	r3, #2
 8006260:	dd33      	ble.n	80062ca <_dtoa_r+0x9a2>
 8006262:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006266:	f1bb 0f00 	cmp.w	fp, #0
 800626a:	d10d      	bne.n	8006288 <_dtoa_r+0x960>
 800626c:	4621      	mov	r1, r4
 800626e:	465b      	mov	r3, fp
 8006270:	2205      	movs	r2, #5
 8006272:	4628      	mov	r0, r5
 8006274:	f000 f9d0 	bl	8006618 <__multadd>
 8006278:	4601      	mov	r1, r0
 800627a:	4604      	mov	r4, r0
 800627c:	4650      	mov	r0, sl
 800627e:	f000 fbe3 	bl	8006a48 <__mcmp>
 8006282:	2800      	cmp	r0, #0
 8006284:	f73f adb6 	bgt.w	8005df4 <_dtoa_r+0x4cc>
 8006288:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800628a:	9f08      	ldr	r7, [sp, #32]
 800628c:	ea6f 0903 	mvn.w	r9, r3
 8006290:	f04f 0800 	mov.w	r8, #0
 8006294:	4621      	mov	r1, r4
 8006296:	4628      	mov	r0, r5
 8006298:	f000 f99c 	bl	80065d4 <_Bfree>
 800629c:	2e00      	cmp	r6, #0
 800629e:	f43f aea4 	beq.w	8005fea <_dtoa_r+0x6c2>
 80062a2:	f1b8 0f00 	cmp.w	r8, #0
 80062a6:	d005      	beq.n	80062b4 <_dtoa_r+0x98c>
 80062a8:	45b0      	cmp	r8, r6
 80062aa:	d003      	beq.n	80062b4 <_dtoa_r+0x98c>
 80062ac:	4641      	mov	r1, r8
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 f990 	bl	80065d4 <_Bfree>
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 f98c 	bl	80065d4 <_Bfree>
 80062bc:	e695      	b.n	8005fea <_dtoa_r+0x6c2>
 80062be:	2400      	movs	r4, #0
 80062c0:	4626      	mov	r6, r4
 80062c2:	e7e1      	b.n	8006288 <_dtoa_r+0x960>
 80062c4:	46c1      	mov	r9, r8
 80062c6:	4626      	mov	r6, r4
 80062c8:	e594      	b.n	8005df4 <_dtoa_r+0x4cc>
 80062ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80fc 	beq.w	80064ce <_dtoa_r+0xba6>
 80062d6:	2f00      	cmp	r7, #0
 80062d8:	dd05      	ble.n	80062e6 <_dtoa_r+0x9be>
 80062da:	4631      	mov	r1, r6
 80062dc:	463a      	mov	r2, r7
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 fb46 	bl	8006970 <__lshift>
 80062e4:	4606      	mov	r6, r0
 80062e6:	f1b8 0f00 	cmp.w	r8, #0
 80062ea:	d05c      	beq.n	80063a6 <_dtoa_r+0xa7e>
 80062ec:	4628      	mov	r0, r5
 80062ee:	6871      	ldr	r1, [r6, #4]
 80062f0:	f000 f930 	bl	8006554 <_Balloc>
 80062f4:	4607      	mov	r7, r0
 80062f6:	b928      	cbnz	r0, 8006304 <_dtoa_r+0x9dc>
 80062f8:	4602      	mov	r2, r0
 80062fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062fe:	4b7e      	ldr	r3, [pc, #504]	; (80064f8 <_dtoa_r+0xbd0>)
 8006300:	f7ff bb26 	b.w	8005950 <_dtoa_r+0x28>
 8006304:	6932      	ldr	r2, [r6, #16]
 8006306:	f106 010c 	add.w	r1, r6, #12
 800630a:	3202      	adds	r2, #2
 800630c:	0092      	lsls	r2, r2, #2
 800630e:	300c      	adds	r0, #12
 8006310:	f000 f912 	bl	8006538 <memcpy>
 8006314:	2201      	movs	r2, #1
 8006316:	4639      	mov	r1, r7
 8006318:	4628      	mov	r0, r5
 800631a:	f000 fb29 	bl	8006970 <__lshift>
 800631e:	46b0      	mov	r8, r6
 8006320:	4606      	mov	r6, r0
 8006322:	9b08      	ldr	r3, [sp, #32]
 8006324:	3301      	adds	r3, #1
 8006326:	9302      	str	r3, [sp, #8]
 8006328:	9b08      	ldr	r3, [sp, #32]
 800632a:	445b      	add	r3, fp
 800632c:	930a      	str	r3, [sp, #40]	; 0x28
 800632e:	9b04      	ldr	r3, [sp, #16]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	9309      	str	r3, [sp, #36]	; 0x24
 8006336:	9b02      	ldr	r3, [sp, #8]
 8006338:	4621      	mov	r1, r4
 800633a:	4650      	mov	r0, sl
 800633c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006340:	f7ff fa62 	bl	8005808 <quorem>
 8006344:	4603      	mov	r3, r0
 8006346:	4641      	mov	r1, r8
 8006348:	3330      	adds	r3, #48	; 0x30
 800634a:	9004      	str	r0, [sp, #16]
 800634c:	4650      	mov	r0, sl
 800634e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006350:	f000 fb7a 	bl	8006a48 <__mcmp>
 8006354:	4632      	mov	r2, r6
 8006356:	9006      	str	r0, [sp, #24]
 8006358:	4621      	mov	r1, r4
 800635a:	4628      	mov	r0, r5
 800635c:	f000 fb90 	bl	8006a80 <__mdiff>
 8006360:	68c2      	ldr	r2, [r0, #12]
 8006362:	4607      	mov	r7, r0
 8006364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006366:	bb02      	cbnz	r2, 80063aa <_dtoa_r+0xa82>
 8006368:	4601      	mov	r1, r0
 800636a:	4650      	mov	r0, sl
 800636c:	f000 fb6c 	bl	8006a48 <__mcmp>
 8006370:	4602      	mov	r2, r0
 8006372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006374:	4639      	mov	r1, r7
 8006376:	4628      	mov	r0, r5
 8006378:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800637c:	f000 f92a 	bl	80065d4 <_Bfree>
 8006380:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006384:	9f02      	ldr	r7, [sp, #8]
 8006386:	ea43 0102 	orr.w	r1, r3, r2
 800638a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638c:	430b      	orrs	r3, r1
 800638e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006390:	d10d      	bne.n	80063ae <_dtoa_r+0xa86>
 8006392:	2b39      	cmp	r3, #57	; 0x39
 8006394:	d027      	beq.n	80063e6 <_dtoa_r+0xabe>
 8006396:	9a06      	ldr	r2, [sp, #24]
 8006398:	2a00      	cmp	r2, #0
 800639a:	dd01      	ble.n	80063a0 <_dtoa_r+0xa78>
 800639c:	9b04      	ldr	r3, [sp, #16]
 800639e:	3331      	adds	r3, #49	; 0x31
 80063a0:	f88b 3000 	strb.w	r3, [fp]
 80063a4:	e776      	b.n	8006294 <_dtoa_r+0x96c>
 80063a6:	4630      	mov	r0, r6
 80063a8:	e7b9      	b.n	800631e <_dtoa_r+0x9f6>
 80063aa:	2201      	movs	r2, #1
 80063ac:	e7e2      	b.n	8006374 <_dtoa_r+0xa4c>
 80063ae:	9906      	ldr	r1, [sp, #24]
 80063b0:	2900      	cmp	r1, #0
 80063b2:	db04      	blt.n	80063be <_dtoa_r+0xa96>
 80063b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80063b6:	4301      	orrs	r1, r0
 80063b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ba:	4301      	orrs	r1, r0
 80063bc:	d120      	bne.n	8006400 <_dtoa_r+0xad8>
 80063be:	2a00      	cmp	r2, #0
 80063c0:	ddee      	ble.n	80063a0 <_dtoa_r+0xa78>
 80063c2:	4651      	mov	r1, sl
 80063c4:	2201      	movs	r2, #1
 80063c6:	4628      	mov	r0, r5
 80063c8:	9302      	str	r3, [sp, #8]
 80063ca:	f000 fad1 	bl	8006970 <__lshift>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4682      	mov	sl, r0
 80063d2:	f000 fb39 	bl	8006a48 <__mcmp>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	9b02      	ldr	r3, [sp, #8]
 80063da:	dc02      	bgt.n	80063e2 <_dtoa_r+0xaba>
 80063dc:	d1e0      	bne.n	80063a0 <_dtoa_r+0xa78>
 80063de:	07da      	lsls	r2, r3, #31
 80063e0:	d5de      	bpl.n	80063a0 <_dtoa_r+0xa78>
 80063e2:	2b39      	cmp	r3, #57	; 0x39
 80063e4:	d1da      	bne.n	800639c <_dtoa_r+0xa74>
 80063e6:	2339      	movs	r3, #57	; 0x39
 80063e8:	f88b 3000 	strb.w	r3, [fp]
 80063ec:	463b      	mov	r3, r7
 80063ee:	461f      	mov	r7, r3
 80063f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	2a39      	cmp	r2, #57	; 0x39
 80063f8:	d050      	beq.n	800649c <_dtoa_r+0xb74>
 80063fa:	3201      	adds	r2, #1
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	e749      	b.n	8006294 <_dtoa_r+0x96c>
 8006400:	2a00      	cmp	r2, #0
 8006402:	dd03      	ble.n	800640c <_dtoa_r+0xae4>
 8006404:	2b39      	cmp	r3, #57	; 0x39
 8006406:	d0ee      	beq.n	80063e6 <_dtoa_r+0xabe>
 8006408:	3301      	adds	r3, #1
 800640a:	e7c9      	b.n	80063a0 <_dtoa_r+0xa78>
 800640c:	9a02      	ldr	r2, [sp, #8]
 800640e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006410:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006414:	428a      	cmp	r2, r1
 8006416:	d02a      	beq.n	800646e <_dtoa_r+0xb46>
 8006418:	4651      	mov	r1, sl
 800641a:	2300      	movs	r3, #0
 800641c:	220a      	movs	r2, #10
 800641e:	4628      	mov	r0, r5
 8006420:	f000 f8fa 	bl	8006618 <__multadd>
 8006424:	45b0      	cmp	r8, r6
 8006426:	4682      	mov	sl, r0
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	f04f 020a 	mov.w	r2, #10
 8006430:	4641      	mov	r1, r8
 8006432:	4628      	mov	r0, r5
 8006434:	d107      	bne.n	8006446 <_dtoa_r+0xb1e>
 8006436:	f000 f8ef 	bl	8006618 <__multadd>
 800643a:	4680      	mov	r8, r0
 800643c:	4606      	mov	r6, r0
 800643e:	9b02      	ldr	r3, [sp, #8]
 8006440:	3301      	adds	r3, #1
 8006442:	9302      	str	r3, [sp, #8]
 8006444:	e777      	b.n	8006336 <_dtoa_r+0xa0e>
 8006446:	f000 f8e7 	bl	8006618 <__multadd>
 800644a:	4631      	mov	r1, r6
 800644c:	4680      	mov	r8, r0
 800644e:	2300      	movs	r3, #0
 8006450:	220a      	movs	r2, #10
 8006452:	4628      	mov	r0, r5
 8006454:	f000 f8e0 	bl	8006618 <__multadd>
 8006458:	4606      	mov	r6, r0
 800645a:	e7f0      	b.n	800643e <_dtoa_r+0xb16>
 800645c:	f1bb 0f00 	cmp.w	fp, #0
 8006460:	bfcc      	ite	gt
 8006462:	465f      	movgt	r7, fp
 8006464:	2701      	movle	r7, #1
 8006466:	f04f 0800 	mov.w	r8, #0
 800646a:	9a08      	ldr	r2, [sp, #32]
 800646c:	4417      	add	r7, r2
 800646e:	4651      	mov	r1, sl
 8006470:	2201      	movs	r2, #1
 8006472:	4628      	mov	r0, r5
 8006474:	9302      	str	r3, [sp, #8]
 8006476:	f000 fa7b 	bl	8006970 <__lshift>
 800647a:	4621      	mov	r1, r4
 800647c:	4682      	mov	sl, r0
 800647e:	f000 fae3 	bl	8006a48 <__mcmp>
 8006482:	2800      	cmp	r0, #0
 8006484:	dcb2      	bgt.n	80063ec <_dtoa_r+0xac4>
 8006486:	d102      	bne.n	800648e <_dtoa_r+0xb66>
 8006488:	9b02      	ldr	r3, [sp, #8]
 800648a:	07db      	lsls	r3, r3, #31
 800648c:	d4ae      	bmi.n	80063ec <_dtoa_r+0xac4>
 800648e:	463b      	mov	r3, r7
 8006490:	461f      	mov	r7, r3
 8006492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006496:	2a30      	cmp	r2, #48	; 0x30
 8006498:	d0fa      	beq.n	8006490 <_dtoa_r+0xb68>
 800649a:	e6fb      	b.n	8006294 <_dtoa_r+0x96c>
 800649c:	9a08      	ldr	r2, [sp, #32]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d1a5      	bne.n	80063ee <_dtoa_r+0xac6>
 80064a2:	2331      	movs	r3, #49	; 0x31
 80064a4:	f109 0901 	add.w	r9, r9, #1
 80064a8:	7013      	strb	r3, [r2, #0]
 80064aa:	e6f3      	b.n	8006294 <_dtoa_r+0x96c>
 80064ac:	4b13      	ldr	r3, [pc, #76]	; (80064fc <_dtoa_r+0xbd4>)
 80064ae:	f7ff baa7 	b.w	8005a00 <_dtoa_r+0xd8>
 80064b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f47f aa80 	bne.w	80059ba <_dtoa_r+0x92>
 80064ba:	4b11      	ldr	r3, [pc, #68]	; (8006500 <_dtoa_r+0xbd8>)
 80064bc:	f7ff baa0 	b.w	8005a00 <_dtoa_r+0xd8>
 80064c0:	f1bb 0f00 	cmp.w	fp, #0
 80064c4:	dc03      	bgt.n	80064ce <_dtoa_r+0xba6>
 80064c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	f73f aecc 	bgt.w	8006266 <_dtoa_r+0x93e>
 80064ce:	9f08      	ldr	r7, [sp, #32]
 80064d0:	4621      	mov	r1, r4
 80064d2:	4650      	mov	r0, sl
 80064d4:	f7ff f998 	bl	8005808 <quorem>
 80064d8:	9a08      	ldr	r2, [sp, #32]
 80064da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80064de:	f807 3b01 	strb.w	r3, [r7], #1
 80064e2:	1aba      	subs	r2, r7, r2
 80064e4:	4593      	cmp	fp, r2
 80064e6:	ddb9      	ble.n	800645c <_dtoa_r+0xb34>
 80064e8:	4651      	mov	r1, sl
 80064ea:	2300      	movs	r3, #0
 80064ec:	220a      	movs	r2, #10
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 f892 	bl	8006618 <__multadd>
 80064f4:	4682      	mov	sl, r0
 80064f6:	e7eb      	b.n	80064d0 <_dtoa_r+0xba8>
 80064f8:	08007fe7 	.word	0x08007fe7
 80064fc:	08007f40 	.word	0x08007f40
 8006500:	08007f64 	.word	0x08007f64

08006504 <_localeconv_r>:
 8006504:	4800      	ldr	r0, [pc, #0]	; (8006508 <_localeconv_r+0x4>)
 8006506:	4770      	bx	lr
 8006508:	20000160 	.word	0x20000160

0800650c <malloc>:
 800650c:	4b02      	ldr	r3, [pc, #8]	; (8006518 <malloc+0xc>)
 800650e:	4601      	mov	r1, r0
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	f000 bbfb 	b.w	8006d0c <_malloc_r>
 8006516:	bf00      	nop
 8006518:	2000000c 	.word	0x2000000c

0800651c <memchr>:
 800651c:	4603      	mov	r3, r0
 800651e:	b510      	push	{r4, lr}
 8006520:	b2c9      	uxtb	r1, r1
 8006522:	4402      	add	r2, r0
 8006524:	4293      	cmp	r3, r2
 8006526:	4618      	mov	r0, r3
 8006528:	d101      	bne.n	800652e <memchr+0x12>
 800652a:	2000      	movs	r0, #0
 800652c:	e003      	b.n	8006536 <memchr+0x1a>
 800652e:	7804      	ldrb	r4, [r0, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	428c      	cmp	r4, r1
 8006534:	d1f6      	bne.n	8006524 <memchr+0x8>
 8006536:	bd10      	pop	{r4, pc}

08006538 <memcpy>:
 8006538:	440a      	add	r2, r1
 800653a:	4291      	cmp	r1, r2
 800653c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006540:	d100      	bne.n	8006544 <memcpy+0xc>
 8006542:	4770      	bx	lr
 8006544:	b510      	push	{r4, lr}
 8006546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800654a:	4291      	cmp	r1, r2
 800654c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006550:	d1f9      	bne.n	8006546 <memcpy+0xe>
 8006552:	bd10      	pop	{r4, pc}

08006554 <_Balloc>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006558:	4604      	mov	r4, r0
 800655a:	460d      	mov	r5, r1
 800655c:	b976      	cbnz	r6, 800657c <_Balloc+0x28>
 800655e:	2010      	movs	r0, #16
 8006560:	f7ff ffd4 	bl	800650c <malloc>
 8006564:	4602      	mov	r2, r0
 8006566:	6260      	str	r0, [r4, #36]	; 0x24
 8006568:	b920      	cbnz	r0, 8006574 <_Balloc+0x20>
 800656a:	2166      	movs	r1, #102	; 0x66
 800656c:	4b17      	ldr	r3, [pc, #92]	; (80065cc <_Balloc+0x78>)
 800656e:	4818      	ldr	r0, [pc, #96]	; (80065d0 <_Balloc+0x7c>)
 8006570:	f000 fd92 	bl	8007098 <__assert_func>
 8006574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006578:	6006      	str	r6, [r0, #0]
 800657a:	60c6      	str	r6, [r0, #12]
 800657c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800657e:	68f3      	ldr	r3, [r6, #12]
 8006580:	b183      	cbz	r3, 80065a4 <_Balloc+0x50>
 8006582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800658a:	b9b8      	cbnz	r0, 80065bc <_Balloc+0x68>
 800658c:	2101      	movs	r1, #1
 800658e:	fa01 f605 	lsl.w	r6, r1, r5
 8006592:	1d72      	adds	r2, r6, #5
 8006594:	4620      	mov	r0, r4
 8006596:	0092      	lsls	r2, r2, #2
 8006598:	f000 fb5e 	bl	8006c58 <_calloc_r>
 800659c:	b160      	cbz	r0, 80065b8 <_Balloc+0x64>
 800659e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065a2:	e00e      	b.n	80065c2 <_Balloc+0x6e>
 80065a4:	2221      	movs	r2, #33	; 0x21
 80065a6:	2104      	movs	r1, #4
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 fb55 	bl	8006c58 <_calloc_r>
 80065ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b0:	60f0      	str	r0, [r6, #12]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e4      	bne.n	8006582 <_Balloc+0x2e>
 80065b8:	2000      	movs	r0, #0
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	6802      	ldr	r2, [r0, #0]
 80065be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065c2:	2300      	movs	r3, #0
 80065c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065c8:	e7f7      	b.n	80065ba <_Balloc+0x66>
 80065ca:	bf00      	nop
 80065cc:	08007f71 	.word	0x08007f71
 80065d0:	08007ff8 	.word	0x08007ff8

080065d4 <_Bfree>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065d8:	4605      	mov	r5, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	b976      	cbnz	r6, 80065fc <_Bfree+0x28>
 80065de:	2010      	movs	r0, #16
 80065e0:	f7ff ff94 	bl	800650c <malloc>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6268      	str	r0, [r5, #36]	; 0x24
 80065e8:	b920      	cbnz	r0, 80065f4 <_Bfree+0x20>
 80065ea:	218a      	movs	r1, #138	; 0x8a
 80065ec:	4b08      	ldr	r3, [pc, #32]	; (8006610 <_Bfree+0x3c>)
 80065ee:	4809      	ldr	r0, [pc, #36]	; (8006614 <_Bfree+0x40>)
 80065f0:	f000 fd52 	bl	8007098 <__assert_func>
 80065f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065f8:	6006      	str	r6, [r0, #0]
 80065fa:	60c6      	str	r6, [r0, #12]
 80065fc:	b13c      	cbz	r4, 800660e <_Bfree+0x3a>
 80065fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006600:	6862      	ldr	r2, [r4, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006608:	6021      	str	r1, [r4, #0]
 800660a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	08007f71 	.word	0x08007f71
 8006614:	08007ff8 	.word	0x08007ff8

08006618 <__multadd>:
 8006618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661c:	4698      	mov	r8, r3
 800661e:	460c      	mov	r4, r1
 8006620:	2300      	movs	r3, #0
 8006622:	690e      	ldr	r6, [r1, #16]
 8006624:	4607      	mov	r7, r0
 8006626:	f101 0014 	add.w	r0, r1, #20
 800662a:	6805      	ldr	r5, [r0, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	b2a9      	uxth	r1, r5
 8006630:	fb02 8101 	mla	r1, r2, r1, r8
 8006634:	0c2d      	lsrs	r5, r5, #16
 8006636:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800663a:	fb02 c505 	mla	r5, r2, r5, ip
 800663e:	b289      	uxth	r1, r1
 8006640:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006644:	429e      	cmp	r6, r3
 8006646:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800664a:	f840 1b04 	str.w	r1, [r0], #4
 800664e:	dcec      	bgt.n	800662a <__multadd+0x12>
 8006650:	f1b8 0f00 	cmp.w	r8, #0
 8006654:	d022      	beq.n	800669c <__multadd+0x84>
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	42b3      	cmp	r3, r6
 800665a:	dc19      	bgt.n	8006690 <__multadd+0x78>
 800665c:	6861      	ldr	r1, [r4, #4]
 800665e:	4638      	mov	r0, r7
 8006660:	3101      	adds	r1, #1
 8006662:	f7ff ff77 	bl	8006554 <_Balloc>
 8006666:	4605      	mov	r5, r0
 8006668:	b928      	cbnz	r0, 8006676 <__multadd+0x5e>
 800666a:	4602      	mov	r2, r0
 800666c:	21b5      	movs	r1, #181	; 0xb5
 800666e:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <__multadd+0x8c>)
 8006670:	480d      	ldr	r0, [pc, #52]	; (80066a8 <__multadd+0x90>)
 8006672:	f000 fd11 	bl	8007098 <__assert_func>
 8006676:	6922      	ldr	r2, [r4, #16]
 8006678:	f104 010c 	add.w	r1, r4, #12
 800667c:	3202      	adds	r2, #2
 800667e:	0092      	lsls	r2, r2, #2
 8006680:	300c      	adds	r0, #12
 8006682:	f7ff ff59 	bl	8006538 <memcpy>
 8006686:	4621      	mov	r1, r4
 8006688:	4638      	mov	r0, r7
 800668a:	f7ff ffa3 	bl	80065d4 <_Bfree>
 800668e:	462c      	mov	r4, r5
 8006690:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006694:	3601      	adds	r6, #1
 8006696:	f8c3 8014 	str.w	r8, [r3, #20]
 800669a:	6126      	str	r6, [r4, #16]
 800669c:	4620      	mov	r0, r4
 800669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a2:	bf00      	nop
 80066a4:	08007fe7 	.word	0x08007fe7
 80066a8:	08007ff8 	.word	0x08007ff8

080066ac <__hi0bits>:
 80066ac:	0c02      	lsrs	r2, r0, #16
 80066ae:	0412      	lsls	r2, r2, #16
 80066b0:	4603      	mov	r3, r0
 80066b2:	b9ca      	cbnz	r2, 80066e8 <__hi0bits+0x3c>
 80066b4:	0403      	lsls	r3, r0, #16
 80066b6:	2010      	movs	r0, #16
 80066b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066bc:	bf04      	itt	eq
 80066be:	021b      	lsleq	r3, r3, #8
 80066c0:	3008      	addeq	r0, #8
 80066c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066c6:	bf04      	itt	eq
 80066c8:	011b      	lsleq	r3, r3, #4
 80066ca:	3004      	addeq	r0, #4
 80066cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066d0:	bf04      	itt	eq
 80066d2:	009b      	lsleq	r3, r3, #2
 80066d4:	3002      	addeq	r0, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	db05      	blt.n	80066e6 <__hi0bits+0x3a>
 80066da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80066de:	f100 0001 	add.w	r0, r0, #1
 80066e2:	bf08      	it	eq
 80066e4:	2020      	moveq	r0, #32
 80066e6:	4770      	bx	lr
 80066e8:	2000      	movs	r0, #0
 80066ea:	e7e5      	b.n	80066b8 <__hi0bits+0xc>

080066ec <__lo0bits>:
 80066ec:	6803      	ldr	r3, [r0, #0]
 80066ee:	4602      	mov	r2, r0
 80066f0:	f013 0007 	ands.w	r0, r3, #7
 80066f4:	d00b      	beq.n	800670e <__lo0bits+0x22>
 80066f6:	07d9      	lsls	r1, r3, #31
 80066f8:	d422      	bmi.n	8006740 <__lo0bits+0x54>
 80066fa:	0798      	lsls	r0, r3, #30
 80066fc:	bf49      	itett	mi
 80066fe:	085b      	lsrmi	r3, r3, #1
 8006700:	089b      	lsrpl	r3, r3, #2
 8006702:	2001      	movmi	r0, #1
 8006704:	6013      	strmi	r3, [r2, #0]
 8006706:	bf5c      	itt	pl
 8006708:	2002      	movpl	r0, #2
 800670a:	6013      	strpl	r3, [r2, #0]
 800670c:	4770      	bx	lr
 800670e:	b299      	uxth	r1, r3
 8006710:	b909      	cbnz	r1, 8006716 <__lo0bits+0x2a>
 8006712:	2010      	movs	r0, #16
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	f013 0fff 	tst.w	r3, #255	; 0xff
 800671a:	bf04      	itt	eq
 800671c:	0a1b      	lsreq	r3, r3, #8
 800671e:	3008      	addeq	r0, #8
 8006720:	0719      	lsls	r1, r3, #28
 8006722:	bf04      	itt	eq
 8006724:	091b      	lsreq	r3, r3, #4
 8006726:	3004      	addeq	r0, #4
 8006728:	0799      	lsls	r1, r3, #30
 800672a:	bf04      	itt	eq
 800672c:	089b      	lsreq	r3, r3, #2
 800672e:	3002      	addeq	r0, #2
 8006730:	07d9      	lsls	r1, r3, #31
 8006732:	d403      	bmi.n	800673c <__lo0bits+0x50>
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	f100 0001 	add.w	r0, r0, #1
 800673a:	d003      	beq.n	8006744 <__lo0bits+0x58>
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	4770      	bx	lr
 8006740:	2000      	movs	r0, #0
 8006742:	4770      	bx	lr
 8006744:	2020      	movs	r0, #32
 8006746:	4770      	bx	lr

08006748 <__i2b>:
 8006748:	b510      	push	{r4, lr}
 800674a:	460c      	mov	r4, r1
 800674c:	2101      	movs	r1, #1
 800674e:	f7ff ff01 	bl	8006554 <_Balloc>
 8006752:	4602      	mov	r2, r0
 8006754:	b928      	cbnz	r0, 8006762 <__i2b+0x1a>
 8006756:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800675a:	4b04      	ldr	r3, [pc, #16]	; (800676c <__i2b+0x24>)
 800675c:	4804      	ldr	r0, [pc, #16]	; (8006770 <__i2b+0x28>)
 800675e:	f000 fc9b 	bl	8007098 <__assert_func>
 8006762:	2301      	movs	r3, #1
 8006764:	6144      	str	r4, [r0, #20]
 8006766:	6103      	str	r3, [r0, #16]
 8006768:	bd10      	pop	{r4, pc}
 800676a:	bf00      	nop
 800676c:	08007fe7 	.word	0x08007fe7
 8006770:	08007ff8 	.word	0x08007ff8

08006774 <__multiply>:
 8006774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006778:	4614      	mov	r4, r2
 800677a:	690a      	ldr	r2, [r1, #16]
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	460d      	mov	r5, r1
 8006780:	429a      	cmp	r2, r3
 8006782:	bfbe      	ittt	lt
 8006784:	460b      	movlt	r3, r1
 8006786:	4625      	movlt	r5, r4
 8006788:	461c      	movlt	r4, r3
 800678a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800678e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006792:	68ab      	ldr	r3, [r5, #8]
 8006794:	6869      	ldr	r1, [r5, #4]
 8006796:	eb0a 0709 	add.w	r7, sl, r9
 800679a:	42bb      	cmp	r3, r7
 800679c:	b085      	sub	sp, #20
 800679e:	bfb8      	it	lt
 80067a0:	3101      	addlt	r1, #1
 80067a2:	f7ff fed7 	bl	8006554 <_Balloc>
 80067a6:	b930      	cbnz	r0, 80067b6 <__multiply+0x42>
 80067a8:	4602      	mov	r2, r0
 80067aa:	f240 115d 	movw	r1, #349	; 0x15d
 80067ae:	4b41      	ldr	r3, [pc, #260]	; (80068b4 <__multiply+0x140>)
 80067b0:	4841      	ldr	r0, [pc, #260]	; (80068b8 <__multiply+0x144>)
 80067b2:	f000 fc71 	bl	8007098 <__assert_func>
 80067b6:	f100 0614 	add.w	r6, r0, #20
 80067ba:	4633      	mov	r3, r6
 80067bc:	2200      	movs	r2, #0
 80067be:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80067c2:	4543      	cmp	r3, r8
 80067c4:	d31e      	bcc.n	8006804 <__multiply+0x90>
 80067c6:	f105 0c14 	add.w	ip, r5, #20
 80067ca:	f104 0314 	add.w	r3, r4, #20
 80067ce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80067d2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80067d6:	9202      	str	r2, [sp, #8]
 80067d8:	ebac 0205 	sub.w	r2, ip, r5
 80067dc:	3a15      	subs	r2, #21
 80067de:	f022 0203 	bic.w	r2, r2, #3
 80067e2:	3204      	adds	r2, #4
 80067e4:	f105 0115 	add.w	r1, r5, #21
 80067e8:	458c      	cmp	ip, r1
 80067ea:	bf38      	it	cc
 80067ec:	2204      	movcc	r2, #4
 80067ee:	9201      	str	r2, [sp, #4]
 80067f0:	9a02      	ldr	r2, [sp, #8]
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d808      	bhi.n	800680a <__multiply+0x96>
 80067f8:	2f00      	cmp	r7, #0
 80067fa:	dc55      	bgt.n	80068a8 <__multiply+0x134>
 80067fc:	6107      	str	r7, [r0, #16]
 80067fe:	b005      	add	sp, #20
 8006800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006804:	f843 2b04 	str.w	r2, [r3], #4
 8006808:	e7db      	b.n	80067c2 <__multiply+0x4e>
 800680a:	f8b3 a000 	ldrh.w	sl, [r3]
 800680e:	f1ba 0f00 	cmp.w	sl, #0
 8006812:	d020      	beq.n	8006856 <__multiply+0xe2>
 8006814:	46b1      	mov	r9, r6
 8006816:	2200      	movs	r2, #0
 8006818:	f105 0e14 	add.w	lr, r5, #20
 800681c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006820:	f8d9 b000 	ldr.w	fp, [r9]
 8006824:	b2a1      	uxth	r1, r4
 8006826:	fa1f fb8b 	uxth.w	fp, fp
 800682a:	fb0a b101 	mla	r1, sl, r1, fp
 800682e:	4411      	add	r1, r2
 8006830:	f8d9 2000 	ldr.w	r2, [r9]
 8006834:	0c24      	lsrs	r4, r4, #16
 8006836:	0c12      	lsrs	r2, r2, #16
 8006838:	fb0a 2404 	mla	r4, sl, r4, r2
 800683c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006840:	b289      	uxth	r1, r1
 8006842:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006846:	45f4      	cmp	ip, lr
 8006848:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800684c:	f849 1b04 	str.w	r1, [r9], #4
 8006850:	d8e4      	bhi.n	800681c <__multiply+0xa8>
 8006852:	9901      	ldr	r1, [sp, #4]
 8006854:	5072      	str	r2, [r6, r1]
 8006856:	9a03      	ldr	r2, [sp, #12]
 8006858:	3304      	adds	r3, #4
 800685a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800685e:	f1b9 0f00 	cmp.w	r9, #0
 8006862:	d01f      	beq.n	80068a4 <__multiply+0x130>
 8006864:	46b6      	mov	lr, r6
 8006866:	f04f 0a00 	mov.w	sl, #0
 800686a:	6834      	ldr	r4, [r6, #0]
 800686c:	f105 0114 	add.w	r1, r5, #20
 8006870:	880a      	ldrh	r2, [r1, #0]
 8006872:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006876:	b2a4      	uxth	r4, r4
 8006878:	fb09 b202 	mla	r2, r9, r2, fp
 800687c:	4492      	add	sl, r2
 800687e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006882:	f84e 4b04 	str.w	r4, [lr], #4
 8006886:	f851 4b04 	ldr.w	r4, [r1], #4
 800688a:	f8be 2000 	ldrh.w	r2, [lr]
 800688e:	0c24      	lsrs	r4, r4, #16
 8006890:	fb09 2404 	mla	r4, r9, r4, r2
 8006894:	458c      	cmp	ip, r1
 8006896:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800689a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800689e:	d8e7      	bhi.n	8006870 <__multiply+0xfc>
 80068a0:	9a01      	ldr	r2, [sp, #4]
 80068a2:	50b4      	str	r4, [r6, r2]
 80068a4:	3604      	adds	r6, #4
 80068a6:	e7a3      	b.n	80067f0 <__multiply+0x7c>
 80068a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1a5      	bne.n	80067fc <__multiply+0x88>
 80068b0:	3f01      	subs	r7, #1
 80068b2:	e7a1      	b.n	80067f8 <__multiply+0x84>
 80068b4:	08007fe7 	.word	0x08007fe7
 80068b8:	08007ff8 	.word	0x08007ff8

080068bc <__pow5mult>:
 80068bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c0:	4615      	mov	r5, r2
 80068c2:	f012 0203 	ands.w	r2, r2, #3
 80068c6:	4606      	mov	r6, r0
 80068c8:	460f      	mov	r7, r1
 80068ca:	d007      	beq.n	80068dc <__pow5mult+0x20>
 80068cc:	4c25      	ldr	r4, [pc, #148]	; (8006964 <__pow5mult+0xa8>)
 80068ce:	3a01      	subs	r2, #1
 80068d0:	2300      	movs	r3, #0
 80068d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068d6:	f7ff fe9f 	bl	8006618 <__multadd>
 80068da:	4607      	mov	r7, r0
 80068dc:	10ad      	asrs	r5, r5, #2
 80068de:	d03d      	beq.n	800695c <__pow5mult+0xa0>
 80068e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068e2:	b97c      	cbnz	r4, 8006904 <__pow5mult+0x48>
 80068e4:	2010      	movs	r0, #16
 80068e6:	f7ff fe11 	bl	800650c <malloc>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6270      	str	r0, [r6, #36]	; 0x24
 80068ee:	b928      	cbnz	r0, 80068fc <__pow5mult+0x40>
 80068f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068f4:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <__pow5mult+0xac>)
 80068f6:	481d      	ldr	r0, [pc, #116]	; (800696c <__pow5mult+0xb0>)
 80068f8:	f000 fbce 	bl	8007098 <__assert_func>
 80068fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006900:	6004      	str	r4, [r0, #0]
 8006902:	60c4      	str	r4, [r0, #12]
 8006904:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800690c:	b94c      	cbnz	r4, 8006922 <__pow5mult+0x66>
 800690e:	f240 2171 	movw	r1, #625	; 0x271
 8006912:	4630      	mov	r0, r6
 8006914:	f7ff ff18 	bl	8006748 <__i2b>
 8006918:	2300      	movs	r3, #0
 800691a:	4604      	mov	r4, r0
 800691c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006920:	6003      	str	r3, [r0, #0]
 8006922:	f04f 0900 	mov.w	r9, #0
 8006926:	07eb      	lsls	r3, r5, #31
 8006928:	d50a      	bpl.n	8006940 <__pow5mult+0x84>
 800692a:	4639      	mov	r1, r7
 800692c:	4622      	mov	r2, r4
 800692e:	4630      	mov	r0, r6
 8006930:	f7ff ff20 	bl	8006774 <__multiply>
 8006934:	4680      	mov	r8, r0
 8006936:	4639      	mov	r1, r7
 8006938:	4630      	mov	r0, r6
 800693a:	f7ff fe4b 	bl	80065d4 <_Bfree>
 800693e:	4647      	mov	r7, r8
 8006940:	106d      	asrs	r5, r5, #1
 8006942:	d00b      	beq.n	800695c <__pow5mult+0xa0>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	b938      	cbnz	r0, 8006958 <__pow5mult+0x9c>
 8006948:	4622      	mov	r2, r4
 800694a:	4621      	mov	r1, r4
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff ff11 	bl	8006774 <__multiply>
 8006952:	6020      	str	r0, [r4, #0]
 8006954:	f8c0 9000 	str.w	r9, [r0]
 8006958:	4604      	mov	r4, r0
 800695a:	e7e4      	b.n	8006926 <__pow5mult+0x6a>
 800695c:	4638      	mov	r0, r7
 800695e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006962:	bf00      	nop
 8006964:	08008148 	.word	0x08008148
 8006968:	08007f71 	.word	0x08007f71
 800696c:	08007ff8 	.word	0x08007ff8

08006970 <__lshift>:
 8006970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	460c      	mov	r4, r1
 8006976:	4607      	mov	r7, r0
 8006978:	4691      	mov	r9, r2
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	6849      	ldr	r1, [r1, #4]
 800697e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006982:	68a3      	ldr	r3, [r4, #8]
 8006984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006988:	f108 0601 	add.w	r6, r8, #1
 800698c:	42b3      	cmp	r3, r6
 800698e:	db0b      	blt.n	80069a8 <__lshift+0x38>
 8006990:	4638      	mov	r0, r7
 8006992:	f7ff fddf 	bl	8006554 <_Balloc>
 8006996:	4605      	mov	r5, r0
 8006998:	b948      	cbnz	r0, 80069ae <__lshift+0x3e>
 800699a:	4602      	mov	r2, r0
 800699c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80069a0:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <__lshift+0xd0>)
 80069a2:	4828      	ldr	r0, [pc, #160]	; (8006a44 <__lshift+0xd4>)
 80069a4:	f000 fb78 	bl	8007098 <__assert_func>
 80069a8:	3101      	adds	r1, #1
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	e7ee      	b.n	800698c <__lshift+0x1c>
 80069ae:	2300      	movs	r3, #0
 80069b0:	f100 0114 	add.w	r1, r0, #20
 80069b4:	f100 0210 	add.w	r2, r0, #16
 80069b8:	4618      	mov	r0, r3
 80069ba:	4553      	cmp	r3, sl
 80069bc:	db33      	blt.n	8006a26 <__lshift+0xb6>
 80069be:	6920      	ldr	r0, [r4, #16]
 80069c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069c4:	f104 0314 	add.w	r3, r4, #20
 80069c8:	f019 091f 	ands.w	r9, r9, #31
 80069cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069d4:	d02b      	beq.n	8006a2e <__lshift+0xbe>
 80069d6:	468a      	mov	sl, r1
 80069d8:	2200      	movs	r2, #0
 80069da:	f1c9 0e20 	rsb	lr, r9, #32
 80069de:	6818      	ldr	r0, [r3, #0]
 80069e0:	fa00 f009 	lsl.w	r0, r0, r9
 80069e4:	4302      	orrs	r2, r0
 80069e6:	f84a 2b04 	str.w	r2, [sl], #4
 80069ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ee:	459c      	cmp	ip, r3
 80069f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80069f4:	d8f3      	bhi.n	80069de <__lshift+0x6e>
 80069f6:	ebac 0304 	sub.w	r3, ip, r4
 80069fa:	3b15      	subs	r3, #21
 80069fc:	f023 0303 	bic.w	r3, r3, #3
 8006a00:	3304      	adds	r3, #4
 8006a02:	f104 0015 	add.w	r0, r4, #21
 8006a06:	4584      	cmp	ip, r0
 8006a08:	bf38      	it	cc
 8006a0a:	2304      	movcc	r3, #4
 8006a0c:	50ca      	str	r2, [r1, r3]
 8006a0e:	b10a      	cbz	r2, 8006a14 <__lshift+0xa4>
 8006a10:	f108 0602 	add.w	r6, r8, #2
 8006a14:	3e01      	subs	r6, #1
 8006a16:	4638      	mov	r0, r7
 8006a18:	4621      	mov	r1, r4
 8006a1a:	612e      	str	r6, [r5, #16]
 8006a1c:	f7ff fdda 	bl	80065d4 <_Bfree>
 8006a20:	4628      	mov	r0, r5
 8006a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	e7c5      	b.n	80069ba <__lshift+0x4a>
 8006a2e:	3904      	subs	r1, #4
 8006a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a34:	459c      	cmp	ip, r3
 8006a36:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a3a:	d8f9      	bhi.n	8006a30 <__lshift+0xc0>
 8006a3c:	e7ea      	b.n	8006a14 <__lshift+0xa4>
 8006a3e:	bf00      	nop
 8006a40:	08007fe7 	.word	0x08007fe7
 8006a44:	08007ff8 	.word	0x08007ff8

08006a48 <__mcmp>:
 8006a48:	4603      	mov	r3, r0
 8006a4a:	690a      	ldr	r2, [r1, #16]
 8006a4c:	6900      	ldr	r0, [r0, #16]
 8006a4e:	b530      	push	{r4, r5, lr}
 8006a50:	1a80      	subs	r0, r0, r2
 8006a52:	d10d      	bne.n	8006a70 <__mcmp+0x28>
 8006a54:	3314      	adds	r3, #20
 8006a56:	3114      	adds	r1, #20
 8006a58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a68:	4295      	cmp	r5, r2
 8006a6a:	d002      	beq.n	8006a72 <__mcmp+0x2a>
 8006a6c:	d304      	bcc.n	8006a78 <__mcmp+0x30>
 8006a6e:	2001      	movs	r0, #1
 8006a70:	bd30      	pop	{r4, r5, pc}
 8006a72:	42a3      	cmp	r3, r4
 8006a74:	d3f4      	bcc.n	8006a60 <__mcmp+0x18>
 8006a76:	e7fb      	b.n	8006a70 <__mcmp+0x28>
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	e7f8      	b.n	8006a70 <__mcmp+0x28>
	...

08006a80 <__mdiff>:
 8006a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a84:	460c      	mov	r4, r1
 8006a86:	4606      	mov	r6, r0
 8006a88:	4611      	mov	r1, r2
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	4692      	mov	sl, r2
 8006a8e:	f7ff ffdb 	bl	8006a48 <__mcmp>
 8006a92:	1e05      	subs	r5, r0, #0
 8006a94:	d111      	bne.n	8006aba <__mdiff+0x3a>
 8006a96:	4629      	mov	r1, r5
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f7ff fd5b 	bl	8006554 <_Balloc>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <__mdiff+0x2e>
 8006aa2:	f240 2132 	movw	r1, #562	; 0x232
 8006aa6:	4b3c      	ldr	r3, [pc, #240]	; (8006b98 <__mdiff+0x118>)
 8006aa8:	483c      	ldr	r0, [pc, #240]	; (8006b9c <__mdiff+0x11c>)
 8006aaa:	f000 faf5 	bl	8007098 <__assert_func>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aba:	bfa4      	itt	ge
 8006abc:	4653      	movge	r3, sl
 8006abe:	46a2      	movge	sl, r4
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006ac6:	bfa6      	itte	ge
 8006ac8:	461c      	movge	r4, r3
 8006aca:	2500      	movge	r5, #0
 8006acc:	2501      	movlt	r5, #1
 8006ace:	f7ff fd41 	bl	8006554 <_Balloc>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	b918      	cbnz	r0, 8006ade <__mdiff+0x5e>
 8006ad6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ada:	4b2f      	ldr	r3, [pc, #188]	; (8006b98 <__mdiff+0x118>)
 8006adc:	e7e4      	b.n	8006aa8 <__mdiff+0x28>
 8006ade:	f100 0814 	add.w	r8, r0, #20
 8006ae2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006ae6:	60c5      	str	r5, [r0, #12]
 8006ae8:	f04f 0c00 	mov.w	ip, #0
 8006aec:	f10a 0514 	add.w	r5, sl, #20
 8006af0:	f10a 0010 	add.w	r0, sl, #16
 8006af4:	46c2      	mov	sl, r8
 8006af6:	6926      	ldr	r6, [r4, #16]
 8006af8:	f104 0914 	add.w	r9, r4, #20
 8006afc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006b00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b04:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006b08:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b0c:	fa1f f18b 	uxth.w	r1, fp
 8006b10:	4461      	add	r1, ip
 8006b12:	fa1f fc83 	uxth.w	ip, r3
 8006b16:	0c1b      	lsrs	r3, r3, #16
 8006b18:	eba1 010c 	sub.w	r1, r1, ip
 8006b1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b20:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006b24:	b289      	uxth	r1, r1
 8006b26:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006b2a:	454e      	cmp	r6, r9
 8006b2c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006b30:	f84a 3b04 	str.w	r3, [sl], #4
 8006b34:	d8e6      	bhi.n	8006b04 <__mdiff+0x84>
 8006b36:	1b33      	subs	r3, r6, r4
 8006b38:	3b15      	subs	r3, #21
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	3415      	adds	r4, #21
 8006b40:	3304      	adds	r3, #4
 8006b42:	42a6      	cmp	r6, r4
 8006b44:	bf38      	it	cc
 8006b46:	2304      	movcc	r3, #4
 8006b48:	441d      	add	r5, r3
 8006b4a:	4443      	add	r3, r8
 8006b4c:	461e      	mov	r6, r3
 8006b4e:	462c      	mov	r4, r5
 8006b50:	4574      	cmp	r4, lr
 8006b52:	d30e      	bcc.n	8006b72 <__mdiff+0xf2>
 8006b54:	f10e 0103 	add.w	r1, lr, #3
 8006b58:	1b49      	subs	r1, r1, r5
 8006b5a:	f021 0103 	bic.w	r1, r1, #3
 8006b5e:	3d03      	subs	r5, #3
 8006b60:	45ae      	cmp	lr, r5
 8006b62:	bf38      	it	cc
 8006b64:	2100      	movcc	r1, #0
 8006b66:	4419      	add	r1, r3
 8006b68:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006b6c:	b18b      	cbz	r3, 8006b92 <__mdiff+0x112>
 8006b6e:	6117      	str	r7, [r2, #16]
 8006b70:	e7a0      	b.n	8006ab4 <__mdiff+0x34>
 8006b72:	f854 8b04 	ldr.w	r8, [r4], #4
 8006b76:	fa1f f188 	uxth.w	r1, r8
 8006b7a:	4461      	add	r1, ip
 8006b7c:	1408      	asrs	r0, r1, #16
 8006b7e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006b82:	b289      	uxth	r1, r1
 8006b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b8c:	f846 1b04 	str.w	r1, [r6], #4
 8006b90:	e7de      	b.n	8006b50 <__mdiff+0xd0>
 8006b92:	3f01      	subs	r7, #1
 8006b94:	e7e8      	b.n	8006b68 <__mdiff+0xe8>
 8006b96:	bf00      	nop
 8006b98:	08007fe7 	.word	0x08007fe7
 8006b9c:	08007ff8 	.word	0x08007ff8

08006ba0 <__d2b>:
 8006ba0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006baa:	4690      	mov	r8, r2
 8006bac:	461d      	mov	r5, r3
 8006bae:	f7ff fcd1 	bl	8006554 <_Balloc>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	b930      	cbnz	r0, 8006bc4 <__d2b+0x24>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	f240 310a 	movw	r1, #778	; 0x30a
 8006bbc:	4b24      	ldr	r3, [pc, #144]	; (8006c50 <__d2b+0xb0>)
 8006bbe:	4825      	ldr	r0, [pc, #148]	; (8006c54 <__d2b+0xb4>)
 8006bc0:	f000 fa6a 	bl	8007098 <__assert_func>
 8006bc4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006bc8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006bcc:	bb2d      	cbnz	r5, 8006c1a <__d2b+0x7a>
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	f1b8 0300 	subs.w	r3, r8, #0
 8006bd4:	d026      	beq.n	8006c24 <__d2b+0x84>
 8006bd6:	4668      	mov	r0, sp
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	f7ff fd87 	bl	80066ec <__lo0bits>
 8006bde:	9900      	ldr	r1, [sp, #0]
 8006be0:	b1f0      	cbz	r0, 8006c20 <__d2b+0x80>
 8006be2:	9a01      	ldr	r2, [sp, #4]
 8006be4:	f1c0 0320 	rsb	r3, r0, #32
 8006be8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bec:	430b      	orrs	r3, r1
 8006bee:	40c2      	lsrs	r2, r0
 8006bf0:	6163      	str	r3, [r4, #20]
 8006bf2:	9201      	str	r2, [sp, #4]
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf14      	ite	ne
 8006bfa:	2102      	movne	r1, #2
 8006bfc:	2101      	moveq	r1, #1
 8006bfe:	61a3      	str	r3, [r4, #24]
 8006c00:	6121      	str	r1, [r4, #16]
 8006c02:	b1c5      	cbz	r5, 8006c36 <__d2b+0x96>
 8006c04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c08:	4405      	add	r5, r0
 8006c0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c0e:	603d      	str	r5, [r7, #0]
 8006c10:	6030      	str	r0, [r6, #0]
 8006c12:	4620      	mov	r0, r4
 8006c14:	b002      	add	sp, #8
 8006c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1e:	e7d6      	b.n	8006bce <__d2b+0x2e>
 8006c20:	6161      	str	r1, [r4, #20]
 8006c22:	e7e7      	b.n	8006bf4 <__d2b+0x54>
 8006c24:	a801      	add	r0, sp, #4
 8006c26:	f7ff fd61 	bl	80066ec <__lo0bits>
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	6121      	str	r1, [r4, #16]
 8006c30:	6163      	str	r3, [r4, #20]
 8006c32:	3020      	adds	r0, #32
 8006c34:	e7e5      	b.n	8006c02 <__d2b+0x62>
 8006c36:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006c3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c3e:	6038      	str	r0, [r7, #0]
 8006c40:	6918      	ldr	r0, [r3, #16]
 8006c42:	f7ff fd33 	bl	80066ac <__hi0bits>
 8006c46:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006c4a:	6031      	str	r1, [r6, #0]
 8006c4c:	e7e1      	b.n	8006c12 <__d2b+0x72>
 8006c4e:	bf00      	nop
 8006c50:	08007fe7 	.word	0x08007fe7
 8006c54:	08007ff8 	.word	0x08007ff8

08006c58 <_calloc_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	fb02 f501 	mul.w	r5, r2, r1
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f000 f854 	bl	8006d0c <_malloc_r>
 8006c64:	4604      	mov	r4, r0
 8006c66:	b118      	cbz	r0, 8006c70 <_calloc_r+0x18>
 8006c68:	462a      	mov	r2, r5
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	f7fe f944 	bl	8004ef8 <memset>
 8006c70:	4620      	mov	r0, r4
 8006c72:	bd38      	pop	{r3, r4, r5, pc}

08006c74 <_free_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4605      	mov	r5, r0
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d043      	beq.n	8006d04 <_free_r+0x90>
 8006c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c80:	1f0c      	subs	r4, r1, #4
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	bfb8      	it	lt
 8006c86:	18e4      	addlt	r4, r4, r3
 8006c88:	f000 fa48 	bl	800711c <__malloc_lock>
 8006c8c:	4a1e      	ldr	r2, [pc, #120]	; (8006d08 <_free_r+0x94>)
 8006c8e:	6813      	ldr	r3, [r2, #0]
 8006c90:	4610      	mov	r0, r2
 8006c92:	b933      	cbnz	r3, 8006ca2 <_free_r+0x2e>
 8006c94:	6063      	str	r3, [r4, #4]
 8006c96:	6014      	str	r4, [r2, #0]
 8006c98:	4628      	mov	r0, r5
 8006c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c9e:	f000 ba43 	b.w	8007128 <__malloc_unlock>
 8006ca2:	42a3      	cmp	r3, r4
 8006ca4:	d90a      	bls.n	8006cbc <_free_r+0x48>
 8006ca6:	6821      	ldr	r1, [r4, #0]
 8006ca8:	1862      	adds	r2, r4, r1
 8006caa:	4293      	cmp	r3, r2
 8006cac:	bf01      	itttt	eq
 8006cae:	681a      	ldreq	r2, [r3, #0]
 8006cb0:	685b      	ldreq	r3, [r3, #4]
 8006cb2:	1852      	addeq	r2, r2, r1
 8006cb4:	6022      	streq	r2, [r4, #0]
 8006cb6:	6063      	str	r3, [r4, #4]
 8006cb8:	6004      	str	r4, [r0, #0]
 8006cba:	e7ed      	b.n	8006c98 <_free_r+0x24>
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	b10b      	cbz	r3, 8006cc6 <_free_r+0x52>
 8006cc2:	42a3      	cmp	r3, r4
 8006cc4:	d9fa      	bls.n	8006cbc <_free_r+0x48>
 8006cc6:	6811      	ldr	r1, [r2, #0]
 8006cc8:	1850      	adds	r0, r2, r1
 8006cca:	42a0      	cmp	r0, r4
 8006ccc:	d10b      	bne.n	8006ce6 <_free_r+0x72>
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	4401      	add	r1, r0
 8006cd2:	1850      	adds	r0, r2, r1
 8006cd4:	4283      	cmp	r3, r0
 8006cd6:	6011      	str	r1, [r2, #0]
 8006cd8:	d1de      	bne.n	8006c98 <_free_r+0x24>
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	4401      	add	r1, r0
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	6053      	str	r3, [r2, #4]
 8006ce4:	e7d8      	b.n	8006c98 <_free_r+0x24>
 8006ce6:	d902      	bls.n	8006cee <_free_r+0x7a>
 8006ce8:	230c      	movs	r3, #12
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	e7d4      	b.n	8006c98 <_free_r+0x24>
 8006cee:	6820      	ldr	r0, [r4, #0]
 8006cf0:	1821      	adds	r1, r4, r0
 8006cf2:	428b      	cmp	r3, r1
 8006cf4:	bf01      	itttt	eq
 8006cf6:	6819      	ldreq	r1, [r3, #0]
 8006cf8:	685b      	ldreq	r3, [r3, #4]
 8006cfa:	1809      	addeq	r1, r1, r0
 8006cfc:	6021      	streq	r1, [r4, #0]
 8006cfe:	6063      	str	r3, [r4, #4]
 8006d00:	6054      	str	r4, [r2, #4]
 8006d02:	e7c9      	b.n	8006c98 <_free_r+0x24>
 8006d04:	bd38      	pop	{r3, r4, r5, pc}
 8006d06:	bf00      	nop
 8006d08:	200001fc 	.word	0x200001fc

08006d0c <_malloc_r>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	1ccd      	adds	r5, r1, #3
 8006d10:	f025 0503 	bic.w	r5, r5, #3
 8006d14:	3508      	adds	r5, #8
 8006d16:	2d0c      	cmp	r5, #12
 8006d18:	bf38      	it	cc
 8006d1a:	250c      	movcc	r5, #12
 8006d1c:	2d00      	cmp	r5, #0
 8006d1e:	4606      	mov	r6, r0
 8006d20:	db01      	blt.n	8006d26 <_malloc_r+0x1a>
 8006d22:	42a9      	cmp	r1, r5
 8006d24:	d903      	bls.n	8006d2e <_malloc_r+0x22>
 8006d26:	230c      	movs	r3, #12
 8006d28:	6033      	str	r3, [r6, #0]
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d2e:	f000 f9f5 	bl	800711c <__malloc_lock>
 8006d32:	4921      	ldr	r1, [pc, #132]	; (8006db8 <_malloc_r+0xac>)
 8006d34:	680a      	ldr	r2, [r1, #0]
 8006d36:	4614      	mov	r4, r2
 8006d38:	b99c      	cbnz	r4, 8006d62 <_malloc_r+0x56>
 8006d3a:	4f20      	ldr	r7, [pc, #128]	; (8006dbc <_malloc_r+0xb0>)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	b923      	cbnz	r3, 8006d4a <_malloc_r+0x3e>
 8006d40:	4621      	mov	r1, r4
 8006d42:	4630      	mov	r0, r6
 8006d44:	f000 f998 	bl	8007078 <_sbrk_r>
 8006d48:	6038      	str	r0, [r7, #0]
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f000 f993 	bl	8007078 <_sbrk_r>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	d123      	bne.n	8006d9e <_malloc_r+0x92>
 8006d56:	230c      	movs	r3, #12
 8006d58:	4630      	mov	r0, r6
 8006d5a:	6033      	str	r3, [r6, #0]
 8006d5c:	f000 f9e4 	bl	8007128 <__malloc_unlock>
 8006d60:	e7e3      	b.n	8006d2a <_malloc_r+0x1e>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	1b5b      	subs	r3, r3, r5
 8006d66:	d417      	bmi.n	8006d98 <_malloc_r+0x8c>
 8006d68:	2b0b      	cmp	r3, #11
 8006d6a:	d903      	bls.n	8006d74 <_malloc_r+0x68>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	441c      	add	r4, r3
 8006d70:	6025      	str	r5, [r4, #0]
 8006d72:	e004      	b.n	8006d7e <_malloc_r+0x72>
 8006d74:	6863      	ldr	r3, [r4, #4]
 8006d76:	42a2      	cmp	r2, r4
 8006d78:	bf0c      	ite	eq
 8006d7a:	600b      	streq	r3, [r1, #0]
 8006d7c:	6053      	strne	r3, [r2, #4]
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f000 f9d2 	bl	8007128 <__malloc_unlock>
 8006d84:	f104 000b 	add.w	r0, r4, #11
 8006d88:	1d23      	adds	r3, r4, #4
 8006d8a:	f020 0007 	bic.w	r0, r0, #7
 8006d8e:	1ac2      	subs	r2, r0, r3
 8006d90:	d0cc      	beq.n	8006d2c <_malloc_r+0x20>
 8006d92:	1a1b      	subs	r3, r3, r0
 8006d94:	50a3      	str	r3, [r4, r2]
 8006d96:	e7c9      	b.n	8006d2c <_malloc_r+0x20>
 8006d98:	4622      	mov	r2, r4
 8006d9a:	6864      	ldr	r4, [r4, #4]
 8006d9c:	e7cc      	b.n	8006d38 <_malloc_r+0x2c>
 8006d9e:	1cc4      	adds	r4, r0, #3
 8006da0:	f024 0403 	bic.w	r4, r4, #3
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d0e3      	beq.n	8006d70 <_malloc_r+0x64>
 8006da8:	1a21      	subs	r1, r4, r0
 8006daa:	4630      	mov	r0, r6
 8006dac:	f000 f964 	bl	8007078 <_sbrk_r>
 8006db0:	3001      	adds	r0, #1
 8006db2:	d1dd      	bne.n	8006d70 <_malloc_r+0x64>
 8006db4:	e7cf      	b.n	8006d56 <_malloc_r+0x4a>
 8006db6:	bf00      	nop
 8006db8:	200001fc 	.word	0x200001fc
 8006dbc:	20000200 	.word	0x20000200

08006dc0 <__ssputs_r>:
 8006dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc4:	688e      	ldr	r6, [r1, #8]
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	429e      	cmp	r6, r3
 8006dca:	460c      	mov	r4, r1
 8006dcc:	4690      	mov	r8, r2
 8006dce:	461f      	mov	r7, r3
 8006dd0:	d838      	bhi.n	8006e44 <__ssputs_r+0x84>
 8006dd2:	898a      	ldrh	r2, [r1, #12]
 8006dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dd8:	d032      	beq.n	8006e40 <__ssputs_r+0x80>
 8006dda:	6825      	ldr	r5, [r4, #0]
 8006ddc:	6909      	ldr	r1, [r1, #16]
 8006dde:	3301      	adds	r3, #1
 8006de0:	eba5 0901 	sub.w	r9, r5, r1
 8006de4:	6965      	ldr	r5, [r4, #20]
 8006de6:	444b      	add	r3, r9
 8006de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006df0:	106d      	asrs	r5, r5, #1
 8006df2:	429d      	cmp	r5, r3
 8006df4:	bf38      	it	cc
 8006df6:	461d      	movcc	r5, r3
 8006df8:	0553      	lsls	r3, r2, #21
 8006dfa:	d531      	bpl.n	8006e60 <__ssputs_r+0xa0>
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	f7ff ff85 	bl	8006d0c <_malloc_r>
 8006e02:	4606      	mov	r6, r0
 8006e04:	b950      	cbnz	r0, 8006e1c <__ssputs_r+0x5c>
 8006e06:	230c      	movs	r3, #12
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0c:	f8ca 3000 	str.w	r3, [sl]
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1c:	464a      	mov	r2, r9
 8006e1e:	6921      	ldr	r1, [r4, #16]
 8006e20:	f7ff fb8a 	bl	8006538 <memcpy>
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	6126      	str	r6, [r4, #16]
 8006e32:	444e      	add	r6, r9
 8006e34:	6026      	str	r6, [r4, #0]
 8006e36:	463e      	mov	r6, r7
 8006e38:	6165      	str	r5, [r4, #20]
 8006e3a:	eba5 0509 	sub.w	r5, r5, r9
 8006e3e:	60a5      	str	r5, [r4, #8]
 8006e40:	42be      	cmp	r6, r7
 8006e42:	d900      	bls.n	8006e46 <__ssputs_r+0x86>
 8006e44:	463e      	mov	r6, r7
 8006e46:	4632      	mov	r2, r6
 8006e48:	4641      	mov	r1, r8
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	f7fe f83a 	bl	8004ec4 <memmove>
 8006e50:	68a3      	ldr	r3, [r4, #8]
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	1b9b      	subs	r3, r3, r6
 8006e56:	4432      	add	r2, r6
 8006e58:	2000      	movs	r0, #0
 8006e5a:	60a3      	str	r3, [r4, #8]
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	e7db      	b.n	8006e18 <__ssputs_r+0x58>
 8006e60:	462a      	mov	r2, r5
 8006e62:	f000 f967 	bl	8007134 <_realloc_r>
 8006e66:	4606      	mov	r6, r0
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d1e1      	bne.n	8006e30 <__ssputs_r+0x70>
 8006e6c:	4650      	mov	r0, sl
 8006e6e:	6921      	ldr	r1, [r4, #16]
 8006e70:	f7ff ff00 	bl	8006c74 <_free_r>
 8006e74:	e7c7      	b.n	8006e06 <__ssputs_r+0x46>
	...

08006e78 <_svfiprintf_r>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	4698      	mov	r8, r3
 8006e7e:	898b      	ldrh	r3, [r1, #12]
 8006e80:	4607      	mov	r7, r0
 8006e82:	061b      	lsls	r3, r3, #24
 8006e84:	460d      	mov	r5, r1
 8006e86:	4614      	mov	r4, r2
 8006e88:	b09d      	sub	sp, #116	; 0x74
 8006e8a:	d50e      	bpl.n	8006eaa <_svfiprintf_r+0x32>
 8006e8c:	690b      	ldr	r3, [r1, #16]
 8006e8e:	b963      	cbnz	r3, 8006eaa <_svfiprintf_r+0x32>
 8006e90:	2140      	movs	r1, #64	; 0x40
 8006e92:	f7ff ff3b 	bl	8006d0c <_malloc_r>
 8006e96:	6028      	str	r0, [r5, #0]
 8006e98:	6128      	str	r0, [r5, #16]
 8006e9a:	b920      	cbnz	r0, 8006ea6 <_svfiprintf_r+0x2e>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea4:	e0d1      	b.n	800704a <_svfiprintf_r+0x1d2>
 8006ea6:	2340      	movs	r3, #64	; 0x40
 8006ea8:	616b      	str	r3, [r5, #20]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9309      	str	r3, [sp, #36]	; 0x24
 8006eae:	2320      	movs	r3, #32
 8006eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb4:	2330      	movs	r3, #48	; 0x30
 8006eb6:	f04f 0901 	mov.w	r9, #1
 8006eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007064 <_svfiprintf_r+0x1ec>
 8006ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	469a      	mov	sl, r3
 8006eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ece:	b10a      	cbz	r2, 8006ed4 <_svfiprintf_r+0x5c>
 8006ed0:	2a25      	cmp	r2, #37	; 0x25
 8006ed2:	d1f9      	bne.n	8006ec8 <_svfiprintf_r+0x50>
 8006ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed8:	d00b      	beq.n	8006ef2 <_svfiprintf_r+0x7a>
 8006eda:	465b      	mov	r3, fp
 8006edc:	4622      	mov	r2, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7ff ff6d 	bl	8006dc0 <__ssputs_r>
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f000 80aa 	beq.w	8007040 <_svfiprintf_r+0x1c8>
 8006eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eee:	445a      	add	r2, fp
 8006ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 80a2 	beq.w	8007040 <_svfiprintf_r+0x1c8>
 8006efc:	2300      	movs	r3, #0
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f06:	f10a 0a01 	add.w	sl, sl, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	9307      	str	r3, [sp, #28]
 8006f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f12:	931a      	str	r3, [sp, #104]	; 0x68
 8006f14:	4654      	mov	r4, sl
 8006f16:	2205      	movs	r2, #5
 8006f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1c:	4851      	ldr	r0, [pc, #324]	; (8007064 <_svfiprintf_r+0x1ec>)
 8006f1e:	f7ff fafd 	bl	800651c <memchr>
 8006f22:	9a04      	ldr	r2, [sp, #16]
 8006f24:	b9d8      	cbnz	r0, 8006f5e <_svfiprintf_r+0xe6>
 8006f26:	06d0      	lsls	r0, r2, #27
 8006f28:	bf44      	itt	mi
 8006f2a:	2320      	movmi	r3, #32
 8006f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f30:	0711      	lsls	r1, r2, #28
 8006f32:	bf44      	itt	mi
 8006f34:	232b      	movmi	r3, #43	; 0x2b
 8006f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f40:	d015      	beq.n	8006f6e <_svfiprintf_r+0xf6>
 8006f42:	4654      	mov	r4, sl
 8006f44:	2000      	movs	r0, #0
 8006f46:	f04f 0c0a 	mov.w	ip, #10
 8006f4a:	9a07      	ldr	r2, [sp, #28]
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f52:	3b30      	subs	r3, #48	; 0x30
 8006f54:	2b09      	cmp	r3, #9
 8006f56:	d94e      	bls.n	8006ff6 <_svfiprintf_r+0x17e>
 8006f58:	b1b0      	cbz	r0, 8006f88 <_svfiprintf_r+0x110>
 8006f5a:	9207      	str	r2, [sp, #28]
 8006f5c:	e014      	b.n	8006f88 <_svfiprintf_r+0x110>
 8006f5e:	eba0 0308 	sub.w	r3, r0, r8
 8006f62:	fa09 f303 	lsl.w	r3, r9, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	46a2      	mov	sl, r4
 8006f6a:	9304      	str	r3, [sp, #16]
 8006f6c:	e7d2      	b.n	8006f14 <_svfiprintf_r+0x9c>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	1d19      	adds	r1, r3, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	9103      	str	r1, [sp, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbb      	ittet	lt
 8006f7a:	425b      	neglt	r3, r3
 8006f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f80:	9307      	strge	r3, [sp, #28]
 8006f82:	9307      	strlt	r3, [sp, #28]
 8006f84:	bfb8      	it	lt
 8006f86:	9204      	strlt	r2, [sp, #16]
 8006f88:	7823      	ldrb	r3, [r4, #0]
 8006f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8c:	d10c      	bne.n	8006fa8 <_svfiprintf_r+0x130>
 8006f8e:	7863      	ldrb	r3, [r4, #1]
 8006f90:	2b2a      	cmp	r3, #42	; 0x2a
 8006f92:	d135      	bne.n	8007000 <_svfiprintf_r+0x188>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	3402      	adds	r4, #2
 8006f98:	1d1a      	adds	r2, r3, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	9203      	str	r2, [sp, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	bfb8      	it	lt
 8006fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa6:	9305      	str	r3, [sp, #20]
 8006fa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007074 <_svfiprintf_r+0x1fc>
 8006fac:	2203      	movs	r2, #3
 8006fae:	4650      	mov	r0, sl
 8006fb0:	7821      	ldrb	r1, [r4, #0]
 8006fb2:	f7ff fab3 	bl	800651c <memchr>
 8006fb6:	b140      	cbz	r0, 8006fca <_svfiprintf_r+0x152>
 8006fb8:	2340      	movs	r3, #64	; 0x40
 8006fba:	eba0 000a 	sub.w	r0, r0, sl
 8006fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	3401      	adds	r4, #1
 8006fc6:	4303      	orrs	r3, r0
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fce:	2206      	movs	r2, #6
 8006fd0:	4825      	ldr	r0, [pc, #148]	; (8007068 <_svfiprintf_r+0x1f0>)
 8006fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd6:	f7ff faa1 	bl	800651c <memchr>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d038      	beq.n	8007050 <_svfiprintf_r+0x1d8>
 8006fde:	4b23      	ldr	r3, [pc, #140]	; (800706c <_svfiprintf_r+0x1f4>)
 8006fe0:	bb1b      	cbnz	r3, 800702a <_svfiprintf_r+0x1b2>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	3307      	adds	r3, #7
 8006fe6:	f023 0307 	bic.w	r3, r3, #7
 8006fea:	3308      	adds	r3, #8
 8006fec:	9303      	str	r3, [sp, #12]
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	4433      	add	r3, r6
 8006ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff4:	e767      	b.n	8006ec6 <_svfiprintf_r+0x4e>
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ffe:	e7a5      	b.n	8006f4c <_svfiprintf_r+0xd4>
 8007000:	2300      	movs	r3, #0
 8007002:	f04f 0c0a 	mov.w	ip, #10
 8007006:	4619      	mov	r1, r3
 8007008:	3401      	adds	r4, #1
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	4620      	mov	r0, r4
 800700e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007012:	3a30      	subs	r2, #48	; 0x30
 8007014:	2a09      	cmp	r2, #9
 8007016:	d903      	bls.n	8007020 <_svfiprintf_r+0x1a8>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0c5      	beq.n	8006fa8 <_svfiprintf_r+0x130>
 800701c:	9105      	str	r1, [sp, #20]
 800701e:	e7c3      	b.n	8006fa8 <_svfiprintf_r+0x130>
 8007020:	4604      	mov	r4, r0
 8007022:	2301      	movs	r3, #1
 8007024:	fb0c 2101 	mla	r1, ip, r1, r2
 8007028:	e7f0      	b.n	800700c <_svfiprintf_r+0x194>
 800702a:	ab03      	add	r3, sp, #12
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	462a      	mov	r2, r5
 8007030:	4638      	mov	r0, r7
 8007032:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <_svfiprintf_r+0x1f8>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	f7fe f805 	bl	8005044 <_printf_float>
 800703a:	1c42      	adds	r2, r0, #1
 800703c:	4606      	mov	r6, r0
 800703e:	d1d6      	bne.n	8006fee <_svfiprintf_r+0x176>
 8007040:	89ab      	ldrh	r3, [r5, #12]
 8007042:	065b      	lsls	r3, r3, #25
 8007044:	f53f af2c 	bmi.w	8006ea0 <_svfiprintf_r+0x28>
 8007048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800704a:	b01d      	add	sp, #116	; 0x74
 800704c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007050:	ab03      	add	r3, sp, #12
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	462a      	mov	r2, r5
 8007056:	4638      	mov	r0, r7
 8007058:	4b05      	ldr	r3, [pc, #20]	; (8007070 <_svfiprintf_r+0x1f8>)
 800705a:	a904      	add	r1, sp, #16
 800705c:	f7fe fa8e 	bl	800557c <_printf_i>
 8007060:	e7eb      	b.n	800703a <_svfiprintf_r+0x1c2>
 8007062:	bf00      	nop
 8007064:	08008154 	.word	0x08008154
 8007068:	0800815e 	.word	0x0800815e
 800706c:	08005045 	.word	0x08005045
 8007070:	08006dc1 	.word	0x08006dc1
 8007074:	0800815a 	.word	0x0800815a

08007078 <_sbrk_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	2300      	movs	r3, #0
 800707c:	4d05      	ldr	r5, [pc, #20]	; (8007094 <_sbrk_r+0x1c>)
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7fa ffb8 	bl	8001ff8 <_sbrk>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_sbrk_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_sbrk_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	20000358 	.word	0x20000358

08007098 <__assert_func>:
 8007098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800709a:	4614      	mov	r4, r2
 800709c:	461a      	mov	r2, r3
 800709e:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <__assert_func+0x2c>)
 80070a0:	4605      	mov	r5, r0
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68d8      	ldr	r0, [r3, #12]
 80070a6:	b14c      	cbz	r4, 80070bc <__assert_func+0x24>
 80070a8:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <__assert_func+0x30>)
 80070aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070ae:	9100      	str	r1, [sp, #0]
 80070b0:	462b      	mov	r3, r5
 80070b2:	4906      	ldr	r1, [pc, #24]	; (80070cc <__assert_func+0x34>)
 80070b4:	f000 f80e 	bl	80070d4 <fiprintf>
 80070b8:	f000 fa88 	bl	80075cc <abort>
 80070bc:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <__assert_func+0x38>)
 80070be:	461c      	mov	r4, r3
 80070c0:	e7f3      	b.n	80070aa <__assert_func+0x12>
 80070c2:	bf00      	nop
 80070c4:	2000000c 	.word	0x2000000c
 80070c8:	08008165 	.word	0x08008165
 80070cc:	08008172 	.word	0x08008172
 80070d0:	080081a0 	.word	0x080081a0

080070d4 <fiprintf>:
 80070d4:	b40e      	push	{r1, r2, r3}
 80070d6:	b503      	push	{r0, r1, lr}
 80070d8:	4601      	mov	r1, r0
 80070da:	ab03      	add	r3, sp, #12
 80070dc:	4805      	ldr	r0, [pc, #20]	; (80070f4 <fiprintf+0x20>)
 80070de:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e2:	6800      	ldr	r0, [r0, #0]
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	f000 f873 	bl	80071d0 <_vfiprintf_r>
 80070ea:	b002      	add	sp, #8
 80070ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f0:	b003      	add	sp, #12
 80070f2:	4770      	bx	lr
 80070f4:	2000000c 	.word	0x2000000c

080070f8 <__ascii_mbtowc>:
 80070f8:	b082      	sub	sp, #8
 80070fa:	b901      	cbnz	r1, 80070fe <__ascii_mbtowc+0x6>
 80070fc:	a901      	add	r1, sp, #4
 80070fe:	b142      	cbz	r2, 8007112 <__ascii_mbtowc+0x1a>
 8007100:	b14b      	cbz	r3, 8007116 <__ascii_mbtowc+0x1e>
 8007102:	7813      	ldrb	r3, [r2, #0]
 8007104:	600b      	str	r3, [r1, #0]
 8007106:	7812      	ldrb	r2, [r2, #0]
 8007108:	1e10      	subs	r0, r2, #0
 800710a:	bf18      	it	ne
 800710c:	2001      	movne	r0, #1
 800710e:	b002      	add	sp, #8
 8007110:	4770      	bx	lr
 8007112:	4610      	mov	r0, r2
 8007114:	e7fb      	b.n	800710e <__ascii_mbtowc+0x16>
 8007116:	f06f 0001 	mvn.w	r0, #1
 800711a:	e7f8      	b.n	800710e <__ascii_mbtowc+0x16>

0800711c <__malloc_lock>:
 800711c:	4801      	ldr	r0, [pc, #4]	; (8007124 <__malloc_lock+0x8>)
 800711e:	f000 bc15 	b.w	800794c <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	20000360 	.word	0x20000360

08007128 <__malloc_unlock>:
 8007128:	4801      	ldr	r0, [pc, #4]	; (8007130 <__malloc_unlock+0x8>)
 800712a:	f000 bc10 	b.w	800794e <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	20000360 	.word	0x20000360

08007134 <_realloc_r>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	4607      	mov	r7, r0
 8007138:	4614      	mov	r4, r2
 800713a:	460e      	mov	r6, r1
 800713c:	b921      	cbnz	r1, 8007148 <_realloc_r+0x14>
 800713e:	4611      	mov	r1, r2
 8007140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007144:	f7ff bde2 	b.w	8006d0c <_malloc_r>
 8007148:	b922      	cbnz	r2, 8007154 <_realloc_r+0x20>
 800714a:	f7ff fd93 	bl	8006c74 <_free_r>
 800714e:	4625      	mov	r5, r4
 8007150:	4628      	mov	r0, r5
 8007152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007154:	f000 fc60 	bl	8007a18 <_malloc_usable_size_r>
 8007158:	42a0      	cmp	r0, r4
 800715a:	d20f      	bcs.n	800717c <_realloc_r+0x48>
 800715c:	4621      	mov	r1, r4
 800715e:	4638      	mov	r0, r7
 8007160:	f7ff fdd4 	bl	8006d0c <_malloc_r>
 8007164:	4605      	mov	r5, r0
 8007166:	2800      	cmp	r0, #0
 8007168:	d0f2      	beq.n	8007150 <_realloc_r+0x1c>
 800716a:	4631      	mov	r1, r6
 800716c:	4622      	mov	r2, r4
 800716e:	f7ff f9e3 	bl	8006538 <memcpy>
 8007172:	4631      	mov	r1, r6
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff fd7d 	bl	8006c74 <_free_r>
 800717a:	e7e9      	b.n	8007150 <_realloc_r+0x1c>
 800717c:	4635      	mov	r5, r6
 800717e:	e7e7      	b.n	8007150 <_realloc_r+0x1c>

08007180 <__sfputc_r>:
 8007180:	6893      	ldr	r3, [r2, #8]
 8007182:	b410      	push	{r4}
 8007184:	3b01      	subs	r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	6093      	str	r3, [r2, #8]
 800718a:	da07      	bge.n	800719c <__sfputc_r+0x1c>
 800718c:	6994      	ldr	r4, [r2, #24]
 800718e:	42a3      	cmp	r3, r4
 8007190:	db01      	blt.n	8007196 <__sfputc_r+0x16>
 8007192:	290a      	cmp	r1, #10
 8007194:	d102      	bne.n	800719c <__sfputc_r+0x1c>
 8007196:	bc10      	pop	{r4}
 8007198:	f000 b94a 	b.w	8007430 <__swbuf_r>
 800719c:	6813      	ldr	r3, [r2, #0]
 800719e:	1c58      	adds	r0, r3, #1
 80071a0:	6010      	str	r0, [r2, #0]
 80071a2:	7019      	strb	r1, [r3, #0]
 80071a4:	4608      	mov	r0, r1
 80071a6:	bc10      	pop	{r4}
 80071a8:	4770      	bx	lr

080071aa <__sfputs_r>:
 80071aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ac:	4606      	mov	r6, r0
 80071ae:	460f      	mov	r7, r1
 80071b0:	4614      	mov	r4, r2
 80071b2:	18d5      	adds	r5, r2, r3
 80071b4:	42ac      	cmp	r4, r5
 80071b6:	d101      	bne.n	80071bc <__sfputs_r+0x12>
 80071b8:	2000      	movs	r0, #0
 80071ba:	e007      	b.n	80071cc <__sfputs_r+0x22>
 80071bc:	463a      	mov	r2, r7
 80071be:	4630      	mov	r0, r6
 80071c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c4:	f7ff ffdc 	bl	8007180 <__sfputc_r>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d1f3      	bne.n	80071b4 <__sfputs_r+0xa>
 80071cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071d0 <_vfiprintf_r>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	460d      	mov	r5, r1
 80071d6:	4614      	mov	r4, r2
 80071d8:	4698      	mov	r8, r3
 80071da:	4606      	mov	r6, r0
 80071dc:	b09d      	sub	sp, #116	; 0x74
 80071de:	b118      	cbz	r0, 80071e8 <_vfiprintf_r+0x18>
 80071e0:	6983      	ldr	r3, [r0, #24]
 80071e2:	b90b      	cbnz	r3, 80071e8 <_vfiprintf_r+0x18>
 80071e4:	f000 fb14 	bl	8007810 <__sinit>
 80071e8:	4b89      	ldr	r3, [pc, #548]	; (8007410 <_vfiprintf_r+0x240>)
 80071ea:	429d      	cmp	r5, r3
 80071ec:	d11b      	bne.n	8007226 <_vfiprintf_r+0x56>
 80071ee:	6875      	ldr	r5, [r6, #4]
 80071f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071f2:	07d9      	lsls	r1, r3, #31
 80071f4:	d405      	bmi.n	8007202 <_vfiprintf_r+0x32>
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	059a      	lsls	r2, r3, #22
 80071fa:	d402      	bmi.n	8007202 <_vfiprintf_r+0x32>
 80071fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071fe:	f000 fba5 	bl	800794c <__retarget_lock_acquire_recursive>
 8007202:	89ab      	ldrh	r3, [r5, #12]
 8007204:	071b      	lsls	r3, r3, #28
 8007206:	d501      	bpl.n	800720c <_vfiprintf_r+0x3c>
 8007208:	692b      	ldr	r3, [r5, #16]
 800720a:	b9eb      	cbnz	r3, 8007248 <_vfiprintf_r+0x78>
 800720c:	4629      	mov	r1, r5
 800720e:	4630      	mov	r0, r6
 8007210:	f000 f96e 	bl	80074f0 <__swsetup_r>
 8007214:	b1c0      	cbz	r0, 8007248 <_vfiprintf_r+0x78>
 8007216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007218:	07dc      	lsls	r4, r3, #31
 800721a:	d50e      	bpl.n	800723a <_vfiprintf_r+0x6a>
 800721c:	f04f 30ff 	mov.w	r0, #4294967295
 8007220:	b01d      	add	sp, #116	; 0x74
 8007222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007226:	4b7b      	ldr	r3, [pc, #492]	; (8007414 <_vfiprintf_r+0x244>)
 8007228:	429d      	cmp	r5, r3
 800722a:	d101      	bne.n	8007230 <_vfiprintf_r+0x60>
 800722c:	68b5      	ldr	r5, [r6, #8]
 800722e:	e7df      	b.n	80071f0 <_vfiprintf_r+0x20>
 8007230:	4b79      	ldr	r3, [pc, #484]	; (8007418 <_vfiprintf_r+0x248>)
 8007232:	429d      	cmp	r5, r3
 8007234:	bf08      	it	eq
 8007236:	68f5      	ldreq	r5, [r6, #12]
 8007238:	e7da      	b.n	80071f0 <_vfiprintf_r+0x20>
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	0598      	lsls	r0, r3, #22
 800723e:	d4ed      	bmi.n	800721c <_vfiprintf_r+0x4c>
 8007240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007242:	f000 fb84 	bl	800794e <__retarget_lock_release_recursive>
 8007246:	e7e9      	b.n	800721c <_vfiprintf_r+0x4c>
 8007248:	2300      	movs	r3, #0
 800724a:	9309      	str	r3, [sp, #36]	; 0x24
 800724c:	2320      	movs	r3, #32
 800724e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007252:	2330      	movs	r3, #48	; 0x30
 8007254:	f04f 0901 	mov.w	r9, #1
 8007258:	f8cd 800c 	str.w	r8, [sp, #12]
 800725c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800741c <_vfiprintf_r+0x24c>
 8007260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007264:	4623      	mov	r3, r4
 8007266:	469a      	mov	sl, r3
 8007268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726c:	b10a      	cbz	r2, 8007272 <_vfiprintf_r+0xa2>
 800726e:	2a25      	cmp	r2, #37	; 0x25
 8007270:	d1f9      	bne.n	8007266 <_vfiprintf_r+0x96>
 8007272:	ebba 0b04 	subs.w	fp, sl, r4
 8007276:	d00b      	beq.n	8007290 <_vfiprintf_r+0xc0>
 8007278:	465b      	mov	r3, fp
 800727a:	4622      	mov	r2, r4
 800727c:	4629      	mov	r1, r5
 800727e:	4630      	mov	r0, r6
 8007280:	f7ff ff93 	bl	80071aa <__sfputs_r>
 8007284:	3001      	adds	r0, #1
 8007286:	f000 80aa 	beq.w	80073de <_vfiprintf_r+0x20e>
 800728a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800728c:	445a      	add	r2, fp
 800728e:	9209      	str	r2, [sp, #36]	; 0x24
 8007290:	f89a 3000 	ldrb.w	r3, [sl]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 80a2 	beq.w	80073de <_vfiprintf_r+0x20e>
 800729a:	2300      	movs	r3, #0
 800729c:	f04f 32ff 	mov.w	r2, #4294967295
 80072a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072a4:	f10a 0a01 	add.w	sl, sl, #1
 80072a8:	9304      	str	r3, [sp, #16]
 80072aa:	9307      	str	r3, [sp, #28]
 80072ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072b0:	931a      	str	r3, [sp, #104]	; 0x68
 80072b2:	4654      	mov	r4, sl
 80072b4:	2205      	movs	r2, #5
 80072b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ba:	4858      	ldr	r0, [pc, #352]	; (800741c <_vfiprintf_r+0x24c>)
 80072bc:	f7ff f92e 	bl	800651c <memchr>
 80072c0:	9a04      	ldr	r2, [sp, #16]
 80072c2:	b9d8      	cbnz	r0, 80072fc <_vfiprintf_r+0x12c>
 80072c4:	06d1      	lsls	r1, r2, #27
 80072c6:	bf44      	itt	mi
 80072c8:	2320      	movmi	r3, #32
 80072ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ce:	0713      	lsls	r3, r2, #28
 80072d0:	bf44      	itt	mi
 80072d2:	232b      	movmi	r3, #43	; 0x2b
 80072d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d8:	f89a 3000 	ldrb.w	r3, [sl]
 80072dc:	2b2a      	cmp	r3, #42	; 0x2a
 80072de:	d015      	beq.n	800730c <_vfiprintf_r+0x13c>
 80072e0:	4654      	mov	r4, sl
 80072e2:	2000      	movs	r0, #0
 80072e4:	f04f 0c0a 	mov.w	ip, #10
 80072e8:	9a07      	ldr	r2, [sp, #28]
 80072ea:	4621      	mov	r1, r4
 80072ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072f0:	3b30      	subs	r3, #48	; 0x30
 80072f2:	2b09      	cmp	r3, #9
 80072f4:	d94e      	bls.n	8007394 <_vfiprintf_r+0x1c4>
 80072f6:	b1b0      	cbz	r0, 8007326 <_vfiprintf_r+0x156>
 80072f8:	9207      	str	r2, [sp, #28]
 80072fa:	e014      	b.n	8007326 <_vfiprintf_r+0x156>
 80072fc:	eba0 0308 	sub.w	r3, r0, r8
 8007300:	fa09 f303 	lsl.w	r3, r9, r3
 8007304:	4313      	orrs	r3, r2
 8007306:	46a2      	mov	sl, r4
 8007308:	9304      	str	r3, [sp, #16]
 800730a:	e7d2      	b.n	80072b2 <_vfiprintf_r+0xe2>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	1d19      	adds	r1, r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	9103      	str	r1, [sp, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	bfbb      	ittet	lt
 8007318:	425b      	neglt	r3, r3
 800731a:	f042 0202 	orrlt.w	r2, r2, #2
 800731e:	9307      	strge	r3, [sp, #28]
 8007320:	9307      	strlt	r3, [sp, #28]
 8007322:	bfb8      	it	lt
 8007324:	9204      	strlt	r2, [sp, #16]
 8007326:	7823      	ldrb	r3, [r4, #0]
 8007328:	2b2e      	cmp	r3, #46	; 0x2e
 800732a:	d10c      	bne.n	8007346 <_vfiprintf_r+0x176>
 800732c:	7863      	ldrb	r3, [r4, #1]
 800732e:	2b2a      	cmp	r3, #42	; 0x2a
 8007330:	d135      	bne.n	800739e <_vfiprintf_r+0x1ce>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	3402      	adds	r4, #2
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	9203      	str	r2, [sp, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	bfb8      	it	lt
 8007340:	f04f 33ff 	movlt.w	r3, #4294967295
 8007344:	9305      	str	r3, [sp, #20]
 8007346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800742c <_vfiprintf_r+0x25c>
 800734a:	2203      	movs	r2, #3
 800734c:	4650      	mov	r0, sl
 800734e:	7821      	ldrb	r1, [r4, #0]
 8007350:	f7ff f8e4 	bl	800651c <memchr>
 8007354:	b140      	cbz	r0, 8007368 <_vfiprintf_r+0x198>
 8007356:	2340      	movs	r3, #64	; 0x40
 8007358:	eba0 000a 	sub.w	r0, r0, sl
 800735c:	fa03 f000 	lsl.w	r0, r3, r0
 8007360:	9b04      	ldr	r3, [sp, #16]
 8007362:	3401      	adds	r4, #1
 8007364:	4303      	orrs	r3, r0
 8007366:	9304      	str	r3, [sp, #16]
 8007368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736c:	2206      	movs	r2, #6
 800736e:	482c      	ldr	r0, [pc, #176]	; (8007420 <_vfiprintf_r+0x250>)
 8007370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007374:	f7ff f8d2 	bl	800651c <memchr>
 8007378:	2800      	cmp	r0, #0
 800737a:	d03f      	beq.n	80073fc <_vfiprintf_r+0x22c>
 800737c:	4b29      	ldr	r3, [pc, #164]	; (8007424 <_vfiprintf_r+0x254>)
 800737e:	bb1b      	cbnz	r3, 80073c8 <_vfiprintf_r+0x1f8>
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	3307      	adds	r3, #7
 8007384:	f023 0307 	bic.w	r3, r3, #7
 8007388:	3308      	adds	r3, #8
 800738a:	9303      	str	r3, [sp, #12]
 800738c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738e:	443b      	add	r3, r7
 8007390:	9309      	str	r3, [sp, #36]	; 0x24
 8007392:	e767      	b.n	8007264 <_vfiprintf_r+0x94>
 8007394:	460c      	mov	r4, r1
 8007396:	2001      	movs	r0, #1
 8007398:	fb0c 3202 	mla	r2, ip, r2, r3
 800739c:	e7a5      	b.n	80072ea <_vfiprintf_r+0x11a>
 800739e:	2300      	movs	r3, #0
 80073a0:	f04f 0c0a 	mov.w	ip, #10
 80073a4:	4619      	mov	r1, r3
 80073a6:	3401      	adds	r4, #1
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	4620      	mov	r0, r4
 80073ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073b0:	3a30      	subs	r2, #48	; 0x30
 80073b2:	2a09      	cmp	r2, #9
 80073b4:	d903      	bls.n	80073be <_vfiprintf_r+0x1ee>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0c5      	beq.n	8007346 <_vfiprintf_r+0x176>
 80073ba:	9105      	str	r1, [sp, #20]
 80073bc:	e7c3      	b.n	8007346 <_vfiprintf_r+0x176>
 80073be:	4604      	mov	r4, r0
 80073c0:	2301      	movs	r3, #1
 80073c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80073c6:	e7f0      	b.n	80073aa <_vfiprintf_r+0x1da>
 80073c8:	ab03      	add	r3, sp, #12
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	462a      	mov	r2, r5
 80073ce:	4630      	mov	r0, r6
 80073d0:	4b15      	ldr	r3, [pc, #84]	; (8007428 <_vfiprintf_r+0x258>)
 80073d2:	a904      	add	r1, sp, #16
 80073d4:	f7fd fe36 	bl	8005044 <_printf_float>
 80073d8:	4607      	mov	r7, r0
 80073da:	1c78      	adds	r0, r7, #1
 80073dc:	d1d6      	bne.n	800738c <_vfiprintf_r+0x1bc>
 80073de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073e0:	07d9      	lsls	r1, r3, #31
 80073e2:	d405      	bmi.n	80073f0 <_vfiprintf_r+0x220>
 80073e4:	89ab      	ldrh	r3, [r5, #12]
 80073e6:	059a      	lsls	r2, r3, #22
 80073e8:	d402      	bmi.n	80073f0 <_vfiprintf_r+0x220>
 80073ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ec:	f000 faaf 	bl	800794e <__retarget_lock_release_recursive>
 80073f0:	89ab      	ldrh	r3, [r5, #12]
 80073f2:	065b      	lsls	r3, r3, #25
 80073f4:	f53f af12 	bmi.w	800721c <_vfiprintf_r+0x4c>
 80073f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073fa:	e711      	b.n	8007220 <_vfiprintf_r+0x50>
 80073fc:	ab03      	add	r3, sp, #12
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	462a      	mov	r2, r5
 8007402:	4630      	mov	r0, r6
 8007404:	4b08      	ldr	r3, [pc, #32]	; (8007428 <_vfiprintf_r+0x258>)
 8007406:	a904      	add	r1, sp, #16
 8007408:	f7fe f8b8 	bl	800557c <_printf_i>
 800740c:	e7e4      	b.n	80073d8 <_vfiprintf_r+0x208>
 800740e:	bf00      	nop
 8007410:	080082cc 	.word	0x080082cc
 8007414:	080082ec 	.word	0x080082ec
 8007418:	080082ac 	.word	0x080082ac
 800741c:	08008154 	.word	0x08008154
 8007420:	0800815e 	.word	0x0800815e
 8007424:	08005045 	.word	0x08005045
 8007428:	080071ab 	.word	0x080071ab
 800742c:	0800815a 	.word	0x0800815a

08007430 <__swbuf_r>:
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007432:	460e      	mov	r6, r1
 8007434:	4614      	mov	r4, r2
 8007436:	4605      	mov	r5, r0
 8007438:	b118      	cbz	r0, 8007442 <__swbuf_r+0x12>
 800743a:	6983      	ldr	r3, [r0, #24]
 800743c:	b90b      	cbnz	r3, 8007442 <__swbuf_r+0x12>
 800743e:	f000 f9e7 	bl	8007810 <__sinit>
 8007442:	4b21      	ldr	r3, [pc, #132]	; (80074c8 <__swbuf_r+0x98>)
 8007444:	429c      	cmp	r4, r3
 8007446:	d12b      	bne.n	80074a0 <__swbuf_r+0x70>
 8007448:	686c      	ldr	r4, [r5, #4]
 800744a:	69a3      	ldr	r3, [r4, #24]
 800744c:	60a3      	str	r3, [r4, #8]
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	071a      	lsls	r2, r3, #28
 8007452:	d52f      	bpl.n	80074b4 <__swbuf_r+0x84>
 8007454:	6923      	ldr	r3, [r4, #16]
 8007456:	b36b      	cbz	r3, 80074b4 <__swbuf_r+0x84>
 8007458:	6923      	ldr	r3, [r4, #16]
 800745a:	6820      	ldr	r0, [r4, #0]
 800745c:	b2f6      	uxtb	r6, r6
 800745e:	1ac0      	subs	r0, r0, r3
 8007460:	6963      	ldr	r3, [r4, #20]
 8007462:	4637      	mov	r7, r6
 8007464:	4283      	cmp	r3, r0
 8007466:	dc04      	bgt.n	8007472 <__swbuf_r+0x42>
 8007468:	4621      	mov	r1, r4
 800746a:	4628      	mov	r0, r5
 800746c:	f000 f93c 	bl	80076e8 <_fflush_r>
 8007470:	bb30      	cbnz	r0, 80074c0 <__swbuf_r+0x90>
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	3001      	adds	r0, #1
 8007476:	3b01      	subs	r3, #1
 8007478:	60a3      	str	r3, [r4, #8]
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	6022      	str	r2, [r4, #0]
 8007480:	701e      	strb	r6, [r3, #0]
 8007482:	6963      	ldr	r3, [r4, #20]
 8007484:	4283      	cmp	r3, r0
 8007486:	d004      	beq.n	8007492 <__swbuf_r+0x62>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	07db      	lsls	r3, r3, #31
 800748c:	d506      	bpl.n	800749c <__swbuf_r+0x6c>
 800748e:	2e0a      	cmp	r6, #10
 8007490:	d104      	bne.n	800749c <__swbuf_r+0x6c>
 8007492:	4621      	mov	r1, r4
 8007494:	4628      	mov	r0, r5
 8007496:	f000 f927 	bl	80076e8 <_fflush_r>
 800749a:	b988      	cbnz	r0, 80074c0 <__swbuf_r+0x90>
 800749c:	4638      	mov	r0, r7
 800749e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <__swbuf_r+0x9c>)
 80074a2:	429c      	cmp	r4, r3
 80074a4:	d101      	bne.n	80074aa <__swbuf_r+0x7a>
 80074a6:	68ac      	ldr	r4, [r5, #8]
 80074a8:	e7cf      	b.n	800744a <__swbuf_r+0x1a>
 80074aa:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <__swbuf_r+0xa0>)
 80074ac:	429c      	cmp	r4, r3
 80074ae:	bf08      	it	eq
 80074b0:	68ec      	ldreq	r4, [r5, #12]
 80074b2:	e7ca      	b.n	800744a <__swbuf_r+0x1a>
 80074b4:	4621      	mov	r1, r4
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 f81a 	bl	80074f0 <__swsetup_r>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d0cb      	beq.n	8007458 <__swbuf_r+0x28>
 80074c0:	f04f 37ff 	mov.w	r7, #4294967295
 80074c4:	e7ea      	b.n	800749c <__swbuf_r+0x6c>
 80074c6:	bf00      	nop
 80074c8:	080082cc 	.word	0x080082cc
 80074cc:	080082ec 	.word	0x080082ec
 80074d0:	080082ac 	.word	0x080082ac

080074d4 <__ascii_wctomb>:
 80074d4:	4603      	mov	r3, r0
 80074d6:	4608      	mov	r0, r1
 80074d8:	b141      	cbz	r1, 80074ec <__ascii_wctomb+0x18>
 80074da:	2aff      	cmp	r2, #255	; 0xff
 80074dc:	d904      	bls.n	80074e8 <__ascii_wctomb+0x14>
 80074de:	228a      	movs	r2, #138	; 0x8a
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	4770      	bx	lr
 80074e8:	2001      	movs	r0, #1
 80074ea:	700a      	strb	r2, [r1, #0]
 80074ec:	4770      	bx	lr
	...

080074f0 <__swsetup_r>:
 80074f0:	4b32      	ldr	r3, [pc, #200]	; (80075bc <__swsetup_r+0xcc>)
 80074f2:	b570      	push	{r4, r5, r6, lr}
 80074f4:	681d      	ldr	r5, [r3, #0]
 80074f6:	4606      	mov	r6, r0
 80074f8:	460c      	mov	r4, r1
 80074fa:	b125      	cbz	r5, 8007506 <__swsetup_r+0x16>
 80074fc:	69ab      	ldr	r3, [r5, #24]
 80074fe:	b913      	cbnz	r3, 8007506 <__swsetup_r+0x16>
 8007500:	4628      	mov	r0, r5
 8007502:	f000 f985 	bl	8007810 <__sinit>
 8007506:	4b2e      	ldr	r3, [pc, #184]	; (80075c0 <__swsetup_r+0xd0>)
 8007508:	429c      	cmp	r4, r3
 800750a:	d10f      	bne.n	800752c <__swsetup_r+0x3c>
 800750c:	686c      	ldr	r4, [r5, #4]
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007514:	0719      	lsls	r1, r3, #28
 8007516:	d42c      	bmi.n	8007572 <__swsetup_r+0x82>
 8007518:	06dd      	lsls	r5, r3, #27
 800751a:	d411      	bmi.n	8007540 <__swsetup_r+0x50>
 800751c:	2309      	movs	r3, #9
 800751e:	6033      	str	r3, [r6, #0]
 8007520:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	81a3      	strh	r3, [r4, #12]
 800752a:	e03e      	b.n	80075aa <__swsetup_r+0xba>
 800752c:	4b25      	ldr	r3, [pc, #148]	; (80075c4 <__swsetup_r+0xd4>)
 800752e:	429c      	cmp	r4, r3
 8007530:	d101      	bne.n	8007536 <__swsetup_r+0x46>
 8007532:	68ac      	ldr	r4, [r5, #8]
 8007534:	e7eb      	b.n	800750e <__swsetup_r+0x1e>
 8007536:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <__swsetup_r+0xd8>)
 8007538:	429c      	cmp	r4, r3
 800753a:	bf08      	it	eq
 800753c:	68ec      	ldreq	r4, [r5, #12]
 800753e:	e7e6      	b.n	800750e <__swsetup_r+0x1e>
 8007540:	0758      	lsls	r0, r3, #29
 8007542:	d512      	bpl.n	800756a <__swsetup_r+0x7a>
 8007544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007546:	b141      	cbz	r1, 800755a <__swsetup_r+0x6a>
 8007548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800754c:	4299      	cmp	r1, r3
 800754e:	d002      	beq.n	8007556 <__swsetup_r+0x66>
 8007550:	4630      	mov	r0, r6
 8007552:	f7ff fb8f 	bl	8006c74 <_free_r>
 8007556:	2300      	movs	r3, #0
 8007558:	6363      	str	r3, [r4, #52]	; 0x34
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007560:	81a3      	strh	r3, [r4, #12]
 8007562:	2300      	movs	r3, #0
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f043 0308 	orr.w	r3, r3, #8
 8007570:	81a3      	strh	r3, [r4, #12]
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	b94b      	cbnz	r3, 800758a <__swsetup_r+0x9a>
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800757c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007580:	d003      	beq.n	800758a <__swsetup_r+0x9a>
 8007582:	4621      	mov	r1, r4
 8007584:	4630      	mov	r0, r6
 8007586:	f000 fa07 	bl	8007998 <__smakebuf_r>
 800758a:	89a0      	ldrh	r0, [r4, #12]
 800758c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007590:	f010 0301 	ands.w	r3, r0, #1
 8007594:	d00a      	beq.n	80075ac <__swsetup_r+0xbc>
 8007596:	2300      	movs	r3, #0
 8007598:	60a3      	str	r3, [r4, #8]
 800759a:	6963      	ldr	r3, [r4, #20]
 800759c:	425b      	negs	r3, r3
 800759e:	61a3      	str	r3, [r4, #24]
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	b943      	cbnz	r3, 80075b6 <__swsetup_r+0xc6>
 80075a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075a8:	d1ba      	bne.n	8007520 <__swsetup_r+0x30>
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	0781      	lsls	r1, r0, #30
 80075ae:	bf58      	it	pl
 80075b0:	6963      	ldrpl	r3, [r4, #20]
 80075b2:	60a3      	str	r3, [r4, #8]
 80075b4:	e7f4      	b.n	80075a0 <__swsetup_r+0xb0>
 80075b6:	2000      	movs	r0, #0
 80075b8:	e7f7      	b.n	80075aa <__swsetup_r+0xba>
 80075ba:	bf00      	nop
 80075bc:	2000000c 	.word	0x2000000c
 80075c0:	080082cc 	.word	0x080082cc
 80075c4:	080082ec 	.word	0x080082ec
 80075c8:	080082ac 	.word	0x080082ac

080075cc <abort>:
 80075cc:	2006      	movs	r0, #6
 80075ce:	b508      	push	{r3, lr}
 80075d0:	f000 fa52 	bl	8007a78 <raise>
 80075d4:	2001      	movs	r0, #1
 80075d6:	f7fa fc9c 	bl	8001f12 <_exit>
	...

080075dc <__sflush_r>:
 80075dc:	898a      	ldrh	r2, [r1, #12]
 80075de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e2:	4605      	mov	r5, r0
 80075e4:	0710      	lsls	r0, r2, #28
 80075e6:	460c      	mov	r4, r1
 80075e8:	d458      	bmi.n	800769c <__sflush_r+0xc0>
 80075ea:	684b      	ldr	r3, [r1, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	dc05      	bgt.n	80075fc <__sflush_r+0x20>
 80075f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	dc02      	bgt.n	80075fc <__sflush_r+0x20>
 80075f6:	2000      	movs	r0, #0
 80075f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075fe:	2e00      	cmp	r6, #0
 8007600:	d0f9      	beq.n	80075f6 <__sflush_r+0x1a>
 8007602:	2300      	movs	r3, #0
 8007604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007608:	682f      	ldr	r7, [r5, #0]
 800760a:	602b      	str	r3, [r5, #0]
 800760c:	d032      	beq.n	8007674 <__sflush_r+0x98>
 800760e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	075a      	lsls	r2, r3, #29
 8007614:	d505      	bpl.n	8007622 <__sflush_r+0x46>
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	1ac0      	subs	r0, r0, r3
 800761a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800761c:	b10b      	cbz	r3, 8007622 <__sflush_r+0x46>
 800761e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007620:	1ac0      	subs	r0, r0, r3
 8007622:	2300      	movs	r3, #0
 8007624:	4602      	mov	r2, r0
 8007626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007628:	4628      	mov	r0, r5
 800762a:	6a21      	ldr	r1, [r4, #32]
 800762c:	47b0      	blx	r6
 800762e:	1c43      	adds	r3, r0, #1
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	d106      	bne.n	8007642 <__sflush_r+0x66>
 8007634:	6829      	ldr	r1, [r5, #0]
 8007636:	291d      	cmp	r1, #29
 8007638:	d82c      	bhi.n	8007694 <__sflush_r+0xb8>
 800763a:	4a2a      	ldr	r2, [pc, #168]	; (80076e4 <__sflush_r+0x108>)
 800763c:	40ca      	lsrs	r2, r1
 800763e:	07d6      	lsls	r6, r2, #31
 8007640:	d528      	bpl.n	8007694 <__sflush_r+0xb8>
 8007642:	2200      	movs	r2, #0
 8007644:	6062      	str	r2, [r4, #4]
 8007646:	6922      	ldr	r2, [r4, #16]
 8007648:	04d9      	lsls	r1, r3, #19
 800764a:	6022      	str	r2, [r4, #0]
 800764c:	d504      	bpl.n	8007658 <__sflush_r+0x7c>
 800764e:	1c42      	adds	r2, r0, #1
 8007650:	d101      	bne.n	8007656 <__sflush_r+0x7a>
 8007652:	682b      	ldr	r3, [r5, #0]
 8007654:	b903      	cbnz	r3, 8007658 <__sflush_r+0x7c>
 8007656:	6560      	str	r0, [r4, #84]	; 0x54
 8007658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800765a:	602f      	str	r7, [r5, #0]
 800765c:	2900      	cmp	r1, #0
 800765e:	d0ca      	beq.n	80075f6 <__sflush_r+0x1a>
 8007660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007664:	4299      	cmp	r1, r3
 8007666:	d002      	beq.n	800766e <__sflush_r+0x92>
 8007668:	4628      	mov	r0, r5
 800766a:	f7ff fb03 	bl	8006c74 <_free_r>
 800766e:	2000      	movs	r0, #0
 8007670:	6360      	str	r0, [r4, #52]	; 0x34
 8007672:	e7c1      	b.n	80075f8 <__sflush_r+0x1c>
 8007674:	6a21      	ldr	r1, [r4, #32]
 8007676:	2301      	movs	r3, #1
 8007678:	4628      	mov	r0, r5
 800767a:	47b0      	blx	r6
 800767c:	1c41      	adds	r1, r0, #1
 800767e:	d1c7      	bne.n	8007610 <__sflush_r+0x34>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0c4      	beq.n	8007610 <__sflush_r+0x34>
 8007686:	2b1d      	cmp	r3, #29
 8007688:	d001      	beq.n	800768e <__sflush_r+0xb2>
 800768a:	2b16      	cmp	r3, #22
 800768c:	d101      	bne.n	8007692 <__sflush_r+0xb6>
 800768e:	602f      	str	r7, [r5, #0]
 8007690:	e7b1      	b.n	80075f6 <__sflush_r+0x1a>
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007698:	81a3      	strh	r3, [r4, #12]
 800769a:	e7ad      	b.n	80075f8 <__sflush_r+0x1c>
 800769c:	690f      	ldr	r7, [r1, #16]
 800769e:	2f00      	cmp	r7, #0
 80076a0:	d0a9      	beq.n	80075f6 <__sflush_r+0x1a>
 80076a2:	0793      	lsls	r3, r2, #30
 80076a4:	bf18      	it	ne
 80076a6:	2300      	movne	r3, #0
 80076a8:	680e      	ldr	r6, [r1, #0]
 80076aa:	bf08      	it	eq
 80076ac:	694b      	ldreq	r3, [r1, #20]
 80076ae:	eba6 0807 	sub.w	r8, r6, r7
 80076b2:	600f      	str	r7, [r1, #0]
 80076b4:	608b      	str	r3, [r1, #8]
 80076b6:	f1b8 0f00 	cmp.w	r8, #0
 80076ba:	dd9c      	ble.n	80075f6 <__sflush_r+0x1a>
 80076bc:	4643      	mov	r3, r8
 80076be:	463a      	mov	r2, r7
 80076c0:	4628      	mov	r0, r5
 80076c2:	6a21      	ldr	r1, [r4, #32]
 80076c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076c6:	47b0      	blx	r6
 80076c8:	2800      	cmp	r0, #0
 80076ca:	dc06      	bgt.n	80076da <__sflush_r+0xfe>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	f04f 30ff 	mov.w	r0, #4294967295
 80076d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076d6:	81a3      	strh	r3, [r4, #12]
 80076d8:	e78e      	b.n	80075f8 <__sflush_r+0x1c>
 80076da:	4407      	add	r7, r0
 80076dc:	eba8 0800 	sub.w	r8, r8, r0
 80076e0:	e7e9      	b.n	80076b6 <__sflush_r+0xda>
 80076e2:	bf00      	nop
 80076e4:	20400001 	.word	0x20400001

080076e8 <_fflush_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	690b      	ldr	r3, [r1, #16]
 80076ec:	4605      	mov	r5, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	b913      	cbnz	r3, 80076f8 <_fflush_r+0x10>
 80076f2:	2500      	movs	r5, #0
 80076f4:	4628      	mov	r0, r5
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	b118      	cbz	r0, 8007702 <_fflush_r+0x1a>
 80076fa:	6983      	ldr	r3, [r0, #24]
 80076fc:	b90b      	cbnz	r3, 8007702 <_fflush_r+0x1a>
 80076fe:	f000 f887 	bl	8007810 <__sinit>
 8007702:	4b14      	ldr	r3, [pc, #80]	; (8007754 <_fflush_r+0x6c>)
 8007704:	429c      	cmp	r4, r3
 8007706:	d11b      	bne.n	8007740 <_fflush_r+0x58>
 8007708:	686c      	ldr	r4, [r5, #4]
 800770a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0ef      	beq.n	80076f2 <_fflush_r+0xa>
 8007712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007714:	07d0      	lsls	r0, r2, #31
 8007716:	d404      	bmi.n	8007722 <_fflush_r+0x3a>
 8007718:	0599      	lsls	r1, r3, #22
 800771a:	d402      	bmi.n	8007722 <_fflush_r+0x3a>
 800771c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771e:	f000 f915 	bl	800794c <__retarget_lock_acquire_recursive>
 8007722:	4628      	mov	r0, r5
 8007724:	4621      	mov	r1, r4
 8007726:	f7ff ff59 	bl	80075dc <__sflush_r>
 800772a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800772c:	4605      	mov	r5, r0
 800772e:	07da      	lsls	r2, r3, #31
 8007730:	d4e0      	bmi.n	80076f4 <_fflush_r+0xc>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	059b      	lsls	r3, r3, #22
 8007736:	d4dd      	bmi.n	80076f4 <_fflush_r+0xc>
 8007738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800773a:	f000 f908 	bl	800794e <__retarget_lock_release_recursive>
 800773e:	e7d9      	b.n	80076f4 <_fflush_r+0xc>
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <_fflush_r+0x70>)
 8007742:	429c      	cmp	r4, r3
 8007744:	d101      	bne.n	800774a <_fflush_r+0x62>
 8007746:	68ac      	ldr	r4, [r5, #8]
 8007748:	e7df      	b.n	800770a <_fflush_r+0x22>
 800774a:	4b04      	ldr	r3, [pc, #16]	; (800775c <_fflush_r+0x74>)
 800774c:	429c      	cmp	r4, r3
 800774e:	bf08      	it	eq
 8007750:	68ec      	ldreq	r4, [r5, #12]
 8007752:	e7da      	b.n	800770a <_fflush_r+0x22>
 8007754:	080082cc 	.word	0x080082cc
 8007758:	080082ec 	.word	0x080082ec
 800775c:	080082ac 	.word	0x080082ac

08007760 <std>:
 8007760:	2300      	movs	r3, #0
 8007762:	b510      	push	{r4, lr}
 8007764:	4604      	mov	r4, r0
 8007766:	e9c0 3300 	strd	r3, r3, [r0]
 800776a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800776e:	6083      	str	r3, [r0, #8]
 8007770:	8181      	strh	r1, [r0, #12]
 8007772:	6643      	str	r3, [r0, #100]	; 0x64
 8007774:	81c2      	strh	r2, [r0, #14]
 8007776:	6183      	str	r3, [r0, #24]
 8007778:	4619      	mov	r1, r3
 800777a:	2208      	movs	r2, #8
 800777c:	305c      	adds	r0, #92	; 0x5c
 800777e:	f7fd fbbb 	bl	8004ef8 <memset>
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <std+0x38>)
 8007784:	6224      	str	r4, [r4, #32]
 8007786:	6263      	str	r3, [r4, #36]	; 0x24
 8007788:	4b04      	ldr	r3, [pc, #16]	; (800779c <std+0x3c>)
 800778a:	62a3      	str	r3, [r4, #40]	; 0x28
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <std+0x40>)
 800778e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <std+0x44>)
 8007792:	6323      	str	r3, [r4, #48]	; 0x30
 8007794:	bd10      	pop	{r4, pc}
 8007796:	bf00      	nop
 8007798:	08007ab1 	.word	0x08007ab1
 800779c:	08007ad3 	.word	0x08007ad3
 80077a0:	08007b0b 	.word	0x08007b0b
 80077a4:	08007b2f 	.word	0x08007b2f

080077a8 <_cleanup_r>:
 80077a8:	4901      	ldr	r1, [pc, #4]	; (80077b0 <_cleanup_r+0x8>)
 80077aa:	f000 b8af 	b.w	800790c <_fwalk_reent>
 80077ae:	bf00      	nop
 80077b0:	080076e9 	.word	0x080076e9

080077b4 <__sfmoreglue>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	2568      	movs	r5, #104	; 0x68
 80077b8:	1e4a      	subs	r2, r1, #1
 80077ba:	4355      	muls	r5, r2
 80077bc:	460e      	mov	r6, r1
 80077be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077c2:	f7ff faa3 	bl	8006d0c <_malloc_r>
 80077c6:	4604      	mov	r4, r0
 80077c8:	b140      	cbz	r0, 80077dc <__sfmoreglue+0x28>
 80077ca:	2100      	movs	r1, #0
 80077cc:	e9c0 1600 	strd	r1, r6, [r0]
 80077d0:	300c      	adds	r0, #12
 80077d2:	60a0      	str	r0, [r4, #8]
 80077d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077d8:	f7fd fb8e 	bl	8004ef8 <memset>
 80077dc:	4620      	mov	r0, r4
 80077de:	bd70      	pop	{r4, r5, r6, pc}

080077e0 <__sfp_lock_acquire>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__sfp_lock_acquire+0x8>)
 80077e2:	f000 b8b3 	b.w	800794c <__retarget_lock_acquire_recursive>
 80077e6:	bf00      	nop
 80077e8:	20000364 	.word	0x20000364

080077ec <__sfp_lock_release>:
 80077ec:	4801      	ldr	r0, [pc, #4]	; (80077f4 <__sfp_lock_release+0x8>)
 80077ee:	f000 b8ae 	b.w	800794e <__retarget_lock_release_recursive>
 80077f2:	bf00      	nop
 80077f4:	20000364 	.word	0x20000364

080077f8 <__sinit_lock_acquire>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__sinit_lock_acquire+0x8>)
 80077fa:	f000 b8a7 	b.w	800794c <__retarget_lock_acquire_recursive>
 80077fe:	bf00      	nop
 8007800:	2000035f 	.word	0x2000035f

08007804 <__sinit_lock_release>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__sinit_lock_release+0x8>)
 8007806:	f000 b8a2 	b.w	800794e <__retarget_lock_release_recursive>
 800780a:	bf00      	nop
 800780c:	2000035f 	.word	0x2000035f

08007810 <__sinit>:
 8007810:	b510      	push	{r4, lr}
 8007812:	4604      	mov	r4, r0
 8007814:	f7ff fff0 	bl	80077f8 <__sinit_lock_acquire>
 8007818:	69a3      	ldr	r3, [r4, #24]
 800781a:	b11b      	cbz	r3, 8007824 <__sinit+0x14>
 800781c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007820:	f7ff bff0 	b.w	8007804 <__sinit_lock_release>
 8007824:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007828:	6523      	str	r3, [r4, #80]	; 0x50
 800782a:	4b13      	ldr	r3, [pc, #76]	; (8007878 <__sinit+0x68>)
 800782c:	4a13      	ldr	r2, [pc, #76]	; (800787c <__sinit+0x6c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	62a2      	str	r2, [r4, #40]	; 0x28
 8007832:	42a3      	cmp	r3, r4
 8007834:	bf08      	it	eq
 8007836:	2301      	moveq	r3, #1
 8007838:	4620      	mov	r0, r4
 800783a:	bf08      	it	eq
 800783c:	61a3      	streq	r3, [r4, #24]
 800783e:	f000 f81f 	bl	8007880 <__sfp>
 8007842:	6060      	str	r0, [r4, #4]
 8007844:	4620      	mov	r0, r4
 8007846:	f000 f81b 	bl	8007880 <__sfp>
 800784a:	60a0      	str	r0, [r4, #8]
 800784c:	4620      	mov	r0, r4
 800784e:	f000 f817 	bl	8007880 <__sfp>
 8007852:	2200      	movs	r2, #0
 8007854:	2104      	movs	r1, #4
 8007856:	60e0      	str	r0, [r4, #12]
 8007858:	6860      	ldr	r0, [r4, #4]
 800785a:	f7ff ff81 	bl	8007760 <std>
 800785e:	2201      	movs	r2, #1
 8007860:	2109      	movs	r1, #9
 8007862:	68a0      	ldr	r0, [r4, #8]
 8007864:	f7ff ff7c 	bl	8007760 <std>
 8007868:	2202      	movs	r2, #2
 800786a:	2112      	movs	r1, #18
 800786c:	68e0      	ldr	r0, [r4, #12]
 800786e:	f7ff ff77 	bl	8007760 <std>
 8007872:	2301      	movs	r3, #1
 8007874:	61a3      	str	r3, [r4, #24]
 8007876:	e7d1      	b.n	800781c <__sinit+0xc>
 8007878:	08007f2c 	.word	0x08007f2c
 800787c:	080077a9 	.word	0x080077a9

08007880 <__sfp>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	4607      	mov	r7, r0
 8007884:	f7ff ffac 	bl	80077e0 <__sfp_lock_acquire>
 8007888:	4b1e      	ldr	r3, [pc, #120]	; (8007904 <__sfp+0x84>)
 800788a:	681e      	ldr	r6, [r3, #0]
 800788c:	69b3      	ldr	r3, [r6, #24]
 800788e:	b913      	cbnz	r3, 8007896 <__sfp+0x16>
 8007890:	4630      	mov	r0, r6
 8007892:	f7ff ffbd 	bl	8007810 <__sinit>
 8007896:	3648      	adds	r6, #72	; 0x48
 8007898:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800789c:	3b01      	subs	r3, #1
 800789e:	d503      	bpl.n	80078a8 <__sfp+0x28>
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	b30b      	cbz	r3, 80078e8 <__sfp+0x68>
 80078a4:	6836      	ldr	r6, [r6, #0]
 80078a6:	e7f7      	b.n	8007898 <__sfp+0x18>
 80078a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078ac:	b9d5      	cbnz	r5, 80078e4 <__sfp+0x64>
 80078ae:	4b16      	ldr	r3, [pc, #88]	; (8007908 <__sfp+0x88>)
 80078b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078b4:	60e3      	str	r3, [r4, #12]
 80078b6:	6665      	str	r5, [r4, #100]	; 0x64
 80078b8:	f000 f847 	bl	800794a <__retarget_lock_init_recursive>
 80078bc:	f7ff ff96 	bl	80077ec <__sfp_lock_release>
 80078c0:	2208      	movs	r2, #8
 80078c2:	4629      	mov	r1, r5
 80078c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078cc:	6025      	str	r5, [r4, #0]
 80078ce:	61a5      	str	r5, [r4, #24]
 80078d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078d4:	f7fd fb10 	bl	8004ef8 <memset>
 80078d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078e0:	4620      	mov	r0, r4
 80078e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e4:	3468      	adds	r4, #104	; 0x68
 80078e6:	e7d9      	b.n	800789c <__sfp+0x1c>
 80078e8:	2104      	movs	r1, #4
 80078ea:	4638      	mov	r0, r7
 80078ec:	f7ff ff62 	bl	80077b4 <__sfmoreglue>
 80078f0:	4604      	mov	r4, r0
 80078f2:	6030      	str	r0, [r6, #0]
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d1d5      	bne.n	80078a4 <__sfp+0x24>
 80078f8:	f7ff ff78 	bl	80077ec <__sfp_lock_release>
 80078fc:	230c      	movs	r3, #12
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	e7ee      	b.n	80078e0 <__sfp+0x60>
 8007902:	bf00      	nop
 8007904:	08007f2c 	.word	0x08007f2c
 8007908:	ffff0001 	.word	0xffff0001

0800790c <_fwalk_reent>:
 800790c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007910:	4606      	mov	r6, r0
 8007912:	4688      	mov	r8, r1
 8007914:	2700      	movs	r7, #0
 8007916:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800791a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800791e:	f1b9 0901 	subs.w	r9, r9, #1
 8007922:	d505      	bpl.n	8007930 <_fwalk_reent+0x24>
 8007924:	6824      	ldr	r4, [r4, #0]
 8007926:	2c00      	cmp	r4, #0
 8007928:	d1f7      	bne.n	800791a <_fwalk_reent+0xe>
 800792a:	4638      	mov	r0, r7
 800792c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007930:	89ab      	ldrh	r3, [r5, #12]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d907      	bls.n	8007946 <_fwalk_reent+0x3a>
 8007936:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800793a:	3301      	adds	r3, #1
 800793c:	d003      	beq.n	8007946 <_fwalk_reent+0x3a>
 800793e:	4629      	mov	r1, r5
 8007940:	4630      	mov	r0, r6
 8007942:	47c0      	blx	r8
 8007944:	4307      	orrs	r7, r0
 8007946:	3568      	adds	r5, #104	; 0x68
 8007948:	e7e9      	b.n	800791e <_fwalk_reent+0x12>

0800794a <__retarget_lock_init_recursive>:
 800794a:	4770      	bx	lr

0800794c <__retarget_lock_acquire_recursive>:
 800794c:	4770      	bx	lr

0800794e <__retarget_lock_release_recursive>:
 800794e:	4770      	bx	lr

08007950 <__swhatbuf_r>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	460e      	mov	r6, r1
 8007954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007958:	4614      	mov	r4, r2
 800795a:	2900      	cmp	r1, #0
 800795c:	461d      	mov	r5, r3
 800795e:	b096      	sub	sp, #88	; 0x58
 8007960:	da07      	bge.n	8007972 <__swhatbuf_r+0x22>
 8007962:	2300      	movs	r3, #0
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	89b3      	ldrh	r3, [r6, #12]
 8007968:	061a      	lsls	r2, r3, #24
 800796a:	d410      	bmi.n	800798e <__swhatbuf_r+0x3e>
 800796c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007970:	e00e      	b.n	8007990 <__swhatbuf_r+0x40>
 8007972:	466a      	mov	r2, sp
 8007974:	f000 f902 	bl	8007b7c <_fstat_r>
 8007978:	2800      	cmp	r0, #0
 800797a:	dbf2      	blt.n	8007962 <__swhatbuf_r+0x12>
 800797c:	9a01      	ldr	r2, [sp, #4]
 800797e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007982:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007986:	425a      	negs	r2, r3
 8007988:	415a      	adcs	r2, r3
 800798a:	602a      	str	r2, [r5, #0]
 800798c:	e7ee      	b.n	800796c <__swhatbuf_r+0x1c>
 800798e:	2340      	movs	r3, #64	; 0x40
 8007990:	2000      	movs	r0, #0
 8007992:	6023      	str	r3, [r4, #0]
 8007994:	b016      	add	sp, #88	; 0x58
 8007996:	bd70      	pop	{r4, r5, r6, pc}

08007998 <__smakebuf_r>:
 8007998:	898b      	ldrh	r3, [r1, #12]
 800799a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800799c:	079d      	lsls	r5, r3, #30
 800799e:	4606      	mov	r6, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	d507      	bpl.n	80079b4 <__smakebuf_r+0x1c>
 80079a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	6123      	str	r3, [r4, #16]
 80079ac:	2301      	movs	r3, #1
 80079ae:	6163      	str	r3, [r4, #20]
 80079b0:	b002      	add	sp, #8
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	466a      	mov	r2, sp
 80079b6:	ab01      	add	r3, sp, #4
 80079b8:	f7ff ffca 	bl	8007950 <__swhatbuf_r>
 80079bc:	9900      	ldr	r1, [sp, #0]
 80079be:	4605      	mov	r5, r0
 80079c0:	4630      	mov	r0, r6
 80079c2:	f7ff f9a3 	bl	8006d0c <_malloc_r>
 80079c6:	b948      	cbnz	r0, 80079dc <__smakebuf_r+0x44>
 80079c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079cc:	059a      	lsls	r2, r3, #22
 80079ce:	d4ef      	bmi.n	80079b0 <__smakebuf_r+0x18>
 80079d0:	f023 0303 	bic.w	r3, r3, #3
 80079d4:	f043 0302 	orr.w	r3, r3, #2
 80079d8:	81a3      	strh	r3, [r4, #12]
 80079da:	e7e3      	b.n	80079a4 <__smakebuf_r+0xc>
 80079dc:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <__smakebuf_r+0x7c>)
 80079de:	62b3      	str	r3, [r6, #40]	; 0x28
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	6020      	str	r0, [r4, #0]
 80079e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e8:	81a3      	strh	r3, [r4, #12]
 80079ea:	9b00      	ldr	r3, [sp, #0]
 80079ec:	6120      	str	r0, [r4, #16]
 80079ee:	6163      	str	r3, [r4, #20]
 80079f0:	9b01      	ldr	r3, [sp, #4]
 80079f2:	b15b      	cbz	r3, 8007a0c <__smakebuf_r+0x74>
 80079f4:	4630      	mov	r0, r6
 80079f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079fa:	f000 f8d1 	bl	8007ba0 <_isatty_r>
 80079fe:	b128      	cbz	r0, 8007a0c <__smakebuf_r+0x74>
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f023 0303 	bic.w	r3, r3, #3
 8007a06:	f043 0301 	orr.w	r3, r3, #1
 8007a0a:	81a3      	strh	r3, [r4, #12]
 8007a0c:	89a0      	ldrh	r0, [r4, #12]
 8007a0e:	4305      	orrs	r5, r0
 8007a10:	81a5      	strh	r5, [r4, #12]
 8007a12:	e7cd      	b.n	80079b0 <__smakebuf_r+0x18>
 8007a14:	080077a9 	.word	0x080077a9

08007a18 <_malloc_usable_size_r>:
 8007a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1c:	1f18      	subs	r0, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfbc      	itt	lt
 8007a22:	580b      	ldrlt	r3, [r1, r0]
 8007a24:	18c0      	addlt	r0, r0, r3
 8007a26:	4770      	bx	lr

08007a28 <_raise_r>:
 8007a28:	291f      	cmp	r1, #31
 8007a2a:	b538      	push	{r3, r4, r5, lr}
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	460d      	mov	r5, r1
 8007a30:	d904      	bls.n	8007a3c <_raise_r+0x14>
 8007a32:	2316      	movs	r3, #22
 8007a34:	6003      	str	r3, [r0, #0]
 8007a36:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a3e:	b112      	cbz	r2, 8007a46 <_raise_r+0x1e>
 8007a40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a44:	b94b      	cbnz	r3, 8007a5a <_raise_r+0x32>
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 f830 	bl	8007aac <_getpid_r>
 8007a4c:	462a      	mov	r2, r5
 8007a4e:	4601      	mov	r1, r0
 8007a50:	4620      	mov	r0, r4
 8007a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a56:	f000 b817 	b.w	8007a88 <_kill_r>
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d00a      	beq.n	8007a74 <_raise_r+0x4c>
 8007a5e:	1c59      	adds	r1, r3, #1
 8007a60:	d103      	bne.n	8007a6a <_raise_r+0x42>
 8007a62:	2316      	movs	r3, #22
 8007a64:	6003      	str	r3, [r0, #0]
 8007a66:	2001      	movs	r0, #1
 8007a68:	e7e7      	b.n	8007a3a <_raise_r+0x12>
 8007a6a:	2400      	movs	r4, #0
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a72:	4798      	blx	r3
 8007a74:	2000      	movs	r0, #0
 8007a76:	e7e0      	b.n	8007a3a <_raise_r+0x12>

08007a78 <raise>:
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <raise+0xc>)
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	f7ff bfd3 	b.w	8007a28 <_raise_r>
 8007a82:	bf00      	nop
 8007a84:	2000000c 	.word	0x2000000c

08007a88 <_kill_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4d06      	ldr	r5, [pc, #24]	; (8007aa8 <_kill_r+0x20>)
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	4611      	mov	r1, r2
 8007a94:	602b      	str	r3, [r5, #0]
 8007a96:	f7fa fa2c 	bl	8001ef2 <_kill>
 8007a9a:	1c43      	adds	r3, r0, #1
 8007a9c:	d102      	bne.n	8007aa4 <_kill_r+0x1c>
 8007a9e:	682b      	ldr	r3, [r5, #0]
 8007aa0:	b103      	cbz	r3, 8007aa4 <_kill_r+0x1c>
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	bd38      	pop	{r3, r4, r5, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000358 	.word	0x20000358

08007aac <_getpid_r>:
 8007aac:	f7fa ba1a 	b.w	8001ee4 <_getpid>

08007ab0 <__sread>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab8:	f000 f894 	bl	8007be4 <_read_r>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	bfab      	itete	ge
 8007ac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ac4:	181b      	addge	r3, r3, r0
 8007ac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aca:	bfac      	ite	ge
 8007acc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ace:	81a3      	strhlt	r3, [r4, #12]
 8007ad0:	bd10      	pop	{r4, pc}

08007ad2 <__swrite>:
 8007ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad6:	461f      	mov	r7, r3
 8007ad8:	898b      	ldrh	r3, [r1, #12]
 8007ada:	4605      	mov	r5, r0
 8007adc:	05db      	lsls	r3, r3, #23
 8007ade:	460c      	mov	r4, r1
 8007ae0:	4616      	mov	r6, r2
 8007ae2:	d505      	bpl.n	8007af0 <__swrite+0x1e>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aec:	f000 f868 	bl	8007bc0 <_lseek_r>
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	4632      	mov	r2, r6
 8007af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	4628      	mov	r0, r5
 8007afc:	463b      	mov	r3, r7
 8007afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b06:	f000 b817 	b.w	8007b38 <_write_r>

08007b0a <__sseek>:
 8007b0a:	b510      	push	{r4, lr}
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b12:	f000 f855 	bl	8007bc0 <_lseek_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	bf15      	itete	ne
 8007b1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b26:	81a3      	strheq	r3, [r4, #12]
 8007b28:	bf18      	it	ne
 8007b2a:	81a3      	strhne	r3, [r4, #12]
 8007b2c:	bd10      	pop	{r4, pc}

08007b2e <__sclose>:
 8007b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b32:	f000 b813 	b.w	8007b5c <_close_r>
	...

08007b38 <_write_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	4611      	mov	r1, r2
 8007b40:	2200      	movs	r2, #0
 8007b42:	4d05      	ldr	r5, [pc, #20]	; (8007b58 <_write_r+0x20>)
 8007b44:	602a      	str	r2, [r5, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f7fa fa0a 	bl	8001f60 <_write>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_write_r+0x1e>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_write_r+0x1e>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	20000358 	.word	0x20000358

08007b5c <_close_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4d05      	ldr	r5, [pc, #20]	; (8007b78 <_close_r+0x1c>)
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	602b      	str	r3, [r5, #0]
 8007b68:	f7fa fa16 	bl	8001f98 <_close>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d102      	bne.n	8007b76 <_close_r+0x1a>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_close_r+0x1a>
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	20000358 	.word	0x20000358

08007b7c <_fstat_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	2300      	movs	r3, #0
 8007b80:	4d06      	ldr	r5, [pc, #24]	; (8007b9c <_fstat_r+0x20>)
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	602b      	str	r3, [r5, #0]
 8007b8a:	f7fa fa10 	bl	8001fae <_fstat>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	d102      	bne.n	8007b98 <_fstat_r+0x1c>
 8007b92:	682b      	ldr	r3, [r5, #0]
 8007b94:	b103      	cbz	r3, 8007b98 <_fstat_r+0x1c>
 8007b96:	6023      	str	r3, [r4, #0]
 8007b98:	bd38      	pop	{r3, r4, r5, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000358 	.word	0x20000358

08007ba0 <_isatty_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4d05      	ldr	r5, [pc, #20]	; (8007bbc <_isatty_r+0x1c>)
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	4608      	mov	r0, r1
 8007baa:	602b      	str	r3, [r5, #0]
 8007bac:	f7fa fa0e 	bl	8001fcc <_isatty>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_isatty_r+0x1a>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_isatty_r+0x1a>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	20000358 	.word	0x20000358

08007bc0 <_lseek_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	2200      	movs	r2, #0
 8007bca:	4d05      	ldr	r5, [pc, #20]	; (8007be0 <_lseek_r+0x20>)
 8007bcc:	602a      	str	r2, [r5, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f7fa fa06 	bl	8001fe0 <_lseek>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_lseek_r+0x1e>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_lseek_r+0x1e>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	20000358 	.word	0x20000358

08007be4 <_read_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	2200      	movs	r2, #0
 8007bee:	4d05      	ldr	r5, [pc, #20]	; (8007c04 <_read_r+0x20>)
 8007bf0:	602a      	str	r2, [r5, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f7fa f997 	bl	8001f26 <_read>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_read_r+0x1e>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_read_r+0x1e>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	20000358 	.word	0x20000358

08007c08 <_init>:
 8007c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0a:	bf00      	nop
 8007c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0e:	bc08      	pop	{r3}
 8007c10:	469e      	mov	lr, r3
 8007c12:	4770      	bx	lr

08007c14 <_fini>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	bf00      	nop
 8007c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1a:	bc08      	pop	{r3}
 8007c1c:	469e      	mov	lr, r3
 8007c1e:	4770      	bx	lr
