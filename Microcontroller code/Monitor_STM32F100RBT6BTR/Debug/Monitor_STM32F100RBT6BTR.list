
Monitor_STM32F100RBT6BTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  08008ea8  08008ea8  00018ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095bc  080095bc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080095bc  080095bc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095bc  080095bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c0  080095c0  000195c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080095c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001dc  080097a0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  080097a0  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001042d  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023aa  00000000  00000000  00030632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000329e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00033a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012914  00000000  00000000  000349e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115f6  00000000  00000000  000472f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006dc65  00000000  00000000  000588ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c654f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005788  00000000  00000000  000c65a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e90 	.word	0x08008e90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008e90 	.word	0x08008e90

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <FullReset>:
#include "MAX17320.h"

void MAX17320Init(I2C_HandleTypeDef *hi2c) {
	hi2c = hi2c;
}
uint16_t FullReset(I2C_HandleTypeDef *hi2c) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	data_in[0] = 0x00; //LSB
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	733b      	strb	r3, [r7, #12]
	data_in[1] = 0x00; //MSB
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	2261      	movs	r2, #97	; 0x61
 8000c0a:	216c      	movs	r1, #108	; 0x6c
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f002 fcfd 	bl	800360c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	2302      	movs	r3, #2
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2301      	movs	r3, #1
 8000c22:	2261      	movs	r2, #97	; 0x61
 8000c24:	216c      	movs	r1, #108	; 0x6c
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f002 fcf0 	bl	800360c <HAL_I2C_Mem_Write>
	data_in[0] = 0x0F; //LSB
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	733b      	strb	r3, [r7, #12]
	data_in[1] = 0x00; //MSB
 8000c30:	2300      	movs	r3, #0
 8000c32:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, 0x6C, CommandReg, 1, data_in, 2, 100);
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	2302      	movs	r3, #2
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2301      	movs	r3, #1
 8000c44:	2260      	movs	r2, #96	; 0x60
 8000c46:	216c      	movs	r1, #108	; 0x6c
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f002 fcdf 	bl	800360c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f001 fe66 	bl	8002920 <HAL_Delay>
	data_in[0] = 0x00; //LSB
 8000c54:	2300      	movs	r3, #0
 8000c56:	733b      	strb	r3, [r7, #12]
	data_in[1] = 0x00; //MSB
 8000c58:	2300      	movs	r3, #0
 8000c5a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	9302      	str	r3, [sp, #8]
 8000c60:	2302      	movs	r3, #2
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2261      	movs	r2, #97	; 0x61
 8000c6e:	216c      	movs	r1, #108	; 0x6c
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f002 fccb 	bl	800360c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 8000c76:	2364      	movs	r3, #100	; 0x64
 8000c78:	9302      	str	r3, [sp, #8]
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2301      	movs	r3, #1
 8000c86:	2261      	movs	r2, #97	; 0x61
 8000c88:	216c      	movs	r1, #108	; 0x6c
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f002 fcbe 	bl	800360c <HAL_I2C_Mem_Write>
	//HAL_Delay(10);
	data_in[0] = 0x00; //LSB
 8000c90:	2300      	movs	r3, #0
 8000c92:	733b      	strb	r3, [r7, #12]
	data_in[1] = 0x80; //MSB
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, 0x6C, Config2Reg, 1, data_in, 2, 100);
 8000c98:	2364      	movs	r3, #100	; 0x64
 8000c9a:	9302      	str	r3, [sp, #8]
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	22ab      	movs	r2, #171	; 0xab
 8000caa:	216c      	movs	r1, #108	; 0x6c
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f002 fcad 	bl	800360c <HAL_I2C_Mem_Write>
	//HAL_Delay(10);
	uint8_t data_read[2];
	HAL_I2C_Mem_Read(hi2c, 0x16, Config2Reg, 1, data_read, 2, 100);
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	9302      	str	r3, [sp, #8]
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	22ab      	movs	r2, #171	; 0xab
 8000cc4:	2116      	movs	r1, #22
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f002 fd9a 	bl	8003800 <HAL_I2C_Mem_Read>
	while ((data_read[1] & 0x80) != 0x00) {
 8000ccc:	e00f      	b.n	8000cee <FullReset+0x106>
		HAL_Delay(10);
 8000cce:	200a      	movs	r0, #10
 8000cd0:	f001 fe26 	bl	8002920 <HAL_Delay>
		HAL_I2C_Mem_Read(hi2c, 0x6C, Config2Reg, 1, data_read, 2, 100);
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	2302      	movs	r3, #2
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	22ab      	movs	r2, #171	; 0xab
 8000ce6:	216c      	movs	r1, #108	; 0x6c
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f002 fd89 	bl	8003800 <HAL_I2C_Mem_Read>
	while ((data_read[1] & 0x80) != 0x00) {
 8000cee:	7a7b      	ldrb	r3, [r7, #9]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	dbeb      	blt.n	8000cce <FullReset+0xe6>
	}
	HAL_Delay(10);
 8000cf6:	200a      	movs	r0, #10
 8000cf8:	f001 fe12 	bl	8002920 <HAL_Delay>
	data_in[0] = 0xF9; //LSB
 8000cfc:	23f9      	movs	r3, #249	; 0xf9
 8000cfe:	733b      	strb	r3, [r7, #12]
	data_in[1] = 0x00; //MSB
 8000d00:	2300      	movs	r3, #0
 8000d02:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 8000d04:	2364      	movs	r3, #100	; 0x64
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	2302      	movs	r3, #2
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2301      	movs	r3, #1
 8000d14:	2261      	movs	r2, #97	; 0x61
 8000d16:	216c      	movs	r1, #108	; 0x6c
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f002 fc77 	bl	800360c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 8000d1e:	2364      	movs	r3, #100	; 0x64
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	2302      	movs	r3, #2
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	2261      	movs	r2, #97	; 0x61
 8000d30:	216c      	movs	r1, #108	; 0x6c
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f002 fc6a 	bl	800360c <HAL_I2C_Mem_Write>
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	0000      	movs	r0, r0
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <getAvgDieTemp>:

float getAvgDieTemp(I2C_HandleTypeDef *hi2c) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af04      	add	r7, sp, #16
 8000d4e:	6078      	str	r0, [r7, #4]

	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, AvgDieTempReg, 1, data_in, 2, 100); //read AvgDieTemp
 8000d50:	2364      	movs	r3, #100	; 0x64
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2302      	movs	r3, #2
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	2234      	movs	r2, #52	; 0x34
 8000d62:	216c      	movs	r1, #108	; 0x6c
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f002 fd4b 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.00391;
 8000d6a:	7b7b      	ldrb	r3, [r7, #13]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	7b3a      	ldrb	r2, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fba6 	bl	80004c4 <__aeabi_i2d>
 8000d78:	a307      	add	r3, pc, #28	; (adr r3, 8000d98 <getAvgDieTemp+0x50>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fc0b 	bl	8000598 <__aeabi_dmul>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff fedd 	bl	8000b48 <__aeabi_d2f>
 8000d8e:	4603      	mov	r3, r0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	a209aaa4 	.word	0xa209aaa4
 8000d9c:	3f7003ee 	.word	0x3f7003ee

08000da0 <getTemp1>:

float getTemp1(I2C_HandleTypeDef *hi2c) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af04      	add	r7, sp, #16
 8000da6:	6078      	str	r0, [r7, #4]

	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x16, AvgTemp1Reg, 1, data_in, 2, 100); //read AvgTemp1
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	2302      	movs	r3, #2
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	2236      	movs	r2, #54	; 0x36
 8000dba:	2116      	movs	r1, #22
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f002 fd1f 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.00391;
 8000dc2:	7b7b      	ldrb	r3, [r7, #13]
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	7b3a      	ldrb	r2, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fb7a 	bl	80004c4 <__aeabi_i2d>
 8000dd0:	a307      	add	r3, pc, #28	; (adr r3, 8000df0 <getTemp1+0x50>)
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	f7ff fbdf 	bl	8000598 <__aeabi_dmul>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	f7ff feb1 	bl	8000b48 <__aeabi_d2f>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	a209aaa4 	.word	0xa209aaa4
 8000df4:	3f7003ee 	.word	0x3f7003ee

08000df8 <getTemp2>:
float getTemp2(I2C_HandleTypeDef *hi2c) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af04      	add	r7, sp, #16
 8000dfe:	6078      	str	r0, [r7, #4]

	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x16, AvgTemp2Reg, 1, data_in, 2, 100); //read AvgTemp2
 8000e00:	2364      	movs	r3, #100	; 0x64
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	2302      	movs	r3, #2
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	2235      	movs	r2, #53	; 0x35
 8000e12:	2116      	movs	r1, #22
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f002 fcf3 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.00391;
 8000e1a:	7b7b      	ldrb	r3, [r7, #13]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	7b3a      	ldrb	r2, [r7, #12]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fb4e 	bl	80004c4 <__aeabi_i2d>
 8000e28:	a307      	add	r3, pc, #28	; (adr r3, 8000e48 <getTemp2+0x50>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f7ff fbb3 	bl	8000598 <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fe85 	bl	8000b48 <__aeabi_d2f>
 8000e3e:	4603      	mov	r3, r0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	a209aaa4 	.word	0xa209aaa4
 8000e4c:	3f7003ee 	.word	0x3f7003ee

08000e50 <getTemp3>:
float getTemp3(I2C_HandleTypeDef *hi2c) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af04      	add	r7, sp, #16
 8000e56:	6078      	str	r0, [r7, #4]

	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x16, AvgTemp3Reg, 1, data_in, 2, 100); //read AvgTemp3
 8000e58:	2364      	movs	r3, #100	; 0x64
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	2234      	movs	r2, #52	; 0x34
 8000e6a:	2116      	movs	r1, #22
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f002 fcc7 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.00391;
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	7b3a      	ldrb	r2, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fb22 	bl	80004c4 <__aeabi_i2d>
 8000e80:	a307      	add	r3, pc, #28	; (adr r3, 8000ea0 <getTemp3+0x50>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f7ff fb87 	bl	8000598 <__aeabi_dmul>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fe59 	bl	8000b48 <__aeabi_d2f>
 8000e96:	4603      	mov	r3, r0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	a209aaa4 	.word	0xa209aaa4
 8000ea4:	3f7003ee 	.word	0x3f7003ee

08000ea8 <getTemp4>:
float getTemp4(I2C_HandleTypeDef *hi2c) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	6078      	str	r0, [r7, #4]

	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x16, AvgTemp4Reg, 1, data_in, 2, 100); //read AvgTemp4
 8000eb0:	2364      	movs	r3, #100	; 0x64
 8000eb2:	9302      	str	r3, [sp, #8]
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	2233      	movs	r2, #51	; 0x33
 8000ec2:	2116      	movs	r1, #22
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f002 fc9b 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.00391;
 8000eca:	7b7b      	ldrb	r3, [r7, #13]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	7b3a      	ldrb	r2, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff faf6 	bl	80004c4 <__aeabi_i2d>
 8000ed8:	a307      	add	r3, pc, #28	; (adr r3, 8000ef8 <getTemp4+0x50>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fb5b 	bl	8000598 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fe2d 	bl	8000b48 <__aeabi_d2f>
 8000eee:	4603      	mov	r3, r0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	a209aaa4 	.word	0xa209aaa4
 8000efc:	3f7003ee 	.word	0x3f7003ee

08000f00 <getVC1>:

float getVC1(I2C_HandleTypeDef *hi2c) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	6078      	str	r0, [r7, #4]

	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, AvgVC1Reg, 1, data_in, 2, 100); //read AvgVC1
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	22d1      	movs	r2, #209	; 0xd1
 8000f1a:	216c      	movs	r1, #108	; 0x6c
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f002 fc6f 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.000078125;
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	7b3a      	ldrb	r2, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff faca 	bl	80004c4 <__aeabi_i2d>
 8000f30:	a307      	add	r3, pc, #28	; (adr r3, 8000f50 <getVC1+0x50>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff fb2f 	bl	8000598 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fe01 	bl	8000b48 <__aeabi_d2f>
 8000f46:	4603      	mov	r3, r0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	47ae147b 	.word	0x47ae147b
 8000f54:	3f147ae1 	.word	0x3f147ae1

08000f58 <getVC2>:

float getVC2(I2C_HandleTypeDef *hi2c) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af04      	add	r7, sp, #16
 8000f5e:	6078      	str	r0, [r7, #4]

	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, AvgVC2Reg, 1, data_in, 2, 100); //read AvgVC2
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	2302      	movs	r3, #2
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	22d2      	movs	r2, #210	; 0xd2
 8000f72:	216c      	movs	r1, #108	; 0x6c
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f002 fc43 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.000078125;
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	7b3a      	ldrb	r2, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fa9e 	bl	80004c4 <__aeabi_i2d>
 8000f88:	a307      	add	r3, pc, #28	; (adr r3, 8000fa8 <getVC2+0x50>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fb03 	bl	8000598 <__aeabi_dmul>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fdd5 	bl	8000b48 <__aeabi_d2f>
 8000f9e:	4603      	mov	r3, r0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	47ae147b 	.word	0x47ae147b
 8000fac:	3f147ae1 	.word	0x3f147ae1

08000fb0 <getVC3>:
float getVC3(I2C_HandleTypeDef *hi2c) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	6078      	str	r0, [r7, #4]

	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, AvgVC3Reg, 1, data_in, 2, 100); //read AvgVC3
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	22d3      	movs	r2, #211	; 0xd3
 8000fca:	216c      	movs	r1, #108	; 0x6c
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f002 fc17 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.000078125;
 8000fd2:	7b7b      	ldrb	r3, [r7, #13]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	7b3a      	ldrb	r2, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa72 	bl	80004c4 <__aeabi_i2d>
 8000fe0:	a307      	add	r3, pc, #28	; (adr r3, 8001000 <getVC3+0x50>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fad7 	bl	8000598 <__aeabi_dmul>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fda9 	bl	8000b48 <__aeabi_d2f>
 8000ff6:	4603      	mov	r3, r0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	47ae147b 	.word	0x47ae147b
 8001004:	3f147ae1 	.word	0x3f147ae1

08001008 <getVC4>:
float getVC4(I2C_HandleTypeDef *hi2c) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]

	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, AvgVC4Reg, 1, data_in, 2, 100); //read AvgVC4
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	2302      	movs	r3, #2
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	22d4      	movs	r2, #212	; 0xd4
 8001022:	216c      	movs	r1, #108	; 0x6c
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f002 fbeb 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.000078125;
 800102a:	7b7b      	ldrb	r3, [r7, #13]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	7b3a      	ldrb	r2, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa46 	bl	80004c4 <__aeabi_i2d>
 8001038:	a307      	add	r3, pc, #28	; (adr r3, 8001058 <getVC4+0x50>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff faab 	bl	8000598 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fd7d 	bl	8000b48 <__aeabi_d2f>
 800104e:	4603      	mov	r3, r0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	47ae147b 	.word	0x47ae147b
 800105c:	3f147ae1 	.word	0x3f147ae1

08001060 <getVT>:

float getVT(I2C_HandleTypeDef *hi2c) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, PCKPReg, 1, data_in, 2, 100); //read packV
 8001068:	2364      	movs	r3, #100	; 0x64
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2302      	movs	r3, #2
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	22db      	movs	r2, #219	; 0xdb
 800107a:	216c      	movs	r1, #108	; 0x6c
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f002 fbbf 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]) * 0.0003125;
 8001082:	7b7b      	ldrb	r3, [r7, #13]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	7b3a      	ldrb	r2, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa1a 	bl	80004c4 <__aeabi_i2d>
 8001090:	a307      	add	r3, pc, #28	; (adr r3, 80010b0 <getVT+0x50>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fa7f 	bl	8000598 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fd51 	bl	8000b48 <__aeabi_d2f>
 80010a6:	4603      	mov	r3, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	47ae147b 	.word	0x47ae147b
 80010b4:	3f347ae1 	.word	0x3f347ae1

080010b8 <getCurrent>:
float getCurrent(I2C_HandleTypeDef *hi2c) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af04      	add	r7, sp, #16
 80010be:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, AvgCurrentReg, 1, data_in, 2, 100); //read AvgCurrent
 80010c0:	2364      	movs	r3, #100	; 0x64
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2302      	movs	r3, #2
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	221d      	movs	r2, #29
 80010d2:	216c      	movs	r1, #108	; 0x6c
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f002 fb93 	bl	8003800 <HAL_I2C_Mem_Read>
	//return (data_in[1]<<8 | data_in[0]) * 0.00025;
	return ((int16_t) (data_in[1] << 8 | data_in[0])) * 0.00078125;
 80010da:	7b7b      	ldrb	r3, [r7, #13]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f9eb 	bl	80004c4 <__aeabi_i2d>
 80010ee:	a308      	add	r3, pc, #32	; (adr r3, 8001110 <getCurrent+0x58>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff fa50 	bl	8000598 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fd22 	bl	8000b48 <__aeabi_d2f>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	9999999a 	.word	0x9999999a
 8001114:	3f499999 	.word	0x3f499999

08001118 <getRepCap>:

float getRepCap(I2C_HandleTypeDef *hi2c) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af04      	add	r7, sp, #16
 800111e:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, RepCapReg, 1, data_in, 2, 100);
 8001120:	2364      	movs	r3, #100	; 0x64
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2302      	movs	r3, #2
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	2205      	movs	r2, #5
 8001132:	216c      	movs	r1, #108	; 0x6c
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f002 fb63 	bl	8003800 <HAL_I2C_Mem_Read>

	return ((int16_t) (data_in[1] << 8 | data_in[0])) * 0.0025; //0.000005/Rsense (2mohm);
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9bb 	bl	80004c4 <__aeabi_i2d>
 800114e:	a308      	add	r3, pc, #32	; (adr r3, 8001170 <getRepCap+0x58>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa20 	bl	8000598 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fcf2 	bl	8000b48 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	47ae147b 	.word	0x47ae147b
 8001174:	3f647ae1 	.word	0x3f647ae1

08001178 <getRepSoC>:

float getRepSoC(I2C_HandleTypeDef *hi2c) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af04      	add	r7, sp, #16
 800117e:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, RepSOCReg, 1, data_in, 2, 100);
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2302      	movs	r3, #2
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	2206      	movs	r2, #6
 8001192:	216c      	movs	r1, #108	; 0x6c
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f002 fb33 	bl	8003800 <HAL_I2C_Mem_Read>

	return ((int16_t) (data_in[1] << 8 | data_in[0])) * 0.00390625;
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f98b 	bl	80004c4 <__aeabi_i2d>
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <getRepSoC+0x58>)
 80011b4:	f7ff f9f0 	bl	8000598 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fcc2 	bl	8000b48 <__aeabi_d2f>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	3f700000 	.word	0x3f700000

080011d4 <getTTE>:
float getTTE(I2C_HandleTypeDef *hi2c) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af04      	add	r7, sp, #16
 80011da:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, TTEReg, 1, data_in, 2, 100);
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2302      	movs	r3, #2
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	2211      	movs	r2, #17
 80011ee:	216c      	movs	r1, #108	; 0x6c
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f002 fb05 	bl	8003800 <HAL_I2C_Mem_Read>

	return ((int16_t) (data_in[1] << 8 | data_in[0])) * 5.625;
 80011f6:	7b7b      	ldrb	r3, [r7, #13]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	7b3b      	ldrb	r3, [r7, #12]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21b      	sxth	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f95d 	bl	80004c4 <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <getTTE+0x58>)
 8001210:	f7ff f9c2 	bl	8000598 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fc94 	bl	8000b48 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40168000 	.word	0x40168000

08001230 <getTTF>:
float getTTF(I2C_HandleTypeDef *hi2c) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, TTFReg, 1, data_in, 2, 100);
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2302      	movs	r3, #2
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	2220      	movs	r2, #32
 800124a:	216c      	movs	r1, #108	; 0x6c
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f002 fad7 	bl	8003800 <HAL_I2C_Mem_Read>

	return ((int16_t) (data_in[1] << 8 | data_in[0])) * 5.625;
 8001252:	7b7b      	ldrb	r3, [r7, #13]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7b3b      	ldrb	r3, [r7, #12]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21b      	sxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f92f 	bl	80004c4 <__aeabi_i2d>
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <getTTF+0x58>)
 800126c:	f7ff f994 	bl	8000598 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fc66 	bl	8000b48 <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40168000 	.word	0x40168000

0800128c <nsetReg>:
uint8_t nsetReg(I2C_HandleTypeDef *hi2c, uint8_t addres, uint8_t *data) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af04      	add	r7, sp, #16
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	460b      	mov	r3, r1
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	72fb      	strb	r3, [r7, #11]

	uint8_t data_in_reg[2];
	data_in_reg[0] = 0x01;
 800129a:	2301      	movs	r3, #1
 800129c:	753b      	strb	r3, [r7, #20]
	data_in_reg[1] = 0x02;
 800129e:	2302      	movs	r3, #2
 80012a0:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Read(hi2c, 0x16, addres, 1, data_in_reg, 2, 100);
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2302      	movs	r3, #2
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	2116      	movs	r1, #22
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f002 faa1 	bl	8003800 <HAL_I2C_Mem_Read>
	/*if (HAL_I2C_Mem_Read(hi2c, 0x16, addres, 1, data_in_reg, 2, 100)
			!= HAL_OK) {
		return 255;
	}*/
	if ((data_in_reg[0] == data[0]) & (data_in_reg[1] == data[1])) {
 80012be:	7d3a      	ldrb	r2, [r7, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	7d79      	ldrb	r1, [r7, #21]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3301      	adds	r3, #1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4299      	cmp	r1, r3
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4013      	ands	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <nsetReg+0x60>
		return 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e049      	b.n	8001380 <nsetReg+0xf4>
	} else {
		uint8_t data_in[2];
		data_in[0] = 0x00; //LSB
 80012ec:	2300      	movs	r3, #0
 80012ee:	743b      	strb	r3, [r7, #16]
		data_in[1] = 0x00; //MSB
 80012f0:	2300      	movs	r3, #0
 80012f2:	747b      	strb	r3, [r7, #17]

		HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 80012f4:	2364      	movs	r3, #100	; 0x64
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2302      	movs	r3, #2
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	2261      	movs	r2, #97	; 0x61
 8001306:	216c      	movs	r1, #108	; 0x6c
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f002 f97f 	bl	800360c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	2302      	movs	r3, #2
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	2261      	movs	r2, #97	; 0x61
 8001320:	216c      	movs	r1, #108	; 0x6c
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f002 f972 	bl	800360c <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Write(hi2c, 0x16, addres, 1, data, 2, 100);
 8001328:	7afb      	ldrb	r3, [r7, #11]
 800132a:	b29a      	uxth	r2, r3
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	2302      	movs	r3, #2
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	2116      	movs	r1, #22
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f002 f965 	bl	800360c <HAL_I2C_Mem_Write>

		//HAL_I2C_Mem_Read(&hi2c1, 0x16, 0xB5, 1, nPackCfg, 2, 100);

		data_in[0] = 0xF9; //LSB
 8001342:	23f9      	movs	r3, #249	; 0xf9
 8001344:	743b      	strb	r3, [r7, #16]
		data_in[1] = 0x00; //MSB
 8001346:	2300      	movs	r3, #0
 8001348:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 800134a:	2364      	movs	r3, #100	; 0x64
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	2302      	movs	r3, #2
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	2261      	movs	r2, #97	; 0x61
 800135c:	216c      	movs	r1, #108	; 0x6c
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f002 f954 	bl	800360c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2302      	movs	r3, #2
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	2261      	movs	r2, #97	; 0x61
 8001376:	216c      	movs	r1, #108	; 0x6c
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f002 f947 	bl	800360c <HAL_I2C_Mem_Write>
	}

	return 0;
 800137e:	2300      	movs	r3, #0

}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <getStatus>:
/*uint8_t* ReadAllNReg(I2C_HandleTypeDef *hi2c, uint8_t aantalReg, uint8_t aantalBytes){
 adressen[] =
 HAL_I2C_Mem_Read(&hi2c1, 0x16, 0xB5, 1, nPackCfg, 2, 100);
 }*/

uint16_t getStatus(I2C_HandleTypeDef *hi2c) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af04      	add	r7, sp, #16
 800138e:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, StatusReg, 1, data_in, 2, 100);
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	2302      	movs	r3, #2
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	2200      	movs	r2, #0
 80013a2:	216c      	movs	r1, #108	; 0x6c
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f002 fa2b 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 80013aa:	7b7b      	ldrb	r3, [r7, #13]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	7b3b      	ldrb	r3, [r7, #12]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	b29b      	uxth	r3, r3
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <getStatus2>:
uint16_t getStatus2(I2C_HandleTypeDef *hi2c) {
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b088      	sub	sp, #32
 80013c6:	af04      	add	r7, sp, #16
 80013c8:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, Status2Reg, 1, data_in, 2, 100);
 80013ca:	2364      	movs	r3, #100	; 0x64
 80013cc:	9302      	str	r3, [sp, #8]
 80013ce:	2302      	movs	r3, #2
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2301      	movs	r3, #1
 80013da:	22b0      	movs	r2, #176	; 0xb0
 80013dc:	216c      	movs	r1, #108	; 0x6c
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f002 fa0e 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 80013e4:	7b7b      	ldrb	r3, [r7, #13]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	7b3b      	ldrb	r3, [r7, #12]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	b29b      	uxth	r3, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <getProtStatus>:
uint16_t getProtStatus(I2C_HandleTypeDef *hi2c) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af04      	add	r7, sp, #16
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, ProtStatusReg, 1, data_in, 2, 100);
 8001404:	2364      	movs	r3, #100	; 0x64
 8001406:	9302      	str	r3, [sp, #8]
 8001408:	2302      	movs	r3, #2
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	22d9      	movs	r2, #217	; 0xd9
 8001416:	216c      	movs	r1, #108	; 0x6c
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f002 f9f1 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 800141e:	7b7b      	ldrb	r3, [r7, #13]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21a      	sxth	r2, r3
 8001424:	7b3b      	ldrb	r3, [r7, #12]
 8001426:	b21b      	sxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b21b      	sxth	r3, r3
 800142c:	b29b      	uxth	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <getProtAlrtStatus>:
uint16_t getProtAlrtStatus(I2C_HandleTypeDef *hi2c) {
 8001436:	b580      	push	{r7, lr}
 8001438:	b088      	sub	sp, #32
 800143a:	af04      	add	r7, sp, #16
 800143c:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, ProtAlrtReg, 1, data_in, 2, 100);
 800143e:	2364      	movs	r3, #100	; 0x64
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2302      	movs	r3, #2
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	22af      	movs	r2, #175	; 0xaf
 8001450:	216c      	movs	r1, #108	; 0x6c
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f002 f9d4 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21a      	sxth	r2, r3
 800145e:	7b3b      	ldrb	r3, [r7, #12]
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	b29b      	uxth	r3, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <getCommStatus>:
uint16_t getCommStatus(I2C_HandleTypeDef *hi2c) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af04      	add	r7, sp, #16
 8001476:	6078      	str	r0, [r7, #4]
	uint8_t data_in[2];
	HAL_I2C_Mem_Read(hi2c, 0x6C, CommStatReg, 1, data_in, 2, 100);
 8001478:	2364      	movs	r3, #100	; 0x64
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	2302      	movs	r3, #2
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	2261      	movs	r2, #97	; 0x61
 800148a:	216c      	movs	r1, #108	; 0x6c
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f002 f9b7 	bl	8003800 <HAL_I2C_Mem_Read>
	return (data_in[1] << 8 | data_in[0]);
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	7b3b      	ldrb	r3, [r7, #12]
 800149a:	b21b      	sxth	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b21b      	sxth	r3, r3
 80014a0:	b29b      	uxth	r3, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <RGBTurnOff>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RGBTurnOff() {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <RGBTurnOff+0x2c>)
 80014b8:	f001 ff4c 	bl	8003354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <RGBTurnOff+0x2c>)
 80014c4:	f001 ff46 	bl	8003354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ce:	4802      	ldr	r0, [pc, #8]	; (80014d8 <RGBTurnOff+0x2c>)
 80014d0:	f001 ff40 	bl	8003354 <HAL_GPIO_WritePin>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40010c00 	.word	0x40010c00

080014dc <RGBTurnRED>:
void RGBTurnRED() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <RGBTurnRED+0x2c>)
 80014e8:	f001 ff34 	bl	8003354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <RGBTurnRED+0x2c>)
 80014f4:	f001 ff2e 	bl	8003354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fe:	4802      	ldr	r0, [pc, #8]	; (8001508 <RGBTurnRED+0x2c>)
 8001500:	f001 ff28 	bl	8003354 <HAL_GPIO_WritePin>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40010c00 	.word	0x40010c00

0800150c <RGBTurnBlue>:
void RGBTurnBlue() {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <RGBTurnBlue+0x2c>)
 8001518:	f001 ff1c 	bl	8003354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <RGBTurnBlue+0x2c>)
 8001524:	f001 ff16 	bl	8003354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800152e:	4802      	ldr	r0, [pc, #8]	; (8001538 <RGBTurnBlue+0x2c>)
 8001530:	f001 ff10 	bl	8003354 <HAL_GPIO_WritePin>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40010c00 	.word	0x40010c00

0800153c <printDecimal>:
void RGBTurnGreen() {
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
}
void printDecimal(int data) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	char buffer1[16];
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer1,
			sprintf(buffer1, "%d\r\n", data), 500);
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <printDecimal+0x30>)
 800154c:	4618      	mov	r0, r3
 800154e:	f005 fa7f 	bl	8006a50 <siprintf>
 8001552:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer1,
 8001554:	b29a      	uxth	r2, r3
 8001556:	f107 0108 	add.w	r1, r7, #8
 800155a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800155e:	4804      	ldr	r0, [pc, #16]	; (8001570 <printDecimal+0x34>)
 8001560:	f004 f8b6 	bl	80056d0 <HAL_UART_Transmit>

}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	08008ea8 	.word	0x08008ea8
 8001570:	200002b8 	.word	0x200002b8

08001574 <printFloat>:

void printFloat(float dataFloat) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	char buffer1[16];
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer1,
			sprintf(buffer1, "%+.4f\r\n", dataFloat), 500);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7fe ffb3 	bl	80004e8 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	f107 0008 	add.w	r0, r7, #8
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <printFloat+0x38>)
 800158c:	f005 fa60 	bl	8006a50 <siprintf>
 8001590:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer1,
 8001592:	b29a      	uxth	r2, r3
 8001594:	f107 0108 	add.w	r1, r7, #8
 8001598:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <printFloat+0x3c>)
 800159e:	f004 f897 	bl	80056d0 <HAL_UART_Transmit>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08008eb0 	.word	0x08008eb0
 80015b0:	200002b8 	.word	0x200002b8

080015b4 <printHex>:

void printHex(uint16_t data) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
	char buffer[16];
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
			sprintf(buffer, "0x%04X\r\n", data), 500);
 80015be:	88fa      	ldrh	r2, [r7, #6]
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4908      	ldr	r1, [pc, #32]	; (80015e8 <printHex+0x34>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f005 fa42 	bl	8006a50 <siprintf>
 80015cc:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer,
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f107 0108 	add.w	r1, r7, #8
 80015d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <printHex+0x38>)
 80015da:	f004 f879 	bl	80056d0 <HAL_UART_Transmit>

}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08008eb8 	.word	0x08008eb8
 80015ec:	200002b8 	.word	0x200002b8

080015f0 <printString>:
void printString(char *str) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7fe fe09 	bl	8000210 <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29a      	uxth	r2, r3
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <printString+0x24>)
 8001608:	f004 f862 	bl	80056d0 <HAL_UART_Transmit>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200002b8 	.word	0x200002b8

08001618 <printlnString>:
void printlnString(char *str) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7fe fdf5 	bl	8000210 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	2364      	movs	r3, #100	; 0x64
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <printlnString+0x2c>)
 8001630:	f004 f84e 	bl	80056d0 <HAL_UART_Transmit>
	printString("\r\n");
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <printlnString+0x30>)
 8001636:	f7ff ffdb 	bl	80015f0 <printString>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200002b8 	.word	0x200002b8
 8001648:	08008ec4 	.word	0x08008ec4

0800164c <printAT_Comand_Error>:

void printAT_Comand_Error(int errorNr) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	printString("ERROR ");
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <printAT_Comand_Error+0x1c>)
 8001656:	f7ff ffcb 	bl	80015f0 <printString>
	printDecimal(errorNr);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ff6e 	bl	800153c <printDecimal>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	08008ec8 	.word	0x08008ec8

0800166c <str_cut>:
 }*/
/*
 *      Remove given section from string. Negative len means remove
 *      everything up to the end.
 */
int str_cut(char *str, int begin, int len) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
	int l = strlen(str);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7fe fdc9 	bl	8000210 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	617b      	str	r3, [r7, #20]

	if (len < 0)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da03      	bge.n	8001690 <str_cut+0x24>
		len = l - begin;
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	607b      	str	r3, [r7, #4]
	if (begin + len > l)
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	da03      	bge.n	80016a4 <str_cut+0x38>
		len = l - begin;
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	607b      	str	r3, [r7, #4]
	memmove(str + begin, str + begin + len, l - len + 1);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	18d0      	adds	r0, r2, r3
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	18d1      	adds	r1, r2, r3
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	461a      	mov	r2, r3
 80016be:	f004 fd45 	bl	800614c <memmove>

	return len;
 80016c2:	687b      	ldr	r3, [r7, #4]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <stringToInt>:

uint32_t stringToInt(char *str) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	str_cut(str, 4, -1);
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	2104      	movs	r1, #4
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffc6 	bl	800166c <str_cut>

	//int l = strlen(str);
	return str[0] << 24 | str[1] << 16 | str[2] << 8 | str[3];
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	061a      	lsls	r2, r3, #24
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3301      	adds	r3, #1
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3302      	adds	r3, #2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	4313      	orrs	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	3203      	adds	r2, #3
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	4313      	orrs	r3, r2

}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a15      	ldr	r2, [pc, #84]	; (8001770 <HAL_UART_RxCpltCallback+0x64>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d122      	bne.n	8001764 <HAL_UART_RxCpltCallback+0x58>
		__HAL_UART_FLUSH_DRREGISTER(&huart1);
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_UART_RxCpltCallback+0x68>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
		if (rxByte == 13 || rxByte == 10 || rxIdx >= 23) {
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_UART_RxCpltCallback+0x6c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b0d      	cmp	r3, #13
 800172a:	d007      	beq.n	800173c <HAL_UART_RxCpltCallback+0x30>
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_UART_RxCpltCallback+0x6c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b0a      	cmp	r3, #10
 8001732:	d003      	beq.n	800173c <HAL_UART_RxCpltCallback+0x30>
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_UART_RxCpltCallback+0x70>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	2b16      	cmp	r3, #22
 800173a:	d906      	bls.n	800174a <HAL_UART_RxCpltCallback+0x3e>
			//rxBuffer[rxIdx] = rxByte;
			rxFlag = 1;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_UART_RxCpltCallback+0x74>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
			rxIdx = 0;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_UART_RxCpltCallback+0x70>)
 8001744:	2200      	movs	r2, #0
 8001746:	801a      	strh	r2, [r3, #0]
			rxBuffer[rxIdx] = rxByte;
			rxIdx++;
		}
	}

}
 8001748:	e00c      	b.n	8001764 <HAL_UART_RxCpltCallback+0x58>
			rxBuffer[rxIdx] = rxByte;
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_UART_RxCpltCallback+0x70>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_UART_RxCpltCallback+0x6c>)
 8001752:	7819      	ldrb	r1, [r3, #0]
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_UART_RxCpltCallback+0x78>)
 8001756:	5499      	strb	r1, [r3, r2]
			rxIdx++;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_UART_RxCpltCallback+0x70>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_UART_RxCpltCallback+0x70>)
 8001762:	801a      	strh	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40013800 	.word	0x40013800
 8001774:	200002b8 	.word	0x200002b8
 8001778:	2000026c 	.word	0x2000026c
 800177c:	20000264 	.word	0x20000264
 8001780:	2000036a 	.word	0x2000036a
 8001784:	20000300 	.word	0x20000300

08001788 <MAX17320Config>:
void MAX17320Config() {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	//settings of MAX17320
	//boot up time
	RGBTurnBlue();
 800178e:	f7ff febd 	bl	800150c <RGBTurnBlue>

	//FullReset(&hi2c1);

	HAL_Delay(500); //wait 500ms to make sure MAX17320 is ready
 8001792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001796:	f001 f8c3 	bl	8002920 <HAL_Delay>

	data[0] = 0x0A; //LSB
 800179a:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <MAX17320Config+0x1bc>)
 800179c:	220a      	movs	r2, #10
 800179e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x22; //MSB
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <MAX17320Config+0x1bc>)
 80017a2:	2222      	movs	r2, #34	; 0x22
 80017a4:	705a      	strb	r2, [r3, #1]

	nsetReg(&hi2c1, nPackCfgReg, data);
 80017a6:	4a67      	ldr	r2, [pc, #412]	; (8001944 <MAX17320Config+0x1bc>)
 80017a8:	21b5      	movs	r1, #181	; 0xb5
 80017aa:	4867      	ldr	r0, [pc, #412]	; (8001948 <MAX17320Config+0x1c0>)
 80017ac:	f7ff fd6e 	bl	800128c <nsetReg>

	//data[0] = 0x00; //LSB
	//data[1] = 0x00; //MSB
	//nsetReg(&hi2c1, nProtCfgReg, data);

	data[0] = 0xC8; //LSB
 80017b0:	4b64      	ldr	r3, [pc, #400]	; (8001944 <MAX17320Config+0x1bc>)
 80017b2:	22c8      	movs	r2, #200	; 0xc8
 80017b4:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00; //MSB
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <MAX17320Config+0x1bc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	705a      	strb	r2, [r3, #1]
	nsetReg(&hi2c1, nRSenseReg, data);
 80017bc:	4a61      	ldr	r2, [pc, #388]	; (8001944 <MAX17320Config+0x1bc>)
 80017be:	21cf      	movs	r1, #207	; 0xcf
 80017c0:	4861      	ldr	r0, [pc, #388]	; (8001948 <MAX17320Config+0x1c0>)
 80017c2:	f7ff fd63 	bl	800128c <nsetReg>
	data[0] = 0x4B; //LSB
 80017c6:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <MAX17320Config+0x1bc>)
 80017c8:	224b      	movs	r2, #75	; 0x4b
 80017ca:	701a      	strb	r2, [r3, #0]
	data[1] = 0x01; //MSB
 80017cc:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <MAX17320Config+0x1bc>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	705a      	strb	r2, [r3, #1]
	nsetReg(&hi2c1, nHProtCfg2Reg, data);
 80017d2:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <MAX17320Config+0x1bc>)
 80017d4:	21f1      	movs	r1, #241	; 0xf1
 80017d6:	485c      	ldr	r0, [pc, #368]	; (8001948 <MAX17320Config+0x1c0>)
 80017d8:	f7ff fd58 	bl	800128c <nsetReg>
	data[0] = 0x61; //LSB
 80017dc:	4b59      	ldr	r3, [pc, #356]	; (8001944 <MAX17320Config+0x1bc>)
 80017de:	2261      	movs	r2, #97	; 0x61
 80017e0:	701a      	strb	r2, [r3, #0]
	data[1] = 0x1C; //MSB
 80017e2:	4b58      	ldr	r3, [pc, #352]	; (8001944 <MAX17320Config+0x1bc>)
 80017e4:	221c      	movs	r2, #28
 80017e6:	705a      	strb	r2, [r3, #1]
	nsetReg(&hi2c1, nBalThReg, data);
 80017e8:	4a56      	ldr	r2, [pc, #344]	; (8001944 <MAX17320Config+0x1bc>)
 80017ea:	21d4      	movs	r1, #212	; 0xd4
 80017ec:	4856      	ldr	r0, [pc, #344]	; (8001948 <MAX17320Config+0x1c0>)
 80017ee:	f7ff fd4d 	bl	800128c <nsetReg>
	data[0] = 0x10; //LSB
 80017f2:	4b54      	ldr	r3, [pc, #336]	; (8001944 <MAX17320Config+0x1bc>)
 80017f4:	2210      	movs	r2, #16
 80017f6:	701a      	strb	r2, [r3, #0]
	data[1] = 0x04; //MSB
 80017f8:	4b52      	ldr	r3, [pc, #328]	; (8001944 <MAX17320Config+0x1bc>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	705a      	strb	r2, [r3, #1]
	nsetReg(&hi2c1, nProtCfgReg, data);
 80017fe:	4a51      	ldr	r2, [pc, #324]	; (8001944 <MAX17320Config+0x1bc>)
 8001800:	21d7      	movs	r1, #215	; 0xd7
 8001802:	4851      	ldr	r0, [pc, #324]	; (8001948 <MAX17320Config+0x1c0>)
 8001804:	f7ff fd42 	bl	800128c <nsetReg>
	data[0] = 0x00; //LSB
 8001808:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <MAX17320Config+0x1bc>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00; //MSB
 800180e:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <MAX17320Config+0x1bc>)
 8001810:	2200      	movs	r2, #0
 8001812:	705a      	strb	r2, [r3, #1]
	nsetReg(&hi2c1, nBattStatusReg, data);
 8001814:	4a4b      	ldr	r2, [pc, #300]	; (8001944 <MAX17320Config+0x1bc>)
 8001816:	21a8      	movs	r1, #168	; 0xa8
 8001818:	484b      	ldr	r0, [pc, #300]	; (8001948 <MAX17320Config+0x1c0>)
 800181a:	f7ff fd37 	bl	800128c <nsetReg>
	data[0] = 0x00; //LSB
 800181e:	4b49      	ldr	r3, [pc, #292]	; (8001944 <MAX17320Config+0x1bc>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00; //MSB
 8001824:	4b47      	ldr	r3, [pc, #284]	; (8001944 <MAX17320Config+0x1bc>)
 8001826:	2200      	movs	r2, #0
 8001828:	705a      	strb	r2, [r3, #1]
	nsetReg(&hi2c1, nFaultLogReg, data);
 800182a:	4a46      	ldr	r2, [pc, #280]	; (8001944 <MAX17320Config+0x1bc>)
 800182c:	21ae      	movs	r1, #174	; 0xae
 800182e:	4846      	ldr	r0, [pc, #280]	; (8001948 <MAX17320Config+0x1c0>)
 8001830:	f7ff fd2c 	bl	800128c <nsetReg>

	for (int var = 0; var < 10; ++var) {
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	e07a      	b.n	8001930 <MAX17320Config+0x1a8>

		getRepCap(&hi2c1);
 800183a:	4843      	ldr	r0, [pc, #268]	; (8001948 <MAX17320Config+0x1c0>)
 800183c:	f7ff fc6c 	bl	8001118 <getRepCap>
		HAL_Delay(10);
 8001840:	200a      	movs	r0, #10
 8001842:	f001 f86d 	bl	8002920 <HAL_Delay>
		getRepSoC(&hi2c1);
 8001846:	4840      	ldr	r0, [pc, #256]	; (8001948 <MAX17320Config+0x1c0>)
 8001848:	f7ff fc96 	bl	8001178 <getRepSoC>
		HAL_Delay(10);
 800184c:	200a      	movs	r0, #10
 800184e:	f001 f867 	bl	8002920 <HAL_Delay>
		getTTE(&hi2c1);
 8001852:	483d      	ldr	r0, [pc, #244]	; (8001948 <MAX17320Config+0x1c0>)
 8001854:	f7ff fcbe 	bl	80011d4 <getTTE>
		HAL_Delay(10);
 8001858:	200a      	movs	r0, #10
 800185a:	f001 f861 	bl	8002920 <HAL_Delay>
		getTTF(&hi2c1);
 800185e:	483a      	ldr	r0, [pc, #232]	; (8001948 <MAX17320Config+0x1c0>)
 8001860:	f7ff fce6 	bl	8001230 <getTTF>
		HAL_Delay(10);
 8001864:	200a      	movs	r0, #10
 8001866:	f001 f85b 	bl	8002920 <HAL_Delay>
		getVC1(&hi2c1);
 800186a:	4837      	ldr	r0, [pc, #220]	; (8001948 <MAX17320Config+0x1c0>)
 800186c:	f7ff fb48 	bl	8000f00 <getVC1>
		HAL_Delay(10);
 8001870:	200a      	movs	r0, #10
 8001872:	f001 f855 	bl	8002920 <HAL_Delay>
		getVC2(&hi2c1);
 8001876:	4834      	ldr	r0, [pc, #208]	; (8001948 <MAX17320Config+0x1c0>)
 8001878:	f7ff fb6e 	bl	8000f58 <getVC2>
		HAL_Delay(10);
 800187c:	200a      	movs	r0, #10
 800187e:	f001 f84f 	bl	8002920 <HAL_Delay>
		getVC3(&hi2c1);
 8001882:	4831      	ldr	r0, [pc, #196]	; (8001948 <MAX17320Config+0x1c0>)
 8001884:	f7ff fb94 	bl	8000fb0 <getVC3>
		HAL_Delay(10);
 8001888:	200a      	movs	r0, #10
 800188a:	f001 f849 	bl	8002920 <HAL_Delay>
		getVC4(&hi2c1);
 800188e:	482e      	ldr	r0, [pc, #184]	; (8001948 <MAX17320Config+0x1c0>)
 8001890:	f7ff fbba 	bl	8001008 <getVC4>
		HAL_Delay(10);
 8001894:	200a      	movs	r0, #10
 8001896:	f001 f843 	bl	8002920 <HAL_Delay>
		getVT(&hi2c1);
 800189a:	482b      	ldr	r0, [pc, #172]	; (8001948 <MAX17320Config+0x1c0>)
 800189c:	f7ff fbe0 	bl	8001060 <getVT>
		HAL_Delay(10);
 80018a0:	200a      	movs	r0, #10
 80018a2:	f001 f83d 	bl	8002920 <HAL_Delay>
		getCurrent(&hi2c1);
 80018a6:	4828      	ldr	r0, [pc, #160]	; (8001948 <MAX17320Config+0x1c0>)
 80018a8:	f7ff fc06 	bl	80010b8 <getCurrent>
		HAL_Delay(10);
 80018ac:	200a      	movs	r0, #10
 80018ae:	f001 f837 	bl	8002920 <HAL_Delay>
		getTemp1(&hi2c1);
 80018b2:	4825      	ldr	r0, [pc, #148]	; (8001948 <MAX17320Config+0x1c0>)
 80018b4:	f7ff fa74 	bl	8000da0 <getTemp1>
		HAL_Delay(10);
 80018b8:	200a      	movs	r0, #10
 80018ba:	f001 f831 	bl	8002920 <HAL_Delay>
		getTemp2(&hi2c1);
 80018be:	4822      	ldr	r0, [pc, #136]	; (8001948 <MAX17320Config+0x1c0>)
 80018c0:	f7ff fa9a 	bl	8000df8 <getTemp2>
		HAL_Delay(10);
 80018c4:	200a      	movs	r0, #10
 80018c6:	f001 f82b 	bl	8002920 <HAL_Delay>
		getTemp3(&hi2c1);
 80018ca:	481f      	ldr	r0, [pc, #124]	; (8001948 <MAX17320Config+0x1c0>)
 80018cc:	f7ff fac0 	bl	8000e50 <getTemp3>
		HAL_Delay(10);
 80018d0:	200a      	movs	r0, #10
 80018d2:	f001 f825 	bl	8002920 <HAL_Delay>
		getTemp4(&hi2c1);
 80018d6:	481c      	ldr	r0, [pc, #112]	; (8001948 <MAX17320Config+0x1c0>)
 80018d8:	f7ff fae6 	bl	8000ea8 <getTemp4>
		HAL_Delay(10);
 80018dc:	200a      	movs	r0, #10
 80018de:	f001 f81f 	bl	8002920 <HAL_Delay>
		getAvgDieTemp(&hi2c1);
 80018e2:	4819      	ldr	r0, [pc, #100]	; (8001948 <MAX17320Config+0x1c0>)
 80018e4:	f7ff fa30 	bl	8000d48 <getAvgDieTemp>
		HAL_Delay(10);
 80018e8:	200a      	movs	r0, #10
 80018ea:	f001 f819 	bl	8002920 <HAL_Delay>
		getStatus(&hi2c1);
 80018ee:	4816      	ldr	r0, [pc, #88]	; (8001948 <MAX17320Config+0x1c0>)
 80018f0:	f7ff fd4a 	bl	8001388 <getStatus>
		HAL_Delay(10);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f001 f813 	bl	8002920 <HAL_Delay>
		getStatus2(&hi2c1);
 80018fa:	4813      	ldr	r0, [pc, #76]	; (8001948 <MAX17320Config+0x1c0>)
 80018fc:	f7ff fd61 	bl	80013c2 <getStatus2>
		HAL_Delay(10);
 8001900:	200a      	movs	r0, #10
 8001902:	f001 f80d 	bl	8002920 <HAL_Delay>
		getProtStatus(&hi2c1);
 8001906:	4810      	ldr	r0, [pc, #64]	; (8001948 <MAX17320Config+0x1c0>)
 8001908:	f7ff fd78 	bl	80013fc <getProtStatus>
		HAL_Delay(10);
 800190c:	200a      	movs	r0, #10
 800190e:	f001 f807 	bl	8002920 <HAL_Delay>
		getProtAlrtStatus(&hi2c1);
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <MAX17320Config+0x1c0>)
 8001914:	f7ff fd8f 	bl	8001436 <getProtAlrtStatus>
		HAL_Delay(10);
 8001918:	200a      	movs	r0, #10
 800191a:	f001 f801 	bl	8002920 <HAL_Delay>
		getCommStatus(&hi2c1);
 800191e:	480a      	ldr	r0, [pc, #40]	; (8001948 <MAX17320Config+0x1c0>)
 8001920:	f7ff fda6 	bl	8001470 <getCommStatus>
		HAL_Delay(10);
 8001924:	200a      	movs	r0, #10
 8001926:	f000 fffb 	bl	8002920 <HAL_Delay>
	for (int var = 0; var < 10; ++var) {
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3301      	adds	r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b09      	cmp	r3, #9
 8001934:	dd81      	ble.n	800183a <MAX17320Config+0xb2>

	}
	RGBTurnOff();
 8001936:	f7ff fdb9 	bl	80014ac <RGBTurnOff>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200002f8 	.word	0x200002f8
 8001948:	2000020c 	.word	0x2000020c

0800194c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001952:	f000 ff8c 	bl	800286e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001956:	f000 fbad 	bl	80020b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800195a:	f000 fcfb 	bl	8002354 <MX_GPIO_Init>
	MX_DMA_Init();
 800195e:	f000 fcdb 	bl	8002318 <MX_DMA_Init>
	MX_I2C1_Init();
 8001962:	f000 fbe3 	bl	800212c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001966:	f000 fcad 	bl	80022c4 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 800196a:	f000 fc0d 	bl	8002188 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	//HAL_TIM_Base_Start_IT(&htim1);
	HAL_I2C_Init(&hi2c1);
 800196e:	487e      	ldr	r0, [pc, #504]	; (8001b68 <main+0x21c>)
 8001970:	f001 fd08 	bl	8003384 <HAL_I2C_Init>
	//HAL_UART_Receive_IT(&huart1, UART_RX_buffer, 10);
	__HAL_UART_FLUSH_DRREGISTER(&huart1);
 8001974:	4b7d      	ldr	r3, [pc, #500]	; (8001b6c <main+0x220>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_DMA(&huart1, &rxByte, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	497c      	ldr	r1, [pc, #496]	; (8001b70 <main+0x224>)
 800197e:	487b      	ldr	r0, [pc, #492]	; (8001b6c <main+0x220>)
 8001980:	f003 ff38 	bl	80057f4 <HAL_UART_Receive_DMA>
	//MAX17320Init(&hi2c1);

	MAX17320Config();
 8001984:	f7ff ff00 	bl	8001788 <MAX17320Config>
		 printFloat(avgTemp3);
		 printFloat(avgTemp4);
		 printHex(getStatus(&hi2c1));
		 */
		uint8_t data1[2];
		if (rxFlag == 1) {
 8001988:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <main+0x228>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d1fb      	bne.n	8001988 <main+0x3c>
			RGBTurnRED();
 8001990:	f7ff fda4 	bl	80014dc <RGBTurnRED>
			rxFlag = 0;
 8001994:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <main+0x228>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]

			printlnString(rxBuffer);
 800199a:	4877      	ldr	r0, [pc, #476]	; (8001b78 <main+0x22c>)
 800199c:	f7ff fe3c 	bl	8001618 <printlnString>

			if (rxBuffer[0] == 'A' && rxBuffer[1] == 'T'
 80019a0:	4b75      	ldr	r3, [pc, #468]	; (8001b78 <main+0x22c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b41      	cmp	r3, #65	; 0x41
 80019a6:	f040 8357 	bne.w	8002058 <main+0x70c>
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <main+0x22c>)
 80019ac:	785b      	ldrb	r3, [r3, #1]
 80019ae:	2b54      	cmp	r3, #84	; 0x54
 80019b0:	f040 8352 	bne.w	8002058 <main+0x70c>
					&& rxBuffer[2] == '+') {
 80019b4:	4b70      	ldr	r3, [pc, #448]	; (8001b78 <main+0x22c>)
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	2b2b      	cmp	r3, #43	; 0x2b
 80019ba:	f040 834d 	bne.w	8002058 <main+0x70c>
				str_cut(rxBuffer, 0, 3); //cut AT+ off
 80019be:	2203      	movs	r2, #3
 80019c0:	2100      	movs	r1, #0
 80019c2:	486d      	ldr	r0, [pc, #436]	; (8001b78 <main+0x22c>)
 80019c4:	f7ff fe52 	bl	800166c <str_cut>
				//printlnString(rxBuffer);

				switch (stringToInt(rxBuffer)) {
 80019c8:	486b      	ldr	r0, [pc, #428]	; (8001b78 <main+0x22c>)
 80019ca:	f7ff fe7f 	bl	80016cc <stringToInt>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a6a      	ldr	r2, [pc, #424]	; (8001b7c <main+0x230>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	f000 8213 	beq.w	8001dfe <main+0x4b2>
 80019d8:	4a68      	ldr	r2, [pc, #416]	; (8001b7c <main+0x230>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	f200 8337 	bhi.w	800204e <main+0x702>
 80019e0:	4a67      	ldr	r2, [pc, #412]	; (8001b80 <main+0x234>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	f000 8200 	beq.w	8001de8 <main+0x49c>
 80019e8:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <main+0x234>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	f200 832f 	bhi.w	800204e <main+0x702>
 80019f0:	4a64      	ldr	r2, [pc, #400]	; (8001b84 <main+0x238>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	f000 82c7 	beq.w	8001f86 <main+0x63a>
 80019f8:	4a62      	ldr	r2, [pc, #392]	; (8001b84 <main+0x238>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	f200 8327 	bhi.w	800204e <main+0x702>
 8001a00:	4a61      	ldr	r2, [pc, #388]	; (8001b88 <main+0x23c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	f000 82b4 	beq.w	8001f70 <main+0x624>
 8001a08:	4a60      	ldr	r2, [pc, #384]	; (8001b8c <main+0x240>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	f080 831f 	bcs.w	800204e <main+0x702>
 8001a10:	4a5f      	ldr	r2, [pc, #380]	; (8001b90 <main+0x244>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	f000 8256 	beq.w	8001ec4 <main+0x578>
 8001a18:	4a5e      	ldr	r2, [pc, #376]	; (8001b94 <main+0x248>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	f080 8317 	bcs.w	800204e <main+0x702>
 8001a20:	4a5d      	ldr	r2, [pc, #372]	; (8001b98 <main+0x24c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	f000 8243 	beq.w	8001eae <main+0x562>
 8001a28:	4a5c      	ldr	r2, [pc, #368]	; (8001b9c <main+0x250>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f080 830f 	bcs.w	800204e <main+0x702>
 8001a30:	4a5b      	ldr	r2, [pc, #364]	; (8001ba0 <main+0x254>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	f000 8230 	beq.w	8001e98 <main+0x54c>
 8001a38:	4a5a      	ldr	r2, [pc, #360]	; (8001ba4 <main+0x258>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	f080 8307 	bcs.w	800204e <main+0x702>
 8001a40:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <main+0x25c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	f000 82d6 	beq.w	8001ff4 <main+0x6a8>
 8001a48:	4a58      	ldr	r2, [pc, #352]	; (8001bac <main+0x260>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	f080 82ff 	bcs.w	800204e <main+0x702>
 8001a50:	4a57      	ldr	r2, [pc, #348]	; (8001bb0 <main+0x264>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	f000 82c3 	beq.w	8001fde <main+0x692>
 8001a58:	4a56      	ldr	r2, [pc, #344]	; (8001bb4 <main+0x268>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	f080 82f7 	bcs.w	800204e <main+0x702>
 8001a60:	4a55      	ldr	r2, [pc, #340]	; (8001bb8 <main+0x26c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	f000 82b0 	beq.w	8001fc8 <main+0x67c>
 8001a68:	4a54      	ldr	r2, [pc, #336]	; (8001bbc <main+0x270>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	f080 82ef 	bcs.w	800204e <main+0x702>
 8001a70:	4a53      	ldr	r2, [pc, #332]	; (8001bc0 <main+0x274>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	f000 829d 	beq.w	8001fb2 <main+0x666>
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <main+0x278>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	f080 82e7 	bcs.w	800204e <main+0x702>
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <main+0x27c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	f000 828a 	beq.w	8001f9c <main+0x650>
 8001a88:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <main+0x280>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	f080 82df 	bcs.w	800204e <main+0x702>
 8001a90:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <main+0x284>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	f000 82b9 	beq.w	800200a <main+0x6be>
 8001a98:	4a4d      	ldr	r2, [pc, #308]	; (8001bd0 <main+0x284>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	f200 82d7 	bhi.w	800204e <main+0x702>
 8001aa0:	4a4c      	ldr	r2, [pc, #304]	; (8001bd4 <main+0x288>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	f000 8195 	beq.w	8001dd2 <main+0x486>
 8001aa8:	4a4a      	ldr	r2, [pc, #296]	; (8001bd4 <main+0x288>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	f200 82cf 	bhi.w	800204e <main+0x702>
 8001ab0:	4a49      	ldr	r2, [pc, #292]	; (8001bd8 <main+0x28c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	f000 8182 	beq.w	8001dbc <main+0x470>
 8001ab8:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <main+0x28c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	f200 82c7 	bhi.w	800204e <main+0x702>
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <main+0x290>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	f000 81dd 	beq.w	8001e82 <main+0x536>
 8001ac8:	4a44      	ldr	r2, [pc, #272]	; (8001bdc <main+0x290>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	f200 82bf 	bhi.w	800204e <main+0x702>
 8001ad0:	4a43      	ldr	r2, [pc, #268]	; (8001be0 <main+0x294>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	f000 809e 	beq.w	8001c14 <main+0x2c8>
 8001ad8:	4a41      	ldr	r2, [pc, #260]	; (8001be0 <main+0x294>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	f200 82b7 	bhi.w	800204e <main+0x702>
 8001ae0:	4a40      	ldr	r2, [pc, #256]	; (8001be4 <main+0x298>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d03c      	beq.n	8001b60 <main+0x214>
 8001ae6:	4a3f      	ldr	r2, [pc, #252]	; (8001be4 <main+0x298>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	f200 82b0 	bhi.w	800204e <main+0x702>
 8001aee:	4a3e      	ldr	r2, [pc, #248]	; (8001be8 <main+0x29c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	f000 829f 	beq.w	8002034 <main+0x6e8>
 8001af6:	4a3c      	ldr	r2, [pc, #240]	; (8001be8 <main+0x29c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	f200 82a8 	bhi.w	800204e <main+0x702>
 8001afe:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <main+0x2a0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	f000 8153 	beq.w	8001dac <main+0x460>
 8001b06:	4a39      	ldr	r2, [pc, #228]	; (8001bec <main+0x2a0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	f200 82a0 	bhi.w	800204e <main+0x702>
 8001b0e:	4a38      	ldr	r2, [pc, #224]	; (8001bf0 <main+0x2a4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	f000 814f 	beq.w	8001db4 <main+0x468>
 8001b16:	4a36      	ldr	r2, [pc, #216]	; (8001bf0 <main+0x2a4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	f200 8298 	bhi.w	800204e <main+0x702>
 8001b1e:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <main+0x2a8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	f000 81a3 	beq.w	8001e6c <main+0x520>
 8001b26:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <main+0x2a8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	f200 8290 	bhi.w	800204e <main+0x702>
 8001b2e:	4a32      	ldr	r2, [pc, #200]	; (8001bf8 <main+0x2ac>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	f000 8190 	beq.w	8001e56 <main+0x50a>
 8001b36:	4a31      	ldr	r2, [pc, #196]	; (8001bfc <main+0x2b0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	f080 8288 	bcs.w	800204e <main+0x702>
 8001b3e:	4a30      	ldr	r2, [pc, #192]	; (8001c00 <main+0x2b4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	f000 817d 	beq.w	8001e40 <main+0x4f4>
 8001b46:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <main+0x2b8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	f080 8280 	bcs.w	800204e <main+0x702>
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <main+0x2bc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	f000 815f 	beq.w	8001e14 <main+0x4c8>
 8001b56:	4a2d      	ldr	r2, [pc, #180]	; (8001c0c <main+0x2c0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	f000 8166 	beq.w	8001e2a <main+0x4de>
 8001b5e:	e276      	b.n	800204e <main+0x702>
				case 'O' << 24 | 'K' << 16 | '?' << 8 | 0:
					printlnString("OK");
 8001b60:	482b      	ldr	r0, [pc, #172]	; (8001c10 <main+0x2c4>)
 8001b62:	f7ff fd59 	bl	8001618 <printlnString>
					break;
 8001b66:	e276      	b.n	8002056 <main+0x70a>
 8001b68:	2000020c 	.word	0x2000020c
 8001b6c:	200002b8 	.word	0x200002b8
 8001b70:	2000026c 	.word	0x2000026c
 8001b74:	2000036a 	.word	0x2000036a
 8001b78:	20000300 	.word	0x20000300
 8001b7c:	5454463f 	.word	0x5454463f
 8001b80:	5454453f 	.word	0x5454453f
 8001b84:	5448443f 	.word	0x5448443f
 8001b88:	5448343f 	.word	0x5448343f
 8001b8c:	54483440 	.word	0x54483440
 8001b90:	5448333f 	.word	0x5448333f
 8001b94:	54483340 	.word	0x54483340
 8001b98:	5448323f 	.word	0x5448323f
 8001b9c:	54483240 	.word	0x54483240
 8001ba0:	5448313f 	.word	0x5448313f
 8001ba4:	54483140 	.word	0x54483140
 8001ba8:	5354353f 	.word	0x5354353f
 8001bac:	53543540 	.word	0x53543540
 8001bb0:	5354343f 	.word	0x5354343f
 8001bb4:	53543440 	.word	0x53543440
 8001bb8:	5354333f 	.word	0x5354333f
 8001bbc:	53543340 	.word	0x53543340
 8001bc0:	5354323f 	.word	0x5354323f
 8001bc4:	53543240 	.word	0x53543240
 8001bc8:	5354313f 	.word	0x5354313f
 8001bcc:	53543140 	.word	0x53543140
 8001bd0:	52535400 	.word	0x52535400
 8001bd4:	5253433f 	.word	0x5253433f
 8001bd8:	52433f00 	.word	0x52433f00
 8001bdc:	50433f00 	.word	0x50433f00
 8001be0:	4f563f00 	.word	0x4f563f00
 8001be4:	4f4b3f00 	.word	0x4f4b3f00
 8001be8:	494e5400 	.word	0x494e5400
 8001bec:	454e5042 	.word	0x454e5042
 8001bf0:	44535042 	.word	0x44535042
 8001bf4:	4356543f 	.word	0x4356543f
 8001bf8:	4356343f 	.word	0x4356343f
 8001bfc:	43563440 	.word	0x43563440
 8001c00:	4356333f 	.word	0x4356333f
 8001c04:	43563340 	.word	0x43563340
 8001c08:	4356313f 	.word	0x4356313f
 8001c0c:	4356323f 	.word	0x4356323f
 8001c10:	08008ed0 	.word	0x08008ed0
				case 'O' << 24 | 'V' << 16 | '?' << 8 | 0:
					printlnString("Overview:\r\n");
 8001c14:	48b1      	ldr	r0, [pc, #708]	; (8001edc <main+0x590>)
 8001c16:	f7ff fcff 	bl	8001618 <printlnString>

					printlnString("Reported remaining Capacity: [Ah]");
 8001c1a:	48b1      	ldr	r0, [pc, #708]	; (8001ee0 <main+0x594>)
 8001c1c:	f7ff fcfc 	bl	8001618 <printlnString>
					printFloat(getRepCap(&hi2c1));
 8001c20:	48b0      	ldr	r0, [pc, #704]	; (8001ee4 <main+0x598>)
 8001c22:	f7ff fa79 	bl	8001118 <getRepCap>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fca3 	bl	8001574 <printFloat>
					printlnString("Reported state of charge: [%]");
 8001c2e:	48ae      	ldr	r0, [pc, #696]	; (8001ee8 <main+0x59c>)
 8001c30:	f7ff fcf2 	bl	8001618 <printlnString>
					printFloat(getRepSoC(&hi2c1));
 8001c34:	48ab      	ldr	r0, [pc, #684]	; (8001ee4 <main+0x598>)
 8001c36:	f7ff fa9f 	bl	8001178 <getRepSoC>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fc99 	bl	8001574 <printFloat>
					printlnString("Time to empty: [s]");
 8001c42:	48aa      	ldr	r0, [pc, #680]	; (8001eec <main+0x5a0>)
 8001c44:	f7ff fce8 	bl	8001618 <printlnString>
					printFloat(getTTE(&hi2c1));
 8001c48:	48a6      	ldr	r0, [pc, #664]	; (8001ee4 <main+0x598>)
 8001c4a:	f7ff fac3 	bl	80011d4 <getTTE>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fc8f 	bl	8001574 <printFloat>
					printlnString("Time to full: [s]");
 8001c56:	48a6      	ldr	r0, [pc, #664]	; (8001ef0 <main+0x5a4>)
 8001c58:	f7ff fcde 	bl	8001618 <printlnString>
					printFloat(getTTF(&hi2c1));
 8001c5c:	48a1      	ldr	r0, [pc, #644]	; (8001ee4 <main+0x598>)
 8001c5e:	f7ff fae7 	bl	8001230 <getTTF>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fc85 	bl	8001574 <printFloat>
					printlnString("Cell voltage 1: [V]");
 8001c6a:	48a2      	ldr	r0, [pc, #648]	; (8001ef4 <main+0x5a8>)
 8001c6c:	f7ff fcd4 	bl	8001618 <printlnString>
					printFloat(getVC1(&hi2c1));
 8001c70:	489c      	ldr	r0, [pc, #624]	; (8001ee4 <main+0x598>)
 8001c72:	f7ff f945 	bl	8000f00 <getVC1>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fc7b 	bl	8001574 <printFloat>
					printlnString("Cell voltage 2: [V]");
 8001c7e:	489e      	ldr	r0, [pc, #632]	; (8001ef8 <main+0x5ac>)
 8001c80:	f7ff fcca 	bl	8001618 <printlnString>
					printFloat(getVC2(&hi2c1));
 8001c84:	4897      	ldr	r0, [pc, #604]	; (8001ee4 <main+0x598>)
 8001c86:	f7ff f967 	bl	8000f58 <getVC2>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fc71 	bl	8001574 <printFloat>
					printlnString("Cell voltage 3: [V]");
 8001c92:	489a      	ldr	r0, [pc, #616]	; (8001efc <main+0x5b0>)
 8001c94:	f7ff fcc0 	bl	8001618 <printlnString>
					printFloat(getVC3(&hi2c1));
 8001c98:	4892      	ldr	r0, [pc, #584]	; (8001ee4 <main+0x598>)
 8001c9a:	f7ff f989 	bl	8000fb0 <getVC3>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc67 	bl	8001574 <printFloat>
					printlnString("Cell voltage 4: [V]");
 8001ca6:	4896      	ldr	r0, [pc, #600]	; (8001f00 <main+0x5b4>)
 8001ca8:	f7ff fcb6 	bl	8001618 <printlnString>
					printFloat(getVC4(&hi2c1));
 8001cac:	488d      	ldr	r0, [pc, #564]	; (8001ee4 <main+0x598>)
 8001cae:	f7ff f9ab 	bl	8001008 <getVC4>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fc5d 	bl	8001574 <printFloat>
					printlnString("Cell voltage of total pack: [V]");
 8001cba:	4892      	ldr	r0, [pc, #584]	; (8001f04 <main+0x5b8>)
 8001cbc:	f7ff fcac 	bl	8001618 <printlnString>
					printFloat(getVT(&hi2c1));
 8001cc0:	4888      	ldr	r0, [pc, #544]	; (8001ee4 <main+0x598>)
 8001cc2:	f7ff f9cd 	bl	8001060 <getVT>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fc53 	bl	8001574 <printFloat>
					printlnString("Current from system to battery: [A]");
 8001cce:	488e      	ldr	r0, [pc, #568]	; (8001f08 <main+0x5bc>)
 8001cd0:	f7ff fca2 	bl	8001618 <printlnString>
					printFloat(getCurrent(&hi2c1));
 8001cd4:	4883      	ldr	r0, [pc, #524]	; (8001ee4 <main+0x598>)
 8001cd6:	f7ff f9ef 	bl	80010b8 <getCurrent>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fc49 	bl	8001574 <printFloat>
					printlnString("Temperature 1: [°C]");
 8001ce2:	488a      	ldr	r0, [pc, #552]	; (8001f0c <main+0x5c0>)
 8001ce4:	f7ff fc98 	bl	8001618 <printlnString>
					printFloat(getTemp1(&hi2c1));
 8001ce8:	487e      	ldr	r0, [pc, #504]	; (8001ee4 <main+0x598>)
 8001cea:	f7ff f859 	bl	8000da0 <getTemp1>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fc3f 	bl	8001574 <printFloat>
					printlnString("Temperature 2: [°C]");
 8001cf6:	4886      	ldr	r0, [pc, #536]	; (8001f10 <main+0x5c4>)
 8001cf8:	f7ff fc8e 	bl	8001618 <printlnString>
					printFloat(getTemp2(&hi2c1));
 8001cfc:	4879      	ldr	r0, [pc, #484]	; (8001ee4 <main+0x598>)
 8001cfe:	f7ff f87b 	bl	8000df8 <getTemp2>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fc35 	bl	8001574 <printFloat>
					printlnString("Temperature 3: [°C]");
 8001d0a:	4882      	ldr	r0, [pc, #520]	; (8001f14 <main+0x5c8>)
 8001d0c:	f7ff fc84 	bl	8001618 <printlnString>
					printFloat(getTemp3(&hi2c1));
 8001d10:	4874      	ldr	r0, [pc, #464]	; (8001ee4 <main+0x598>)
 8001d12:	f7ff f89d 	bl	8000e50 <getTemp3>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fc2b 	bl	8001574 <printFloat>
					printlnString("Temperature 4: [°C]");
 8001d1e:	487e      	ldr	r0, [pc, #504]	; (8001f18 <main+0x5cc>)
 8001d20:	f7ff fc7a 	bl	8001618 <printlnString>
					printFloat(getTemp4(&hi2c1));
 8001d24:	486f      	ldr	r0, [pc, #444]	; (8001ee4 <main+0x598>)
 8001d26:	f7ff f8bf 	bl	8000ea8 <getTemp4>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fc21 	bl	8001574 <printFloat>
					printlnString("Die temperature: [°C]");
 8001d32:	487a      	ldr	r0, [pc, #488]	; (8001f1c <main+0x5d0>)
 8001d34:	f7ff fc70 	bl	8001618 <printlnString>
					printFloat(getAvgDieTemp(&hi2c1));
 8001d38:	486a      	ldr	r0, [pc, #424]	; (8001ee4 <main+0x598>)
 8001d3a:	f7ff f805 	bl	8000d48 <getAvgDieTemp>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fc17 	bl	8001574 <printFloat>
					printlnString("Status register: [Hex]");
 8001d46:	4876      	ldr	r0, [pc, #472]	; (8001f20 <main+0x5d4>)
 8001d48:	f7ff fc66 	bl	8001618 <printlnString>
					printHex(getStatus(&hi2c1));
 8001d4c:	4865      	ldr	r0, [pc, #404]	; (8001ee4 <main+0x598>)
 8001d4e:	f7ff fb1b 	bl	8001388 <getStatus>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fc2d 	bl	80015b4 <printHex>
					printlnString("Status2 register: [Hex]");
 8001d5a:	4872      	ldr	r0, [pc, #456]	; (8001f24 <main+0x5d8>)
 8001d5c:	f7ff fc5c 	bl	8001618 <printlnString>
					printHex(getStatus2(&hi2c1));
 8001d60:	4860      	ldr	r0, [pc, #384]	; (8001ee4 <main+0x598>)
 8001d62:	f7ff fb2e 	bl	80013c2 <getStatus2>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fc23 	bl	80015b4 <printHex>
					printlnString("ProtStatus register: [Hex]");
 8001d6e:	486e      	ldr	r0, [pc, #440]	; (8001f28 <main+0x5dc>)
 8001d70:	f7ff fc52 	bl	8001618 <printlnString>
					printHex(getProtStatus(&hi2c1));
 8001d74:	485b      	ldr	r0, [pc, #364]	; (8001ee4 <main+0x598>)
 8001d76:	f7ff fb41 	bl	80013fc <getProtStatus>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fc19 	bl	80015b4 <printHex>
					printlnString("ProtAlrt register: [Hex]");
 8001d82:	486a      	ldr	r0, [pc, #424]	; (8001f2c <main+0x5e0>)
 8001d84:	f7ff fc48 	bl	8001618 <printlnString>
					printHex(getProtAlrtStatus(&hi2c1));
 8001d88:	4856      	ldr	r0, [pc, #344]	; (8001ee4 <main+0x598>)
 8001d8a:	f7ff fb54 	bl	8001436 <getProtAlrtStatus>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fc0f 	bl	80015b4 <printHex>
					printlnString("CommStatus register: [Hex]");
 8001d96:	4866      	ldr	r0, [pc, #408]	; (8001f30 <main+0x5e4>)
 8001d98:	f7ff fc3e 	bl	8001618 <printlnString>
					printHex(getCommStatus(&hi2c1));
 8001d9c:	4851      	ldr	r0, [pc, #324]	; (8001ee4 <main+0x598>)
 8001d9e:	f7ff fb67 	bl	8001470 <getCommStatus>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fc05 	bl	80015b4 <printHex>

					break;
 8001daa:	e154      	b.n	8002056 <main+0x70a>
				case 'E' << 24 | 'N' << 16 | 'P' << 8 | 'B':
					//DO TO enable passive balancing
					printlnString("ENPB OK");
 8001dac:	4861      	ldr	r0, [pc, #388]	; (8001f34 <main+0x5e8>)
 8001dae:	f7ff fc33 	bl	8001618 <printlnString>
					break;
 8001db2:	e150      	b.n	8002056 <main+0x70a>
				case 'D' << 24 | 'S' << 16 | 'P' << 8 | 'B':
					//DO TO Disable passive balancing
					printlnString("DSPB OK");
 8001db4:	4860      	ldr	r0, [pc, #384]	; (8001f38 <main+0x5ec>)
 8001db6:	f7ff fc2f 	bl	8001618 <printlnString>
					break;
 8001dba:	e14c      	b.n	8002056 <main+0x70a>
				case 'R' << 24 | 'C' << 16 | '?' << 8 | 0:
					printString("RC: ");
 8001dbc:	485f      	ldr	r0, [pc, #380]	; (8001f3c <main+0x5f0>)
 8001dbe:	f7ff fc17 	bl	80015f0 <printString>
					printFloat(getRepCap(&hi2c1));
 8001dc2:	4848      	ldr	r0, [pc, #288]	; (8001ee4 <main+0x598>)
 8001dc4:	f7ff f9a8 	bl	8001118 <getRepCap>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fbd2 	bl	8001574 <printFloat>
					break;
 8001dd0:	e141      	b.n	8002056 <main+0x70a>
				case 'R' << 24 | 'S' << 16 | 'C' << 8 | '?':
					printString("RSC: ");
 8001dd2:	485b      	ldr	r0, [pc, #364]	; (8001f40 <main+0x5f4>)
 8001dd4:	f7ff fc0c 	bl	80015f0 <printString>
					printFloat(getRepSoC(&hi2c1));
 8001dd8:	4842      	ldr	r0, [pc, #264]	; (8001ee4 <main+0x598>)
 8001dda:	f7ff f9cd 	bl	8001178 <getRepSoC>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fbc7 	bl	8001574 <printFloat>
					break;
 8001de6:	e136      	b.n	8002056 <main+0x70a>
				case 'T' << 24 | 'T' << 16 | 'E' << 8 | '?':
					printString("TTE: ");
 8001de8:	4856      	ldr	r0, [pc, #344]	; (8001f44 <main+0x5f8>)
 8001dea:	f7ff fc01 	bl	80015f0 <printString>
					printFloat(getTTE(&hi2c1));
 8001dee:	483d      	ldr	r0, [pc, #244]	; (8001ee4 <main+0x598>)
 8001df0:	f7ff f9f0 	bl	80011d4 <getTTE>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fbbc 	bl	8001574 <printFloat>
					break;
 8001dfc:	e12b      	b.n	8002056 <main+0x70a>
				case 'T' << 24 | 'T' << 16 | 'F' << 8 | '?':
					printString("TTF: ");
 8001dfe:	4852      	ldr	r0, [pc, #328]	; (8001f48 <main+0x5fc>)
 8001e00:	f7ff fbf6 	bl	80015f0 <printString>
					printFloat(getTTF(&hi2c1));
 8001e04:	4837      	ldr	r0, [pc, #220]	; (8001ee4 <main+0x598>)
 8001e06:	f7ff fa13 	bl	8001230 <getTTF>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fbb1 	bl	8001574 <printFloat>
					break;
 8001e12:	e120      	b.n	8002056 <main+0x70a>
				case 'C' << 24 | 'V' << 16 | '1' << 8 | '?':
					printString("CV1: ");
 8001e14:	484d      	ldr	r0, [pc, #308]	; (8001f4c <main+0x600>)
 8001e16:	f7ff fbeb 	bl	80015f0 <printString>
					printFloat(getVC1(&hi2c1));
 8001e1a:	4832      	ldr	r0, [pc, #200]	; (8001ee4 <main+0x598>)
 8001e1c:	f7ff f870 	bl	8000f00 <getVC1>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fba6 	bl	8001574 <printFloat>
					break;
 8001e28:	e115      	b.n	8002056 <main+0x70a>
				case 'C' << 24 | 'V' << 16 | '2' << 8 | '?':
					printString("CV2: ");
 8001e2a:	4849      	ldr	r0, [pc, #292]	; (8001f50 <main+0x604>)
 8001e2c:	f7ff fbe0 	bl	80015f0 <printString>
					printFloat(getVC2(&hi2c1));
 8001e30:	482c      	ldr	r0, [pc, #176]	; (8001ee4 <main+0x598>)
 8001e32:	f7ff f891 	bl	8000f58 <getVC2>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fb9b 	bl	8001574 <printFloat>
					break;
 8001e3e:	e10a      	b.n	8002056 <main+0x70a>
				case 'C' << 24 | 'V' << 16 | '3' << 8 | '?':
					printString("CV3: ");
 8001e40:	4844      	ldr	r0, [pc, #272]	; (8001f54 <main+0x608>)
 8001e42:	f7ff fbd5 	bl	80015f0 <printString>
					printFloat(getVC3(&hi2c1));
 8001e46:	4827      	ldr	r0, [pc, #156]	; (8001ee4 <main+0x598>)
 8001e48:	f7ff f8b2 	bl	8000fb0 <getVC3>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fb90 	bl	8001574 <printFloat>
					break;
 8001e54:	e0ff      	b.n	8002056 <main+0x70a>
				case 'C' << 24 | 'V' << 16 | '4' << 8 | '?':
					printString("CV4: ");
 8001e56:	4840      	ldr	r0, [pc, #256]	; (8001f58 <main+0x60c>)
 8001e58:	f7ff fbca 	bl	80015f0 <printString>
					printFloat(getVC4(&hi2c1));
 8001e5c:	4821      	ldr	r0, [pc, #132]	; (8001ee4 <main+0x598>)
 8001e5e:	f7ff f8d3 	bl	8001008 <getVC4>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fb85 	bl	8001574 <printFloat>
					break;
 8001e6a:	e0f4      	b.n	8002056 <main+0x70a>
				case 'C' << 24 | 'V' << 16 | 'T' << 8 | '?':
					printString("CVT: ");
 8001e6c:	483b      	ldr	r0, [pc, #236]	; (8001f5c <main+0x610>)
 8001e6e:	f7ff fbbf 	bl	80015f0 <printString>
					printFloat(getVT(&hi2c1));
 8001e72:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <main+0x598>)
 8001e74:	f7ff f8f4 	bl	8001060 <getVT>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fb7a 	bl	8001574 <printFloat>
					break;
 8001e80:	e0e9      	b.n	8002056 <main+0x70a>
				case 'P' << 24 | 'C' << 16 | '?' << 8 | 0:
					printString("PC: ");
 8001e82:	4837      	ldr	r0, [pc, #220]	; (8001f60 <main+0x614>)
 8001e84:	f7ff fbb4 	bl	80015f0 <printString>
					printFloat(getCurrent(&hi2c1));
 8001e88:	4816      	ldr	r0, [pc, #88]	; (8001ee4 <main+0x598>)
 8001e8a:	f7ff f915 	bl	80010b8 <getCurrent>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fb6f 	bl	8001574 <printFloat>
					break;
 8001e96:	e0de      	b.n	8002056 <main+0x70a>
				case 'T' << 24 | 'H' << 16 | '1' << 8 | '?':
					printString("TH1: ");
 8001e98:	4832      	ldr	r0, [pc, #200]	; (8001f64 <main+0x618>)
 8001e9a:	f7ff fba9 	bl	80015f0 <printString>
					printFloat(getTemp1(&hi2c1));
 8001e9e:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <main+0x598>)
 8001ea0:	f7fe ff7e 	bl	8000da0 <getTemp1>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fb64 	bl	8001574 <printFloat>
					break;
 8001eac:	e0d3      	b.n	8002056 <main+0x70a>
				case 'T' << 24 | 'H' << 16 | '2' << 8 | '?':
					printString("TH2: ");
 8001eae:	482e      	ldr	r0, [pc, #184]	; (8001f68 <main+0x61c>)
 8001eb0:	f7ff fb9e 	bl	80015f0 <printString>
					printFloat(getTemp2(&hi2c1));
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <main+0x598>)
 8001eb6:	f7fe ff9f 	bl	8000df8 <getTemp2>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fb59 	bl	8001574 <printFloat>
					break;
 8001ec2:	e0c8      	b.n	8002056 <main+0x70a>
				case 'T' << 24 | 'H' << 16 | '3' << 8 | '?':
					printString("TH3: ");
 8001ec4:	4829      	ldr	r0, [pc, #164]	; (8001f6c <main+0x620>)
 8001ec6:	f7ff fb93 	bl	80015f0 <printString>
					printFloat(getTemp3(&hi2c1));
 8001eca:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <main+0x598>)
 8001ecc:	f7fe ffc0 	bl	8000e50 <getTemp3>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fb4e 	bl	8001574 <printFloat>
					break;
 8001ed8:	e0bd      	b.n	8002056 <main+0x70a>
 8001eda:	bf00      	nop
 8001edc:	08008ed4 	.word	0x08008ed4
 8001ee0:	08008ee0 	.word	0x08008ee0
 8001ee4:	2000020c 	.word	0x2000020c
 8001ee8:	08008f04 	.word	0x08008f04
 8001eec:	08008f24 	.word	0x08008f24
 8001ef0:	08008f38 	.word	0x08008f38
 8001ef4:	08008f4c 	.word	0x08008f4c
 8001ef8:	08008f60 	.word	0x08008f60
 8001efc:	08008f74 	.word	0x08008f74
 8001f00:	08008f88 	.word	0x08008f88
 8001f04:	08008f9c 	.word	0x08008f9c
 8001f08:	08008fbc 	.word	0x08008fbc
 8001f0c:	08008fe0 	.word	0x08008fe0
 8001f10:	08008ff8 	.word	0x08008ff8
 8001f14:	08009010 	.word	0x08009010
 8001f18:	08009028 	.word	0x08009028
 8001f1c:	08009040 	.word	0x08009040
 8001f20:	08009058 	.word	0x08009058
 8001f24:	08009070 	.word	0x08009070
 8001f28:	08009088 	.word	0x08009088
 8001f2c:	080090a4 	.word	0x080090a4
 8001f30:	080090c0 	.word	0x080090c0
 8001f34:	080090dc 	.word	0x080090dc
 8001f38:	080090e4 	.word	0x080090e4
 8001f3c:	080090ec 	.word	0x080090ec
 8001f40:	080090f4 	.word	0x080090f4
 8001f44:	080090fc 	.word	0x080090fc
 8001f48:	08009104 	.word	0x08009104
 8001f4c:	0800910c 	.word	0x0800910c
 8001f50:	08009114 	.word	0x08009114
 8001f54:	0800911c 	.word	0x0800911c
 8001f58:	08009124 	.word	0x08009124
 8001f5c:	0800912c 	.word	0x0800912c
 8001f60:	08009134 	.word	0x08009134
 8001f64:	0800913c 	.word	0x0800913c
 8001f68:	08009144 	.word	0x08009144
 8001f6c:	0800914c 	.word	0x0800914c
				case 'T' << 24 | 'H' << 16 | '4' << 8 | '?':
					printString("TH4: ");
 8001f70:	4843      	ldr	r0, [pc, #268]	; (8002080 <main+0x734>)
 8001f72:	f7ff fb3d 	bl	80015f0 <printString>
					printFloat(getTemp4(&hi2c1));
 8001f76:	4843      	ldr	r0, [pc, #268]	; (8002084 <main+0x738>)
 8001f78:	f7fe ff96 	bl	8000ea8 <getTemp4>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff faf8 	bl	8001574 <printFloat>
					break;
 8001f84:	e067      	b.n	8002056 <main+0x70a>
				case 'T' << 24 | 'H' << 16 | 'D' << 8 | '?':
					printString("THD: ");
 8001f86:	4840      	ldr	r0, [pc, #256]	; (8002088 <main+0x73c>)
 8001f88:	f7ff fb32 	bl	80015f0 <printString>
					printFloat(getAvgDieTemp(&hi2c1));
 8001f8c:	483d      	ldr	r0, [pc, #244]	; (8002084 <main+0x738>)
 8001f8e:	f7fe fedb 	bl	8000d48 <getAvgDieTemp>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff faed 	bl	8001574 <printFloat>
					break;
 8001f9a:	e05c      	b.n	8002056 <main+0x70a>
				case 'S' << 24 | 'T' << 16 | '1' << 8 | '?':
					printString("ST1: ");
 8001f9c:	483b      	ldr	r0, [pc, #236]	; (800208c <main+0x740>)
 8001f9e:	f7ff fb27 	bl	80015f0 <printString>
					printHex(getStatus(&hi2c1));
 8001fa2:	4838      	ldr	r0, [pc, #224]	; (8002084 <main+0x738>)
 8001fa4:	f7ff f9f0 	bl	8001388 <getStatus>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb02 	bl	80015b4 <printHex>
					break;
 8001fb0:	e051      	b.n	8002056 <main+0x70a>
				case 'S' << 24 | 'T' << 16 | '2' << 8 | '?':
					printString("ST2: ");
 8001fb2:	4837      	ldr	r0, [pc, #220]	; (8002090 <main+0x744>)
 8001fb4:	f7ff fb1c 	bl	80015f0 <printString>
					printHex(getStatus2(&hi2c1));
 8001fb8:	4832      	ldr	r0, [pc, #200]	; (8002084 <main+0x738>)
 8001fba:	f7ff fa02 	bl	80013c2 <getStatus2>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff faf7 	bl	80015b4 <printHex>
					break;
 8001fc6:	e046      	b.n	8002056 <main+0x70a>
				case 'S' << 24 | 'T' << 16 | '3' << 8 | '?':
					printString("ST3: ");
 8001fc8:	4832      	ldr	r0, [pc, #200]	; (8002094 <main+0x748>)
 8001fca:	f7ff fb11 	bl	80015f0 <printString>
					printHex(getProtStatus(&hi2c1));
 8001fce:	482d      	ldr	r0, [pc, #180]	; (8002084 <main+0x738>)
 8001fd0:	f7ff fa14 	bl	80013fc <getProtStatus>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff faec 	bl	80015b4 <printHex>
					break;
 8001fdc:	e03b      	b.n	8002056 <main+0x70a>
				case 'S' << 24 | 'T' << 16 | '4' << 8 | '?':
					printString("ST4: ");
 8001fde:	482e      	ldr	r0, [pc, #184]	; (8002098 <main+0x74c>)
 8001fe0:	f7ff fb06 	bl	80015f0 <printString>
					printHex(getProtAlrtStatus(&hi2c1));
 8001fe4:	4827      	ldr	r0, [pc, #156]	; (8002084 <main+0x738>)
 8001fe6:	f7ff fa26 	bl	8001436 <getProtAlrtStatus>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fae1 	bl	80015b4 <printHex>
					break;
 8001ff2:	e030      	b.n	8002056 <main+0x70a>
				case 'S' << 24 | 'T' << 16 | '5' << 8 | '?':
					printString("ST5: ");
 8001ff4:	4829      	ldr	r0, [pc, #164]	; (800209c <main+0x750>)
 8001ff6:	f7ff fafb 	bl	80015f0 <printString>
					printHex(getCommStatus(&hi2c1));
 8001ffa:	4822      	ldr	r0, [pc, #136]	; (8002084 <main+0x738>)
 8001ffc:	f7ff fa38 	bl	8001470 <getCommStatus>
 8002000:	4603      	mov	r3, r0
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fad6 	bl	80015b4 <printHex>
					break;
 8002008:	e025      	b.n	8002056 <main+0x70a>
				case 'R' << 24 | 'S' << 16 | 'T' << 8 | 0:
					printString("RESET ");
 800200a:	4825      	ldr	r0, [pc, #148]	; (80020a0 <main+0x754>)
 800200c:	f7ff faf0 	bl	80015f0 <printString>
					RGBTurnBlue();
 8002010:	f7ff fa7c 	bl	800150c <RGBTurnBlue>

					if (FullReset(&hi2c1) == 0) {
 8002014:	481b      	ldr	r0, [pc, #108]	; (8002084 <main+0x738>)
 8002016:	f7fe fde7 	bl	8000be8 <FullReset>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <main+0x6e0>
						RGBTurnOff();
 8002020:	f7ff fa44 	bl	80014ac <RGBTurnOff>
						printlnString("OK");
 8002024:	481f      	ldr	r0, [pc, #124]	; (80020a4 <main+0x758>)
 8002026:	f7ff faf7 	bl	8001618 <printlnString>
					} else
						printlnString("NOK");

					break;
 800202a:	e014      	b.n	8002056 <main+0x70a>
						printlnString("NOK");
 800202c:	481e      	ldr	r0, [pc, #120]	; (80020a8 <main+0x75c>)
 800202e:	f7ff faf3 	bl	8001618 <printlnString>
					break;
 8002032:	e010      	b.n	8002056 <main+0x70a>
				case 'I' << 24 | 'N' << 16 | 'T' << 8 | 0:
					printString("INT ");
 8002034:	481d      	ldr	r0, [pc, #116]	; (80020ac <main+0x760>)
 8002036:	f7ff fadb 	bl	80015f0 <printString>
					RGBTurnBlue();
 800203a:	f7ff fa67 	bl	800150c <RGBTurnBlue>
					MAX17320Config();
 800203e:	f7ff fba3 	bl	8001788 <MAX17320Config>
					printlnString("OK");
 8002042:	4818      	ldr	r0, [pc, #96]	; (80020a4 <main+0x758>)
 8002044:	f7ff fae8 	bl	8001618 <printlnString>
					RGBTurnOff();
 8002048:	f7ff fa30 	bl	80014ac <RGBTurnOff>

					break;
 800204c:	e003      	b.n	8002056 <main+0x70a>
					 data1[1] = 0x00; //MSB
					 setReg(&hi2c1, CommStatReg, data1);
					 setReg(&hi2c1, CommStatReg, data1);
					 break;*/
				default:
					printAT_Comand_Error(AT_WRONG_COMMAND);
 800204e:	2002      	movs	r0, #2
 8002050:	f7ff fafc 	bl	800164c <printAT_Comand_Error>
					break;
 8002054:	bf00      	nop
				switch (stringToInt(rxBuffer)) {
 8002056:	e002      	b.n	800205e <main+0x712>
				}

			} else
				printAT_Comand_Error(AT_WRONG_COMMAND);
 8002058:	2002      	movs	r0, #2
 800205a:	f7ff faf7 	bl	800164c <printAT_Comand_Error>

			for (int var = 0; var < RxBufferLength; var++) {
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	e007      	b.n	8002074 <main+0x728>
				rxBuffer[var] = 0;
 8002064:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <main+0x764>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
			for (int var = 0; var < RxBufferLength; var++) {
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3301      	adds	r3, #1
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b17      	cmp	r3, #23
 8002078:	ddf4      	ble.n	8002064 <main+0x718>
			}
			//HAL_Delay(1000);
			RGBTurnOff();
 800207a:	f7ff fa17 	bl	80014ac <RGBTurnOff>
	while (1) {
 800207e:	e483      	b.n	8001988 <main+0x3c>
 8002080:	08009154 	.word	0x08009154
 8002084:	2000020c 	.word	0x2000020c
 8002088:	0800915c 	.word	0x0800915c
 800208c:	08009164 	.word	0x08009164
 8002090:	0800916c 	.word	0x0800916c
 8002094:	08009174 	.word	0x08009174
 8002098:	0800917c 	.word	0x0800917c
 800209c:	08009184 	.word	0x08009184
 80020a0:	0800918c 	.word	0x0800918c
 80020a4:	08008ed0 	.word	0x08008ed0
 80020a8:	08009194 	.word	0x08009194
 80020ac:	08009198 	.word	0x08009198
 80020b0:	20000300 	.word	0x20000300

080020b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b090      	sub	sp, #64	; 0x40
 80020b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	2228      	movs	r2, #40	; 0x28
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 f85c 	bl	8006180 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020da:	2301      	movs	r3, #1
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020de:	2310      	movs	r3, #16
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020e6:	f107 0318 	add.w	r3, r7, #24
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 f94a 	bl	8004384 <HAL_RCC_OscConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SystemClock_Config+0x46>
		Error_Handler();
 80020f6:	f000 f96d 	bl	80023d4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80020fa:	230f      	movs	r3, #15
 80020fc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f002 fbb6 	bl	8004884 <HAL_RCC_ClockConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <SystemClock_Config+0x6e>
		Error_Handler();
 800211e:	f000 f959 	bl	80023d4 <Error_Handler>
	}
}
 8002122:	bf00      	nop
 8002124:	3740      	adds	r7, #64	; 0x40
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_I2C1_Init+0x50>)
 8002132:	4a13      	ldr	r2, [pc, #76]	; (8002180 <MX_I2C1_Init+0x54>)
 8002134:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_I2C1_Init+0x50>)
 8002138:	4a12      	ldr	r2, [pc, #72]	; (8002184 <MX_I2C1_Init+0x58>)
 800213a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_I2C1_Init+0x50>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_I2C1_Init+0x50>)
 8002144:	2200      	movs	r2, #0
 8002146:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_I2C1_Init+0x50>)
 800214a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800214e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <MX_I2C1_Init+0x50>)
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <MX_I2C1_Init+0x50>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <MX_I2C1_Init+0x50>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_I2C1_Init+0x50>)
 8002164:	2200      	movs	r2, #0
 8002166:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_I2C1_Init+0x50>)
 800216a:	f001 f90b 	bl	8003384 <HAL_I2C_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002174:	f000 f92e 	bl	80023d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000020c 	.word	0x2000020c
 8002180:	40005400 	.word	0x40005400
 8002184:	000186a0 	.word	0x000186a0

08002188 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b096      	sub	sp, #88	; 0x58
 800218c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800218e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800219c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]
 80021b6:	615a      	str	r2, [r3, #20]
 80021b8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2220      	movs	r2, #32
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 ffdd 	bl	8006180 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <MX_TIM1_Init+0x134>)
 80021c8:	4a3d      	ldr	r2, [pc, #244]	; (80022c0 <MX_TIM1_Init+0x138>)
 80021ca:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4;
 80021cc:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <MX_TIM1_Init+0x134>)
 80021ce:	2204      	movs	r2, #4
 80021d0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <MX_TIM1_Init+0x134>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80021d8:	4b38      	ldr	r3, [pc, #224]	; (80022bc <MX_TIM1_Init+0x134>)
 80021da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021de:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <MX_TIM1_Init+0x134>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80021e6:	4b35      	ldr	r3, [pc, #212]	; (80022bc <MX_TIM1_Init+0x134>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021ec:	4b33      	ldr	r3, [pc, #204]	; (80022bc <MX_TIM1_Init+0x134>)
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80021f2:	4832      	ldr	r0, [pc, #200]	; (80022bc <MX_TIM1_Init+0x134>)
 80021f4:	f002 fcb2 	bl	8004b5c <HAL_TIM_Base_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM1_Init+0x7a>
		Error_Handler();
 80021fe:	f000 f8e9 	bl	80023d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002208:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800220c:	4619      	mov	r1, r3
 800220e:	482b      	ldr	r0, [pc, #172]	; (80022bc <MX_TIM1_Init+0x134>)
 8002210:	f002 fda4 	bl	8004d5c <HAL_TIM_ConfigClockSource>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM1_Init+0x96>
		Error_Handler();
 800221a:	f000 f8db 	bl	80023d4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 800221e:	4827      	ldr	r0, [pc, #156]	; (80022bc <MX_TIM1_Init+0x134>)
 8002220:	f002 fceb 	bl	8004bfa <HAL_TIM_OC_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM1_Init+0xa6>
		Error_Handler();
 800222a:	f000 f8d3 	bl	80023d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800223a:	4619      	mov	r1, r3
 800223c:	481f      	ldr	r0, [pc, #124]	; (80022bc <MX_TIM1_Init+0x134>)
 800223e:	f003 f943 	bl	80054c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8002248:	f000 f8c4 	bl	80023d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002258:	2300      	movs	r3, #0
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226c:	2200      	movs	r2, #0
 800226e:	4619      	mov	r1, r3
 8002270:	4812      	ldr	r0, [pc, #72]	; (80022bc <MX_TIM1_Init+0x134>)
 8002272:	f002 fd1b 	bl	8004cac <HAL_TIM_OC_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM1_Init+0xf8>
		Error_Handler();
 800227c:	f000 f8aa 	bl	80023d4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002298:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <MX_TIM1_Init+0x134>)
 80022a4:	f003 f976 	bl	8005594 <HAL_TIMEx_ConfigBreakDeadTime>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 80022ae:	f000 f891 	bl	80023d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	3758      	adds	r7, #88	; 0x58
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000318 	.word	0x20000318
 80022c0:	40012c00 	.word	0x40012c00

080022c4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_USART1_UART_Init+0x4c>)
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <MX_USART1_UART_Init+0x50>)
 80022cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <MX_USART1_UART_Init+0x4c>)
 80022d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_USART1_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_USART1_UART_Init+0x4c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <MX_USART1_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_USART1_UART_Init+0x4c>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <MX_USART1_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_USART1_UART_Init+0x4c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_USART1_UART_Init+0x4c>)
 80022fc:	f003 f99b 	bl	8005636 <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002306:	f000 f865 	bl	80023d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200002b8 	.word	0x200002b8
 8002314:	40013800 	.word	0x40013800

08002318 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <MX_DMA_Init+0x38>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <MX_DMA_Init+0x38>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6153      	str	r3, [r2, #20]
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <MX_DMA_Init+0x38>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	200f      	movs	r0, #15
 800233c:	f000 fbeb 	bl	8002b16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002340:	200f      	movs	r0, #15
 8002342:	f000 fc04 	bl	8002b4e <HAL_NVIC_EnableIRQ>

}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000

08002354 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	4b18      	ldr	r3, [pc, #96]	; (80023cc <MX_GPIO_Init+0x78>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <MX_GPIO_Init+0x78>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	6193      	str	r3, [r2, #24]
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <MX_GPIO_Init+0x78>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <MX_GPIO_Init+0x78>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a11      	ldr	r2, [pc, #68]	; (80023cc <MX_GPIO_Init+0x78>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <MX_GPIO_Init+0x78>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Blue_LED_Pin | Green_LED_Pin | Red_LED_Pin,
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800239e:	480c      	ldr	r0, [pc, #48]	; (80023d0 <MX_GPIO_Init+0x7c>)
 80023a0:	f000 ffd8 	bl	8003354 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pins : Blue_LED_Pin Green_LED_Pin Red_LED_Pin */
	GPIO_InitStruct.Pin = Blue_LED_Pin | Green_LED_Pin | Red_LED_Pin;
 80023a4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80023a8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2302      	movs	r3, #2
 80023b4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f107 0308 	add.w	r3, r7, #8
 80023ba:	4619      	mov	r1, r3
 80023bc:	4804      	ldr	r0, [pc, #16]	; (80023d0 <MX_GPIO_Init+0x7c>)
 80023be:	f000 fe45 	bl	800304c <HAL_GPIO_Init>

}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010c00 	.word	0x40010c00

080023d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_port, Red_LED_pin, 0); //turn Red LED on
 80023d8:	2200      	movs	r2, #0
 80023da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023de:	4808      	ldr	r0, [pc, #32]	; (8002400 <Error_Handler+0x2c>)
 80023e0:	f000 ffb8 	bl	8003354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_port, Green_LED_pin, 1); //turn Green LED off
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <Error_Handler+0x2c>)
 80023ec:	f000 ffb2 	bl	8003354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_port, Blue_LED_pin, 1); // turn Blue LED off
 80023f0:	2201      	movs	r2, #1
 80023f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f6:	4802      	ldr	r0, [pc, #8]	; (8002400 <Error_Handler+0x2c>)
 80023f8:	f000 ffac 	bl	8003354 <HAL_GPIO_WritePin>
	/* USER CODE END Error_Handler_Debug */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40010c00 	.word	0x40010c00

08002404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <HAL_MspInit+0x5c>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	4a14      	ldr	r2, [pc, #80]	; (8002460 <HAL_MspInit+0x5c>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6193      	str	r3, [r2, #24]
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_MspInit+0x5c>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_MspInit+0x5c>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <HAL_MspInit+0x5c>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	61d3      	str	r3, [r2, #28]
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_MspInit+0x5c>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_MspInit+0x60>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_MspInit+0x60>)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40021000 	.word	0x40021000
 8002464:	40010000 	.word	0x40010000

08002468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <HAL_I2C_MspInit+0x70>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d123      	bne.n	80024d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_I2C_MspInit+0x74>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a13      	ldr	r2, [pc, #76]	; (80024dc <HAL_I2C_MspInit+0x74>)
 800248e:	f043 0308 	orr.w	r3, r3, #8
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_I2C_MspInit+0x74>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a0:	23c0      	movs	r3, #192	; 0xc0
 80024a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a4:	2312      	movs	r3, #18
 80024a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	4619      	mov	r1, r3
 80024b2:	480b      	ldr	r0, [pc, #44]	; (80024e0 <HAL_I2C_MspInit+0x78>)
 80024b4:	f000 fdca 	bl	800304c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_I2C_MspInit+0x74>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_I2C_MspInit+0x74>)
 80024be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024c2:	61d3      	str	r3, [r2, #28]
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_I2C_MspInit+0x74>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024d0:	bf00      	nop
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40005400 	.word	0x40005400
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010c00 	.word	0x40010c00

080024e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_TIM_Base_MspInit+0x34>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10b      	bne.n	800250e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_TIM_Base_MspInit+0x38>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_TIM_Base_MspInit+0x38>)
 80024fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002500:	6193      	str	r3, [r2, #24]
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_TIM_Base_MspInit+0x38>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a33      	ldr	r2, [pc, #204]	; (8002608 <HAL_UART_MspInit+0xe8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d15f      	bne.n	8002600 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002540:	4b32      	ldr	r3, [pc, #200]	; (800260c <HAL_UART_MspInit+0xec>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a31      	ldr	r2, [pc, #196]	; (800260c <HAL_UART_MspInit+0xec>)
 8002546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	4b2f      	ldr	r3, [pc, #188]	; (800260c <HAL_UART_MspInit+0xec>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <HAL_UART_MspInit+0xec>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <HAL_UART_MspInit+0xec>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6193      	str	r3, [r2, #24]
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_UART_MspInit+0xec>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 0310 	add.w	r3, r7, #16
 8002582:	4619      	mov	r1, r3
 8002584:	4822      	ldr	r0, [pc, #136]	; (8002610 <HAL_UART_MspInit+0xf0>)
 8002586:	f000 fd61 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800258a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	4619      	mov	r1, r3
 800259e:	481c      	ldr	r0, [pc, #112]	; (8002610 <HAL_UART_MspInit+0xf0>)
 80025a0:	f000 fd54 	bl	800304c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025a6:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <HAL_UART_MspInit+0xf8>)
 80025a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_DISABLE;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025ca:	2220      	movs	r2, #32
 80025cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025d4:	480f      	ldr	r0, [pc, #60]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025d6:	f000 fad5 	bl	8002b84 <HAL_DMA_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80025e0:	f7ff fef8 	bl	80023d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025e8:	635a      	str	r2, [r3, #52]	; 0x34
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <HAL_UART_MspInit+0xf4>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	2025      	movs	r0, #37	; 0x25
 80025f6:	f000 fa8e 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025fa:	2025      	movs	r0, #37	; 0x25
 80025fc:	f000 faa7 	bl	8002b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002600:	bf00      	nop
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40013800 	.word	0x40013800
 800260c:	40021000 	.word	0x40021000
 8002610:	40010800 	.word	0x40010800
 8002614:	20000274 	.word	0x20000274
 8002618:	40020058 	.word	0x40020058

0800261c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <HardFault_Handler+0x4>

0800262e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002632:	e7fe      	b.n	8002632 <MemManage_Handler+0x4>

08002634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <BusFault_Handler+0x4>

0800263a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <UsageFault_Handler+0x4>

08002640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002668:	f000 f93e 	bl	80028e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}

08002670 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <DMA1_Channel5_IRQHandler+0x10>)
 8002676:	f000 fbb5 	bl	8002de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000274 	.word	0x20000274

08002684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <USART1_IRQHandler+0x10>)
 800268a:	f003 f933 	bl	80058f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200002b8 	.word	0x200002b8

08002698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	return 1;
 800269c:	2301      	movs	r3, #1
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <_kill>:

int _kill(int pid, int sig)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026b0:	f003 fd22 	bl	80060f8 <__errno>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2216      	movs	r2, #22
 80026b8:	601a      	str	r2, [r3, #0]
	return -1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_exit>:

void _exit (int status)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026ce:	f04f 31ff 	mov.w	r1, #4294967295
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffe7 	bl	80026a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026d8:	e7fe      	b.n	80026d8 <_exit+0x12>

080026da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e00a      	b.n	8002702 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026ec:	f3af 8000 	nop.w
 80026f0:	4601      	mov	r1, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	60ba      	str	r2, [r7, #8]
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3301      	adds	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	dbf0      	blt.n	80026ec <_read+0x12>
	}

return len;
 800270a:	687b      	ldr	r3, [r7, #4]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e009      	b.n	800273a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	60ba      	str	r2, [r7, #8]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	dbf1      	blt.n	8002726 <_write+0x12>
	}
	return len;
 8002742:	687b      	ldr	r3, [r7, #4]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <_close>:

int _close(int file)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	return -1;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002772:	605a      	str	r2, [r3, #4]
	return 0;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <_isatty>:

int _isatty(int file)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	return 1;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
	return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <_sbrk+0x5c>)
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <_sbrk+0x60>)
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <_sbrk+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <_sbrk+0x64>)
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <_sbrk+0x68>)
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d207      	bcs.n	80027ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027dc:	f003 fc8c 	bl	80060f8 <__errno>
 80027e0:	4603      	mov	r3, r0
 80027e2:	220c      	movs	r2, #12
 80027e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	e009      	b.n	8002800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <_sbrk+0x64>)
 80027fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20002000 	.word	0x20002000
 800280c:	00000400 	.word	0x00000400
 8002810:	200001f8 	.word	0x200001f8
 8002814:	20000388 	.word	0x20000388

08002818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002824:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002826:	e003      	b.n	8002830 <LoopCopyDataInit>

08002828 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800282a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800282c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800282e:	3104      	adds	r1, #4

08002830 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002830:	480a      	ldr	r0, [pc, #40]	; (800285c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002834:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002836:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002838:	d3f6      	bcc.n	8002828 <CopyDataInit>
  ldr r2, =_sbss
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800283c:	e002      	b.n	8002844 <LoopFillZerobss>

0800283e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002840:	f842 3b04 	str.w	r3, [r2], #4

08002844 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002846:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002848:	d3f9      	bcc.n	800283e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800284a:	f7ff ffe5 	bl	8002818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284e:	f003 fc59 	bl	8006104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002852:	f7ff f87b 	bl	800194c <main>
  bx lr
 8002856:	4770      	bx	lr
  ldr r3, =_sidata
 8002858:	080095c4 	.word	0x080095c4
  ldr r0, =_sdata
 800285c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002860:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002864:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002868:	20000384 	.word	0x20000384

0800286c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800286c:	e7fe      	b.n	800286c <ADC1_IRQHandler>

0800286e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002872:	2003      	movs	r0, #3
 8002874:	f000 f944 	bl	8002b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002878:	2000      	movs	r0, #0
 800287a:	f000 f805 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800287e:	f7ff fdc1 	bl	8002404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_InitTick+0x54>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_InitTick+0x58>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289e:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f95f 	bl	8002b6a <HAL_SYSTICK_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00e      	b.n	80028d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d80a      	bhi.n	80028d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028bc:	2200      	movs	r2, #0
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f000 f927 	bl	8002b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <HAL_InitTick+0x5c>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000008 	.word	0x20000008
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_IncTick+0x1c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_IncTick+0x20>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	4a03      	ldr	r2, [pc, #12]	; (8002908 <HAL_IncTick+0x20>)
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000008 	.word	0x20000008
 8002908:	20000370 	.word	0x20000370

0800290c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return uwTick;
 8002910:	4b02      	ldr	r3, [pc, #8]	; (800291c <HAL_GetTick+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	20000370 	.word	0x20000370

08002920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff fff0 	bl	800290c <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d005      	beq.n	8002946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_Delay+0x44>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002946:	bf00      	nop
 8002948:	f7ff ffe0 	bl	800290c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f7      	bhi.n	8002948 <HAL_Delay+0x28>
  {
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000008 	.word	0x20000008

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299a:	4a04      	ldr	r2, [pc, #16]	; (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	60d3      	str	r3, [r2, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4906      	ldr	r1, [pc, #24]	; (8002a00 <__NVIC_EnableIRQ+0x34>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db0a      	blt.n	8002a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	490c      	ldr	r1, [pc, #48]	; (8002a50 <__NVIC_SetPriority+0x4c>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	440b      	add	r3, r1
 8002a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a2c:	e00a      	b.n	8002a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4908      	ldr	r1, [pc, #32]	; (8002a54 <__NVIC_SetPriority+0x50>)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	440b      	add	r3, r1
 8002a42:	761a      	strb	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	bf28      	it	cs
 8002a76:	2304      	movcs	r3, #4
 8002a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d902      	bls.n	8002a88 <NVIC_EncodePriority+0x30>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3b03      	subs	r3, #3
 8002a86:	e000      	b.n	8002a8a <NVIC_EncodePriority+0x32>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	4313      	orrs	r3, r2
         );
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002acc:	d301      	bcc.n	8002ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00f      	b.n	8002af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <SysTick_Config+0x40>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ada:	210f      	movs	r1, #15
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae0:	f7ff ff90 	bl	8002a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <SysTick_Config+0x40>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aea:	4b04      	ldr	r3, [pc, #16]	; (8002afc <SysTick_Config+0x40>)
 8002aec:	2207      	movs	r2, #7
 8002aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000e010 	.word	0xe000e010

08002b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff2d 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b28:	f7ff ff42 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f7ff ff90 	bl	8002a58 <NVIC_EncodePriority>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff5f 	bl	8002a04 <__NVIC_SetPriority>
}
 8002b46:	bf00      	nop
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff35 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffa2 	bl	8002abc <SysTick_Config>
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e043      	b.n	8002c22 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <HAL_DMA_Init+0xa8>)
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a22      	ldr	r2, [pc, #136]	; (8002c30 <HAL_DMA_Init+0xac>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	009a      	lsls	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <HAL_DMA_Init+0xb0>)
 8002bb6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	bffdfff8 	.word	0xbffdfff8
 8002c30:	cccccccd 	.word	0xcccccccd
 8002c34:	40020000 	.word	0x40020000

08002c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_DMA_Start_IT+0x20>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e04a      	b.n	8002cee <HAL_DMA_Start_IT+0xb6>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d13a      	bne.n	8002ce0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f9ae 	bl	8002ff0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 020e 	orr.w	r2, r2, #14
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e00f      	b.n	8002cce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0204 	bic.w	r2, r2, #4
 8002cbc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 020a 	orr.w	r2, r2, #10
 8002ccc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e005      	b.n	8002cec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d005      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2204      	movs	r2, #4
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e051      	b.n	8002dbe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 020e 	bic.w	r2, r2, #14
 8002d28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a22      	ldr	r2, [pc, #136]	; (8002dc8 <HAL_DMA_Abort_IT+0xd0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d029      	beq.n	8002d98 <HAL_DMA_Abort_IT+0xa0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <HAL_DMA_Abort_IT+0xd4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x9c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <HAL_DMA_Abort_IT+0xd8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01a      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x96>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <HAL_DMA_Abort_IT+0xdc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d012      	beq.n	8002d88 <HAL_DMA_Abort_IT+0x90>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <HAL_DMA_Abort_IT+0xe0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00a      	beq.n	8002d82 <HAL_DMA_Abort_IT+0x8a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1a      	ldr	r2, [pc, #104]	; (8002ddc <HAL_DMA_Abort_IT+0xe4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d102      	bne.n	8002d7c <HAL_DMA_Abort_IT+0x84>
 8002d76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d7a:	e00e      	b.n	8002d9a <HAL_DMA_Abort_IT+0xa2>
 8002d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d80:	e00b      	b.n	8002d9a <HAL_DMA_Abort_IT+0xa2>
 8002d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d86:	e008      	b.n	8002d9a <HAL_DMA_Abort_IT+0xa2>
 8002d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d8c:	e005      	b.n	8002d9a <HAL_DMA_Abort_IT+0xa2>
 8002d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d92:	e002      	b.n	8002d9a <HAL_DMA_Abort_IT+0xa2>
 8002d94:	2310      	movs	r3, #16
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_Abort_IT+0xa2>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <HAL_DMA_Abort_IT+0xe8>)
 8002d9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
    } 
  }
  return status;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40020008 	.word	0x40020008
 8002dcc:	4002001c 	.word	0x4002001c
 8002dd0:	40020030 	.word	0x40020030
 8002dd4:	40020044 	.word	0x40020044
 8002dd8:	40020058 	.word	0x40020058
 8002ddc:	4002006c 	.word	0x4002006c
 8002de0:	40020000 	.word	0x40020000

08002de4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	2204      	movs	r2, #4
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d04f      	beq.n	8002eac <HAL_DMA_IRQHandler+0xc8>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d04a      	beq.n	8002eac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a66      	ldr	r2, [pc, #408]	; (8002fd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d029      	beq.n	8002e92 <HAL_DMA_IRQHandler+0xae>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a65      	ldr	r2, [pc, #404]	; (8002fd8 <HAL_DMA_IRQHandler+0x1f4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d022      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xaa>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a63      	ldr	r2, [pc, #396]	; (8002fdc <HAL_DMA_IRQHandler+0x1f8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01a      	beq.n	8002e88 <HAL_DMA_IRQHandler+0xa4>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a62      	ldr	r2, [pc, #392]	; (8002fe0 <HAL_DMA_IRQHandler+0x1fc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d012      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x9e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a60      	ldr	r2, [pc, #384]	; (8002fe4 <HAL_DMA_IRQHandler+0x200>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00a      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x98>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a5f      	ldr	r2, [pc, #380]	; (8002fe8 <HAL_DMA_IRQHandler+0x204>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d102      	bne.n	8002e76 <HAL_DMA_IRQHandler+0x92>
 8002e70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e74:	e00e      	b.n	8002e94 <HAL_DMA_IRQHandler+0xb0>
 8002e76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e7a:	e00b      	b.n	8002e94 <HAL_DMA_IRQHandler+0xb0>
 8002e7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e80:	e008      	b.n	8002e94 <HAL_DMA_IRQHandler+0xb0>
 8002e82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e86:	e005      	b.n	8002e94 <HAL_DMA_IRQHandler+0xb0>
 8002e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8c:	e002      	b.n	8002e94 <HAL_DMA_IRQHandler+0xb0>
 8002e8e:	2340      	movs	r3, #64	; 0x40
 8002e90:	e000      	b.n	8002e94 <HAL_DMA_IRQHandler+0xb0>
 8002e92:	2304      	movs	r3, #4
 8002e94:	4a55      	ldr	r2, [pc, #340]	; (8002fec <HAL_DMA_IRQHandler+0x208>)
 8002e96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8094 	beq.w	8002fca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002eaa:	e08e      	b.n	8002fca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d056      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x186>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d051      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 020a 	bic.w	r2, r2, #10
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a38      	ldr	r2, [pc, #224]	; (8002fd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d029      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x166>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a37      	ldr	r2, [pc, #220]	; (8002fd8 <HAL_DMA_IRQHandler+0x1f4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d022      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x162>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a35      	ldr	r2, [pc, #212]	; (8002fdc <HAL_DMA_IRQHandler+0x1f8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01a      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x15c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a34      	ldr	r2, [pc, #208]	; (8002fe0 <HAL_DMA_IRQHandler+0x1fc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d012      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x156>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a32      	ldr	r2, [pc, #200]	; (8002fe4 <HAL_DMA_IRQHandler+0x200>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00a      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x150>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a31      	ldr	r2, [pc, #196]	; (8002fe8 <HAL_DMA_IRQHandler+0x204>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d102      	bne.n	8002f2e <HAL_DMA_IRQHandler+0x14a>
 8002f28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f2c:	e00e      	b.n	8002f4c <HAL_DMA_IRQHandler+0x168>
 8002f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f32:	e00b      	b.n	8002f4c <HAL_DMA_IRQHandler+0x168>
 8002f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f38:	e008      	b.n	8002f4c <HAL_DMA_IRQHandler+0x168>
 8002f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f3e:	e005      	b.n	8002f4c <HAL_DMA_IRQHandler+0x168>
 8002f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f44:	e002      	b.n	8002f4c <HAL_DMA_IRQHandler+0x168>
 8002f46:	2320      	movs	r3, #32
 8002f48:	e000      	b.n	8002f4c <HAL_DMA_IRQHandler+0x168>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	4a27      	ldr	r2, [pc, #156]	; (8002fec <HAL_DMA_IRQHandler+0x208>)
 8002f4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d034      	beq.n	8002fca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f68:	e02f      	b.n	8002fca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2208      	movs	r2, #8
 8002f70:	409a      	lsls	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d028      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x1e8>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 020e 	bic.w	r2, r2, #14
 8002f92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
    }
  }
  return;
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
}
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40020008 	.word	0x40020008
 8002fd8:	4002001c 	.word	0x4002001c
 8002fdc:	40020030 	.word	0x40020030
 8002fe0:	40020044 	.word	0x40020044
 8002fe4:	40020058 	.word	0x40020058
 8002fe8:	4002006c 	.word	0x4002006c
 8002fec:	40020000 	.word	0x40020000

08002ff0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	2101      	movs	r1, #1
 8003008:	fa01 f202 	lsl.w	r2, r1, r2
 800300c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b10      	cmp	r3, #16
 800301c:	d108      	bne.n	8003030 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800302e:	e007      	b.n	8003040 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
	...

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b08b      	sub	sp, #44	; 0x2c
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305e:	e169      	b.n	8003334 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003060:	2201      	movs	r2, #1
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	429a      	cmp	r2, r3
 800307a:	f040 8158 	bne.w	800332e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a9a      	ldr	r2, [pc, #616]	; (80032ec <HAL_GPIO_Init+0x2a0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d05e      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 8003088:	4a98      	ldr	r2, [pc, #608]	; (80032ec <HAL_GPIO_Init+0x2a0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d875      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 800308e:	4a98      	ldr	r2, [pc, #608]	; (80032f0 <HAL_GPIO_Init+0x2a4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d058      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 8003094:	4a96      	ldr	r2, [pc, #600]	; (80032f0 <HAL_GPIO_Init+0x2a4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d86f      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 800309a:	4a96      	ldr	r2, [pc, #600]	; (80032f4 <HAL_GPIO_Init+0x2a8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d052      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 80030a0:	4a94      	ldr	r2, [pc, #592]	; (80032f4 <HAL_GPIO_Init+0x2a8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d869      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030a6:	4a94      	ldr	r2, [pc, #592]	; (80032f8 <HAL_GPIO_Init+0x2ac>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d04c      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 80030ac:	4a92      	ldr	r2, [pc, #584]	; (80032f8 <HAL_GPIO_Init+0x2ac>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d863      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030b2:	4a92      	ldr	r2, [pc, #584]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d046      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
 80030b8:	4a90      	ldr	r2, [pc, #576]	; (80032fc <HAL_GPIO_Init+0x2b0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d85d      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030be:	2b12      	cmp	r3, #18
 80030c0:	d82a      	bhi.n	8003118 <HAL_GPIO_Init+0xcc>
 80030c2:	2b12      	cmp	r3, #18
 80030c4:	d859      	bhi.n	800317a <HAL_GPIO_Init+0x12e>
 80030c6:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <HAL_GPIO_Init+0x80>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	08003147 	.word	0x08003147
 80030d0:	08003121 	.word	0x08003121
 80030d4:	08003133 	.word	0x08003133
 80030d8:	08003175 	.word	0x08003175
 80030dc:	0800317b 	.word	0x0800317b
 80030e0:	0800317b 	.word	0x0800317b
 80030e4:	0800317b 	.word	0x0800317b
 80030e8:	0800317b 	.word	0x0800317b
 80030ec:	0800317b 	.word	0x0800317b
 80030f0:	0800317b 	.word	0x0800317b
 80030f4:	0800317b 	.word	0x0800317b
 80030f8:	0800317b 	.word	0x0800317b
 80030fc:	0800317b 	.word	0x0800317b
 8003100:	0800317b 	.word	0x0800317b
 8003104:	0800317b 	.word	0x0800317b
 8003108:	0800317b 	.word	0x0800317b
 800310c:	0800317b 	.word	0x0800317b
 8003110:	08003129 	.word	0x08003129
 8003114:	0800313d 	.word	0x0800313d
 8003118:	4a79      	ldr	r2, [pc, #484]	; (8003300 <HAL_GPIO_Init+0x2b4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800311e:	e02c      	b.n	800317a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	623b      	str	r3, [r7, #32]
          break;
 8003126:	e029      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	3304      	adds	r3, #4
 800312e:	623b      	str	r3, [r7, #32]
          break;
 8003130:	e024      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	3308      	adds	r3, #8
 8003138:	623b      	str	r3, [r7, #32]
          break;
 800313a:	e01f      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	330c      	adds	r3, #12
 8003142:	623b      	str	r3, [r7, #32]
          break;
 8003144:	e01a      	b.n	800317c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800314e:	2304      	movs	r3, #4
 8003150:	623b      	str	r3, [r7, #32]
          break;
 8003152:	e013      	b.n	800317c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800315c:	2308      	movs	r3, #8
 800315e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	611a      	str	r2, [r3, #16]
          break;
 8003166:	e009      	b.n	800317c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003168:	2308      	movs	r3, #8
 800316a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	615a      	str	r2, [r3, #20]
          break;
 8003172:	e003      	b.n	800317c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
          break;
 8003178:	e000      	b.n	800317c <HAL_GPIO_Init+0x130>
          break;
 800317a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2bff      	cmp	r3, #255	; 0xff
 8003180:	d801      	bhi.n	8003186 <HAL_GPIO_Init+0x13a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	e001      	b.n	800318a <HAL_GPIO_Init+0x13e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2bff      	cmp	r3, #255	; 0xff
 8003190:	d802      	bhi.n	8003198 <HAL_GPIO_Init+0x14c>
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	e002      	b.n	800319e <HAL_GPIO_Init+0x152>
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	3b08      	subs	r3, #8
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	210f      	movs	r1, #15
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	6a39      	ldr	r1, [r7, #32]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	431a      	orrs	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80b1 	beq.w	800332e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031cc:	4b4d      	ldr	r3, [pc, #308]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a4c      	ldr	r2, [pc, #304]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031e4:	4a48      	ldr	r2, [pc, #288]	; (8003308 <HAL_GPIO_Init+0x2bc>)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	3302      	adds	r3, #2
 80031ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a40      	ldr	r2, [pc, #256]	; (800330c <HAL_GPIO_Init+0x2c0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_GPIO_Init+0x1ec>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a3f      	ldr	r2, [pc, #252]	; (8003310 <HAL_GPIO_Init+0x2c4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00d      	beq.n	8003234 <HAL_GPIO_Init+0x1e8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3e      	ldr	r2, [pc, #248]	; (8003314 <HAL_GPIO_Init+0x2c8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <HAL_GPIO_Init+0x1e4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3d      	ldr	r2, [pc, #244]	; (8003318 <HAL_GPIO_Init+0x2cc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_GPIO_Init+0x1e0>
 8003228:	2303      	movs	r3, #3
 800322a:	e006      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 800322c:	2304      	movs	r3, #4
 800322e:	e004      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 8003230:	2302      	movs	r3, #2
 8003232:	e002      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_GPIO_Init+0x1ee>
 8003238:	2300      	movs	r3, #0
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	f002 0203 	and.w	r2, r2, #3
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4093      	lsls	r3, r2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800324a:	492f      	ldr	r1, [pc, #188]	; (8003308 <HAL_GPIO_Init+0x2bc>)
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	089b      	lsrs	r3, r3, #2
 8003250:	3302      	adds	r3, #2
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d006      	beq.n	8003272 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003264:	4b2d      	ldr	r3, [pc, #180]	; (800331c <HAL_GPIO_Init+0x2d0>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	492c      	ldr	r1, [pc, #176]	; (800331c <HAL_GPIO_Init+0x2d0>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003272:	4b2a      	ldr	r3, [pc, #168]	; (800331c <HAL_GPIO_Init+0x2d0>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	43db      	mvns	r3, r3
 800327a:	4928      	ldr	r1, [pc, #160]	; (800331c <HAL_GPIO_Init+0x2d0>)
 800327c:	4013      	ands	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d006      	beq.n	800329a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800328c:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_GPIO_Init+0x2d0>)
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4922      	ldr	r1, [pc, #136]	; (800331c <HAL_GPIO_Init+0x2d0>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
 8003298:	e006      	b.n	80032a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_GPIO_Init+0x2d0>)
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	491e      	ldr	r1, [pc, #120]	; (800331c <HAL_GPIO_Init+0x2d0>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_GPIO_Init+0x2d0>)
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4918      	ldr	r1, [pc, #96]	; (800331c <HAL_GPIO_Init+0x2d0>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <HAL_GPIO_Init+0x2d0>)
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4914      	ldr	r1, [pc, #80]	; (800331c <HAL_GPIO_Init+0x2d0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d021      	beq.n	8003320 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_GPIO_Init+0x2d0>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	490e      	ldr	r1, [pc, #56]	; (800331c <HAL_GPIO_Init+0x2d0>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60cb      	str	r3, [r1, #12]
 80032e8:	e021      	b.n	800332e <HAL_GPIO_Init+0x2e2>
 80032ea:	bf00      	nop
 80032ec:	10320000 	.word	0x10320000
 80032f0:	10310000 	.word	0x10310000
 80032f4:	10220000 	.word	0x10220000
 80032f8:	10210000 	.word	0x10210000
 80032fc:	10120000 	.word	0x10120000
 8003300:	10110000 	.word	0x10110000
 8003304:	40021000 	.word	0x40021000
 8003308:	40010000 	.word	0x40010000
 800330c:	40010800 	.word	0x40010800
 8003310:	40010c00 	.word	0x40010c00
 8003314:	40011000 	.word	0x40011000
 8003318:	40011400 	.word	0x40011400
 800331c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	43db      	mvns	r3, r3
 8003328:	4909      	ldr	r1, [pc, #36]	; (8003350 <HAL_GPIO_Init+0x304>)
 800332a:	4013      	ands	r3, r2
 800332c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	3301      	adds	r3, #1
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	fa22 f303 	lsr.w	r3, r2, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	f47f ae8e 	bne.w	8003060 <HAL_GPIO_Init+0x14>
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	372c      	adds	r7, #44	; 0x2c
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40010400 	.word	0x40010400

08003354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
 8003360:	4613      	mov	r3, r2
 8003362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003364:	787b      	ldrb	r3, [r7, #1]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003370:	e003      	b.n	800337a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003372:	887b      	ldrh	r3, [r7, #2]
 8003374:	041a      	lsls	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	611a      	str	r2, [r3, #16]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e12b      	b.n	80035ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff f85c 	bl	8002468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2224      	movs	r2, #36	; 0x24
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0201 	bic.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033e8:	f001 fb72 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 80033ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4a81      	ldr	r2, [pc, #516]	; (80035f8 <HAL_I2C_Init+0x274>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d807      	bhi.n	8003408 <HAL_I2C_Init+0x84>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a80      	ldr	r2, [pc, #512]	; (80035fc <HAL_I2C_Init+0x278>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e006      	b.n	8003416 <HAL_I2C_Init+0x92>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a7d      	ldr	r2, [pc, #500]	; (8003600 <HAL_I2C_Init+0x27c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	bf94      	ite	ls
 8003410:	2301      	movls	r3, #1
 8003412:	2300      	movhi	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e0e7      	b.n	80035ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a78      	ldr	r2, [pc, #480]	; (8003604 <HAL_I2C_Init+0x280>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0c9b      	lsrs	r3, r3, #18
 8003428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a6a      	ldr	r2, [pc, #424]	; (80035f8 <HAL_I2C_Init+0x274>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d802      	bhi.n	8003458 <HAL_I2C_Init+0xd4>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3301      	adds	r3, #1
 8003456:	e009      	b.n	800346c <HAL_I2C_Init+0xe8>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	4a69      	ldr	r2, [pc, #420]	; (8003608 <HAL_I2C_Init+0x284>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	3301      	adds	r3, #1
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	430b      	orrs	r3, r1
 8003472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800347e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	495c      	ldr	r1, [pc, #368]	; (80035f8 <HAL_I2C_Init+0x274>)
 8003488:	428b      	cmp	r3, r1
 800348a:	d819      	bhi.n	80034c0 <HAL_I2C_Init+0x13c>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e59      	subs	r1, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fbb1 f3f3 	udiv	r3, r1, r3
 800349a:	1c59      	adds	r1, r3, #1
 800349c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034a0:	400b      	ands	r3, r1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_I2C_Init+0x138>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1e59      	subs	r1, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ba:	e051      	b.n	8003560 <HAL_I2C_Init+0x1dc>
 80034bc:	2304      	movs	r3, #4
 80034be:	e04f      	b.n	8003560 <HAL_I2C_Init+0x1dc>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d111      	bne.n	80034ec <HAL_I2C_Init+0x168>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e58      	subs	r0, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	440b      	add	r3, r1
 80034d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e012      	b.n	8003512 <HAL_I2C_Init+0x18e>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e58      	subs	r0, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	0099      	lsls	r1, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Init+0x196>
 8003516:	2301      	movs	r3, #1
 8003518:	e022      	b.n	8003560 <HAL_I2C_Init+0x1dc>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10e      	bne.n	8003540 <HAL_I2C_Init+0x1bc>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1e58      	subs	r0, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	440b      	add	r3, r1
 8003530:	fbb0 f3f3 	udiv	r3, r0, r3
 8003534:	3301      	adds	r3, #1
 8003536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353e:	e00f      	b.n	8003560 <HAL_I2C_Init+0x1dc>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e58      	subs	r0, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	0099      	lsls	r1, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	fbb0 f3f3 	udiv	r3, r0, r3
 8003556:	3301      	adds	r3, #1
 8003558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	6809      	ldr	r1, [r1, #0]
 8003564:	4313      	orrs	r3, r2
 8003566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800358e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6911      	ldr	r1, [r2, #16]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68d2      	ldr	r2, [r2, #12]
 800359a:	4311      	orrs	r1, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	000186a0 	.word	0x000186a0
 80035fc:	001e847f 	.word	0x001e847f
 8003600:	003d08ff 	.word	0x003d08ff
 8003604:	431bde83 	.word	0x431bde83
 8003608:	10624dd3 	.word	0x10624dd3

0800360c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	4608      	mov	r0, r1
 8003616:	4611      	mov	r1, r2
 8003618:	461a      	mov	r2, r3
 800361a:	4603      	mov	r3, r0
 800361c:	817b      	strh	r3, [r7, #10]
 800361e:	460b      	mov	r3, r1
 8003620:	813b      	strh	r3, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003626:	f7ff f971 	bl	800290c <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b20      	cmp	r3, #32
 8003636:	f040 80d9 	bne.w	80037ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2319      	movs	r3, #25
 8003640:	2201      	movs	r2, #1
 8003642:	496d      	ldr	r1, [pc, #436]	; (80037f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fcc1 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
 8003652:	e0cc      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_I2C_Mem_Write+0x56>
 800365e:	2302      	movs	r3, #2
 8003660:	e0c5      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b01      	cmp	r3, #1
 8003676:	d007      	beq.n	8003688 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2221      	movs	r2, #33	; 0x21
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a4d      	ldr	r2, [pc, #308]	; (80037fc <HAL_I2C_Mem_Write+0x1f0>)
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ca:	88f8      	ldrh	r0, [r7, #6]
 80036cc:	893a      	ldrh	r2, [r7, #8]
 80036ce:	8979      	ldrh	r1, [r7, #10]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4603      	mov	r3, r0
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 faf8 	bl	8003cd0 <I2C_RequestMemoryWrite>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d052      	beq.n	800378c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e081      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fd42 	bl	8004178 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d107      	bne.n	8003712 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06b      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	781a      	ldrb	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d11b      	bne.n	800378c <HAL_I2C_Mem_Write+0x180>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d017      	beq.n	800378c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1aa      	bne.n	80036ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fd2e 	bl	80041fa <I2C_WaitOnBTFFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00d      	beq.n	80037c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d107      	bne.n	80037bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e016      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	00100002 	.word	0x00100002
 80037fc:	ffff0000 	.word	0xffff0000

08003800 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	; 0x30
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	817b      	strh	r3, [r7, #10]
 8003812:	460b      	mov	r3, r1
 8003814:	813b      	strh	r3, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800381e:	f7ff f875 	bl	800290c <HAL_GetTick>
 8003822:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b20      	cmp	r3, #32
 800382e:	f040 8244 	bne.w	8003cba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	2319      	movs	r3, #25
 8003838:	2201      	movs	r2, #1
 800383a:	4982      	ldr	r1, [pc, #520]	; (8003a44 <HAL_I2C_Mem_Read+0x244>)
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fbc5 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003848:	2302      	movs	r3, #2
 800384a:	e237      	b.n	8003cbc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_I2C_Mem_Read+0x5a>
 8003856:	2302      	movs	r3, #2
 8003858:	e230      	b.n	8003cbc <HAL_I2C_Mem_Read+0x4bc>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d007      	beq.n	8003880 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2222      	movs	r2, #34	; 0x22
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2240      	movs	r2, #64	; 0x40
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a62      	ldr	r2, [pc, #392]	; (8003a48 <HAL_I2C_Mem_Read+0x248>)
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038c2:	88f8      	ldrh	r0, [r7, #6]
 80038c4:	893a      	ldrh	r2, [r7, #8]
 80038c6:	8979      	ldrh	r1, [r7, #10]
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	4603      	mov	r3, r0
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fa92 	bl	8003dfc <I2C_RequestMemoryRead>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e1ec      	b.n	8003cbc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d113      	bne.n	8003912 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e1c0      	b.n	8003c94 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	2b01      	cmp	r3, #1
 8003918:	d11e      	bne.n	8003958 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003928:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800392a:	b672      	cpsid	i
}
 800392c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003954:	b662      	cpsie	i
}
 8003956:	e035      	b.n	80039c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	2b02      	cmp	r3, #2
 800395e:	d11e      	bne.n	800399e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800396e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003970:	b672      	cpsid	i
}
 8003972:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800399a:	b662      	cpsie	i
}
 800399c:	e012      	b.n	80039c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039c4:	e166      	b.n	8003c94 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	f200 811f 	bhi.w	8003c0e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d123      	bne.n	8003a20 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fc4d 	bl	800427c <I2C_WaitOnRXNEFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e167      	b.n	8003cbc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a1e:	e139      	b.n	8003c94 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d152      	bne.n	8003ace <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4906      	ldr	r1, [pc, #24]	; (8003a4c <HAL_I2C_Mem_Read+0x24c>)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 faca 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e13c      	b.n	8003cbc <HAL_I2C_Mem_Read+0x4bc>
 8003a42:	bf00      	nop
 8003a44:	00100002 	.word	0x00100002
 8003a48:	ffff0000 	.word	0xffff0000
 8003a4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a50:	b672      	cpsid	i
}
 8003a52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a96:	b662      	cpsie	i
}
 8003a98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003acc:	e0e2      	b.n	8003c94 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	497b      	ldr	r1, [pc, #492]	; (8003cc4 <HAL_I2C_Mem_Read+0x4c4>)
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fa77 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0e9      	b.n	8003cbc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003af8:	b672      	cpsid	i
}
 8003afa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b2e:	4b66      	ldr	r3, [pc, #408]	; (8003cc8 <HAL_I2C_Mem_Read+0x4c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	4a65      	ldr	r2, [pc, #404]	; (8003ccc <HAL_I2C_Mem_Read+0x4cc>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	0a1a      	lsrs	r2, r3, #8
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	00da      	lsls	r2, r3, #3
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d118      	bne.n	8003b86 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b76:	b662      	cpsie	i
}
 8003b78:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e09a      	b.n	8003cbc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d1d9      	bne.n	8003b48 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bd6:	b662      	cpsie	i
}
 8003bd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c0c:	e042      	b.n	8003c94 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fb32 	bl	800427c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e04c      	b.n	8003cbc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d118      	bne.n	8003c94 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f47f ae94 	bne.w	80039c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3728      	adds	r7, #40	; 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	00010004 	.word	0x00010004
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	14f8b589 	.word	0x14f8b589

08003cd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f960 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d20:	d103      	bne.n	8003d2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e05f      	b.n	8003dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d2e:	897b      	ldrh	r3, [r7, #10]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	492d      	ldr	r1, [pc, #180]	; (8003df8 <I2C_RequestMemoryWrite+0x128>)
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f998 	bl	800407a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e04c      	b.n	8003dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6c:	6a39      	ldr	r1, [r7, #32]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fa02 	bl	8004178 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d107      	bne.n	8003d92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e02b      	b.n	8003dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d105      	bne.n	8003da8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d9c:	893b      	ldrh	r3, [r7, #8]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	e021      	b.n	8003dec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003da8:	893b      	ldrh	r3, [r7, #8]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	6a39      	ldr	r1, [r7, #32]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f9dc 	bl	8004178 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d107      	bne.n	8003dde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e005      	b.n	8003dee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003de2:	893b      	ldrh	r3, [r7, #8]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	00010002 	.word	0x00010002

08003dfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	817b      	strh	r3, [r7, #10]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	813b      	strh	r3, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f8c2 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5c:	d103      	bne.n	8003e66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0aa      	b.n	8003fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6a:	897b      	ldrh	r3, [r7, #10]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	4952      	ldr	r1, [pc, #328]	; (8003fc8 <I2C_RequestMemoryRead+0x1cc>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f8fa 	bl	800407a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e097      	b.n	8003fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	6a39      	ldr	r1, [r7, #32]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f964 	bl	8004178 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d107      	bne.n	8003ece <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e076      	b.n	8003fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed8:	893b      	ldrh	r3, [r7, #8]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]
 8003ee2:	e021      	b.n	8003f28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef4:	6a39      	ldr	r1, [r7, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f93e 	bl	8004178 <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e050      	b.n	8003fc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f1e:	893b      	ldrh	r3, [r7, #8]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2a:	6a39      	ldr	r1, [r7, #32]
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f923 	bl	8004178 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d107      	bne.n	8003f50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e035      	b.n	8003fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f82b 	bl	8003fcc <I2C_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00d      	beq.n	8003f98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8a:	d103      	bne.n	8003f94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e013      	b.n	8003fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f98:	897b      	ldrh	r3, [r7, #10]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	4906      	ldr	r1, [pc, #24]	; (8003fc8 <I2C_RequestMemoryRead+0x1cc>)
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f863 	bl	800407a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	00010002 	.word	0x00010002

08003fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fdc:	e025      	b.n	800402a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d021      	beq.n	800402a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	f7fe fc91 	bl	800290c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d116      	bne.n	800402a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e023      	b.n	8004072 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10d      	bne.n	8004050 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf0c      	ite	eq
 8004046:	2301      	moveq	r3, #1
 8004048:	2300      	movne	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	e00c      	b.n	800406a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	43da      	mvns	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4013      	ands	r3, r2
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	bf0c      	ite	eq
 8004062:	2301      	moveq	r3, #1
 8004064:	2300      	movne	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	429a      	cmp	r2, r3
 800406e:	d0b6      	beq.n	8003fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004088:	e051      	b.n	800412e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004098:	d123      	bne.n	80040e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f043 0204 	orr.w	r2, r3, #4
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e046      	b.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d021      	beq.n	800412e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7fe fc0f 	bl	800290c <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d116      	bne.n	800412e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e020      	b.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d10c      	bne.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	e00b      	b.n	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	43da      	mvns	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4013      	ands	r3, r2
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d18d      	bne.n	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004184:	e02d      	b.n	80041e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f8ce 	bl	8004328 <I2C_IsAcknowledgeFailed>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e02d      	b.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d021      	beq.n	80041e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419e:	f7fe fbb5 	bl	800290c <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d116      	bne.n	80041e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e007      	b.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ec:	2b80      	cmp	r3, #128	; 0x80
 80041ee:	d1ca      	bne.n	8004186 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004206:	e02d      	b.n	8004264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f88d 	bl	8004328 <I2C_IsAcknowledgeFailed>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e02d      	b.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d021      	beq.n	8004264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004220:	f7fe fb74 	bl	800290c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	d302      	bcc.n	8004236 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d116      	bne.n	8004264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e007      	b.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b04      	cmp	r3, #4
 8004270:	d1ca      	bne.n	8004208 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004288:	e042      	b.n	8004310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b10      	cmp	r3, #16
 8004296:	d119      	bne.n	80042cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0210 	mvn.w	r2, #16
 80042a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e029      	b.n	8004320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042cc:	f7fe fb1e 	bl	800290c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d302      	bcc.n	80042e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e007      	b.n	8004320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d1b5      	bne.n	800428a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433e:	d11b      	bne.n	8004378 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004348:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f043 0204 	orr.w	r2, r3, #4
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e26c      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8087 	beq.w	80044b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043a4:	4b92      	ldr	r3, [pc, #584]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d00c      	beq.n	80043ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043b0:	4b8f      	ldr	r3, [pc, #572]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d112      	bne.n	80043e2 <HAL_RCC_OscConfig+0x5e>
 80043bc:	4b8c      	ldr	r3, [pc, #560]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c8:	d10b      	bne.n	80043e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ca:	4b89      	ldr	r3, [pc, #548]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d06c      	beq.n	80044b0 <HAL_RCC_OscConfig+0x12c>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d168      	bne.n	80044b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e246      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ea:	d106      	bne.n	80043fa <HAL_RCC_OscConfig+0x76>
 80043ec:	4b80      	ldr	r3, [pc, #512]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7f      	ldr	r2, [pc, #508]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e02e      	b.n	8004458 <HAL_RCC_OscConfig+0xd4>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0x98>
 8004402:	4b7b      	ldr	r3, [pc, #492]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7a      	ldr	r2, [pc, #488]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b78      	ldr	r3, [pc, #480]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a77      	ldr	r2, [pc, #476]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xd4>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0xbc>
 8004426:	4b72      	ldr	r3, [pc, #456]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a71      	ldr	r2, [pc, #452]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a6e      	ldr	r2, [pc, #440]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xd4>
 8004440:	4b6b      	ldr	r3, [pc, #428]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a6a      	ldr	r2, [pc, #424]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b68      	ldr	r3, [pc, #416]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a67      	ldr	r2, [pc, #412]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004456:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fe fa54 	bl	800290c <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fe fa50 	bl	800290c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e1fa      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b5d      	ldr	r3, [pc, #372]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xe4>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fe fa40 	bl	800290c <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fe fa3c 	bl	800290c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1e6      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x10c>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d063      	beq.n	8004586 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044be:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044ca:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x18c>
 80044d6:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	4b43      	ldr	r3, [pc, #268]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x176>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1ba      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4939      	ldr	r1, [pc, #228]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <HAL_RCC_OscConfig+0x270>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fe f9f5 	bl	800290c <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004526:	f7fe f9f1 	bl	800290c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e19b      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4927      	ldr	r1, [pc, #156]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <HAL_RCC_OscConfig+0x270>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fe f9d4 	bl	800290c <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004568:	f7fe f9d0 	bl	800290c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e17a      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d03a      	beq.n	8004608 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d019      	beq.n	80045ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <HAL_RCC_OscConfig+0x274>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a0:	f7fe f9b4 	bl	800290c <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fe f9b0 	bl	800290c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e15a      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045c6:	2001      	movs	r0, #1
 80045c8:	f000 faaa 	bl	8004b20 <RCC_Delay>
 80045cc:	e01c      	b.n	8004608 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_RCC_OscConfig+0x274>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d4:	f7fe f99a 	bl	800290c <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045da:	e00f      	b.n	80045fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045dc:	f7fe f996 	bl	800290c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d908      	bls.n	80045fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e140      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000
 80045f4:	42420000 	.word	0x42420000
 80045f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fc:	4b9e      	ldr	r3, [pc, #632]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e9      	bne.n	80045dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a6 	beq.w	8004762 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461a:	4b97      	ldr	r3, [pc, #604]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10d      	bne.n	8004642 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	4b94      	ldr	r3, [pc, #592]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4a93      	ldr	r2, [pc, #588]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004630:	61d3      	str	r3, [r2, #28]
 8004632:	4b91      	ldr	r3, [pc, #580]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463e:	2301      	movs	r3, #1
 8004640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004642:	4b8e      	ldr	r3, [pc, #568]	; (800487c <HAL_RCC_OscConfig+0x4f8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d118      	bne.n	8004680 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464e:	4b8b      	ldr	r3, [pc, #556]	; (800487c <HAL_RCC_OscConfig+0x4f8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a8a      	ldr	r2, [pc, #552]	; (800487c <HAL_RCC_OscConfig+0x4f8>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465a:	f7fe f957 	bl	800290c <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fe f953 	bl	800290c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b64      	cmp	r3, #100	; 0x64
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e0fd      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	4b81      	ldr	r3, [pc, #516]	; (800487c <HAL_RCC_OscConfig+0x4f8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d106      	bne.n	8004696 <HAL_RCC_OscConfig+0x312>
 8004688:	4b7b      	ldr	r3, [pc, #492]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4a7a      	ldr	r2, [pc, #488]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6213      	str	r3, [r2, #32]
 8004694:	e02d      	b.n	80046f2 <HAL_RCC_OscConfig+0x36e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x334>
 800469e:	4b76      	ldr	r3, [pc, #472]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	4a75      	ldr	r2, [pc, #468]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6213      	str	r3, [r2, #32]
 80046aa:	4b73      	ldr	r3, [pc, #460]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4a72      	ldr	r2, [pc, #456]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	6213      	str	r3, [r2, #32]
 80046b6:	e01c      	b.n	80046f2 <HAL_RCC_OscConfig+0x36e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d10c      	bne.n	80046da <HAL_RCC_OscConfig+0x356>
 80046c0:	4b6d      	ldr	r3, [pc, #436]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4a6c      	ldr	r2, [pc, #432]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	6213      	str	r3, [r2, #32]
 80046cc:	4b6a      	ldr	r3, [pc, #424]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4a69      	ldr	r2, [pc, #420]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6213      	str	r3, [r2, #32]
 80046d8:	e00b      	b.n	80046f2 <HAL_RCC_OscConfig+0x36e>
 80046da:	4b67      	ldr	r3, [pc, #412]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	4a66      	ldr	r2, [pc, #408]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	6213      	str	r3, [r2, #32]
 80046e6:	4b64      	ldr	r3, [pc, #400]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4a63      	ldr	r2, [pc, #396]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80046ec:	f023 0304 	bic.w	r3, r3, #4
 80046f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d015      	beq.n	8004726 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fe f907 	bl	800290c <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fe f903 	bl	800290c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0ab      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	4b57      	ldr	r3, [pc, #348]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ee      	beq.n	8004702 <HAL_RCC_OscConfig+0x37e>
 8004724:	e014      	b.n	8004750 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004726:	f7fe f8f1 	bl	800290c <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472c:	e00a      	b.n	8004744 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fe f8ed 	bl	800290c <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e095      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004744:	4b4c      	ldr	r3, [pc, #304]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ee      	bne.n	800472e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d105      	bne.n	8004762 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004756:	4b48      	ldr	r3, [pc, #288]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	4a47      	ldr	r2, [pc, #284]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 800475c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004760:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8081 	beq.w	800486e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476c:	4b42      	ldr	r3, [pc, #264]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b08      	cmp	r3, #8
 8004776:	d061      	beq.n	800483c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d146      	bne.n	800480e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004780:	4b3f      	ldr	r3, [pc, #252]	; (8004880 <HAL_RCC_OscConfig+0x4fc>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004786:	f7fe f8c1 	bl	800290c <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478e:	f7fe f8bd 	bl	800290c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e067      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a0:	4b35      	ldr	r3, [pc, #212]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d108      	bne.n	80047c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047b6:	4b30      	ldr	r3, [pc, #192]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f023 020f 	bic.w	r2, r3, #15
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	492d      	ldr	r1, [pc, #180]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c8:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a19      	ldr	r1, [r3, #32]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	430b      	orrs	r3, r1
 80047da:	4927      	ldr	r1, [pc, #156]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <HAL_RCC_OscConfig+0x4fc>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e6:	f7fe f891 	bl	800290c <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fe f88d 	bl	800290c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e037      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004800:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x46a>
 800480c:	e02f      	b.n	800486e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480e:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <HAL_RCC_OscConfig+0x4fc>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fe f87a 	bl	800290c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fe f876 	bl	800290c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e020      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x498>
 800483a:	e018      	b.n	800486e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e013      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_OscConfig+0x4f4>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	429a      	cmp	r2, r3
 800485a:	d106      	bne.n	800486a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	40007000 	.word	0x40007000
 8004880:	42420060 	.word	0x42420060

08004884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0a0      	b.n	80049da <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d020      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b0:	4b4c      	ldr	r3, [pc, #304]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a4b      	ldr	r2, [pc, #300]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80048b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c8:	4b46      	ldr	r3, [pc, #280]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a45      	ldr	r2, [pc, #276]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80048ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d4:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4940      	ldr	r1, [pc, #256]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d040      	beq.n	8004974 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d115      	bne.n	8004932 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e067      	b.n	80049da <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e05b      	b.n	80049da <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004922:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e053      	b.n	80049da <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004932:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f023 0203 	bic.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4929      	ldr	r1, [pc, #164]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004944:	f7fd ffe2 	bl	800290c <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	e00a      	b.n	8004962 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fd ffde 	bl	800290c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	; 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e03b      	b.n	80049da <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f003 020c 	and.w	r2, r3, #12
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	429a      	cmp	r2, r3
 8004972:	d1eb      	bne.n	800494c <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4915      	ldr	r1, [pc, #84]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490d      	ldr	r1, [pc, #52]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049b2:	f000 f81f 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <HAL_RCC_ClockConfig+0x160>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	4909      	ldr	r1, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x164>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <HAL_RCC_ClockConfig+0x168>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_RCC_ClockConfig+0x16c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd ff58 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	080091c0 	.word	0x080091c0
 80049ec:	20000000 	.word	0x20000000
 80049f0:	20000004 	.word	0x20000004

080049f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f4:	b490      	push	{r4, r7}
 80049f6:	b08e      	sub	sp, #56	; 0x38
 80049f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049fa:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049fc:	f107 0414 	add.w	r4, r7, #20
 8004a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004a06:	4b29      	ldr	r3, [pc, #164]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a08:	1d3c      	adds	r4, r7, #4
 8004a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a14:	2300      	movs	r3, #0
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a18:	2300      	movs	r3, #0
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a24:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d002      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0x46>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d003      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x4c>
 8004a38:	e02c      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a3a:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a3e:	e02c      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	0c9b      	lsrs	r3, r3, #18
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d012      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004a5e:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8004a70:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	4a0f      	ldr	r2, [pc, #60]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a76:	fb02 f203 	mul.w	r2, r2, r3
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
 8004a82:	e004      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	4a0c      	ldr	r2, [pc, #48]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a88:	fb02 f303 	mul.w	r3, r2, r3
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a92:	e002      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3738      	adds	r7, #56	; 0x38
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc90      	pop	{r4, r7}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	080091a0 	.word	0x080091a0
 8004aac:	080091b0 	.word	0x080091b0
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	007a1200 	.word	0x007a1200
 8004ab8:	003d0900 	.word	0x003d0900

08004abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac0:	4b02      	ldr	r3, [pc, #8]	; (8004acc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	20000000 	.word	0x20000000

08004ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ad4:	f7ff fff2 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4903      	ldr	r1, [pc, #12]	; (8004af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000
 8004af4:	080091d0 	.word	0x080091d0

08004af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004afc:	f7ff ffde 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	0adb      	lsrs	r3, r3, #11
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4903      	ldr	r1, [pc, #12]	; (8004b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	080091d0 	.word	0x080091d0

08004b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <RCC_Delay+0x34>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <RCC_Delay+0x38>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0a5b      	lsrs	r3, r3, #9
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b3c:	bf00      	nop
  }
  while (Delay --);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1e5a      	subs	r2, r3, #1
 8004b42:	60fa      	str	r2, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f9      	bne.n	8004b3c <RCC_Delay+0x1c>
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	20000000 	.word	0x20000000
 8004b58:	10624dd3 	.word	0x10624dd3

08004b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e041      	b.n	8004bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fd fcae 	bl	80024e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f000 f9a2 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e041      	b.n	8004c90 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f839 	bl	8004c98 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 f953 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e046      	b.n	8004d54 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d839      	bhi.n	8004d48 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004cd4:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <HAL_TIM_OC_ConfigChannel+0x30>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d11 	.word	0x08004d11
 8004ce0:	08004d49 	.word	0x08004d49
 8004ce4:	08004d49 	.word	0x08004d49
 8004ce8:	08004d49 	.word	0x08004d49
 8004cec:	08004d1f 	.word	0x08004d1f
 8004cf0:	08004d49 	.word	0x08004d49
 8004cf4:	08004d49 	.word	0x08004d49
 8004cf8:	08004d49 	.word	0x08004d49
 8004cfc:	08004d2d 	.word	0x08004d2d
 8004d00:	08004d49 	.word	0x08004d49
 8004d04:	08004d49 	.word	0x08004d49
 8004d08:	08004d49 	.word	0x08004d49
 8004d0c:	08004d3b 	.word	0x08004d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 f964 	bl	8004fe4 <TIM_OC1_SetConfig>
      break;
 8004d1c:	e015      	b.n	8004d4a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f9e1 	bl	80050ec <TIM_OC2_SetConfig>
      break;
 8004d2a:	e00e      	b.n	8004d4a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa56 	bl	80051e4 <TIM_OC3_SetConfig>
      break;
 8004d38:	e007      	b.n	8004d4a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 facb 	bl	80052dc <TIM_OC4_SetConfig>
      break;
 8004d46:	e000      	b.n	8004d4a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004d48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_TIM_ConfigClockSource+0x18>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e0b3      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x180>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dac:	d03e      	beq.n	8004e2c <HAL_TIM_ConfigClockSource+0xd0>
 8004dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db2:	f200 8087 	bhi.w	8004ec4 <HAL_TIM_ConfigClockSource+0x168>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dba:	f000 8085 	beq.w	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc2:	d87f      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x168>
 8004dc4:	2b70      	cmp	r3, #112	; 0x70
 8004dc6:	d01a      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0xa2>
 8004dc8:	2b70      	cmp	r3, #112	; 0x70
 8004dca:	d87b      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x168>
 8004dcc:	2b60      	cmp	r3, #96	; 0x60
 8004dce:	d050      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x116>
 8004dd0:	2b60      	cmp	r3, #96	; 0x60
 8004dd2:	d877      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x168>
 8004dd4:	2b50      	cmp	r3, #80	; 0x50
 8004dd6:	d03c      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0xf6>
 8004dd8:	2b50      	cmp	r3, #80	; 0x50
 8004dda:	d873      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x168>
 8004ddc:	2b40      	cmp	r3, #64	; 0x40
 8004dde:	d058      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x136>
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d86f      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x168>
 8004de4:	2b30      	cmp	r3, #48	; 0x30
 8004de6:	d064      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x156>
 8004de8:	2b30      	cmp	r3, #48	; 0x30
 8004dea:	d86b      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x168>
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d060      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x156>
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d867      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x168>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d05c      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x156>
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d05a      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004dfc:	e062      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6899      	ldr	r1, [r3, #8]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f000 fb3c 	bl	800548a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	609a      	str	r2, [r3, #8]
      break;
 8004e2a:	e04e      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	6899      	ldr	r1, [r3, #8]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f000 fb25 	bl	800548a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e4e:	609a      	str	r2, [r3, #8]
      break;
 8004e50:	e03b      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 fa9c 	bl	800539c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2150      	movs	r1, #80	; 0x50
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 faf3 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8004e70:	e02b      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 faba 	bl	80053f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2160      	movs	r1, #96	; 0x60
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fae3 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8004e90:	e01b      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 fa7c 	bl	800539c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2140      	movs	r1, #64	; 0x40
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fad3 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e00b      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f000 faca 	bl	8005456 <TIM_ITRx_SetConfig>
        break;
 8004ec2:	e002      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ec4:	bf00      	nop
 8004ec6:	e000      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ec8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a35      	ldr	r2, [pc, #212]	; (8004fcc <TIM_Base_SetConfig+0xe8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00b      	beq.n	8004f14 <TIM_Base_SetConfig+0x30>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d007      	beq.n	8004f14 <TIM_Base_SetConfig+0x30>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a32      	ldr	r2, [pc, #200]	; (8004fd0 <TIM_Base_SetConfig+0xec>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_Base_SetConfig+0x30>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a31      	ldr	r2, [pc, #196]	; (8004fd4 <TIM_Base_SetConfig+0xf0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d108      	bne.n	8004f26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a28      	ldr	r2, [pc, #160]	; (8004fcc <TIM_Base_SetConfig+0xe8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d017      	beq.n	8004f5e <TIM_Base_SetConfig+0x7a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f34:	d013      	beq.n	8004f5e <TIM_Base_SetConfig+0x7a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a25      	ldr	r2, [pc, #148]	; (8004fd0 <TIM_Base_SetConfig+0xec>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00f      	beq.n	8004f5e <TIM_Base_SetConfig+0x7a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a24      	ldr	r2, [pc, #144]	; (8004fd4 <TIM_Base_SetConfig+0xf0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_Base_SetConfig+0x7a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a23      	ldr	r2, [pc, #140]	; (8004fd8 <TIM_Base_SetConfig+0xf4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_Base_SetConfig+0x7a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a22      	ldr	r2, [pc, #136]	; (8004fdc <TIM_Base_SetConfig+0xf8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_Base_SetConfig+0x7a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <TIM_Base_SetConfig+0xfc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a0d      	ldr	r2, [pc, #52]	; (8004fcc <TIM_Base_SetConfig+0xe8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0xd0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a0e      	ldr	r2, [pc, #56]	; (8004fd8 <TIM_Base_SetConfig+0xf4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0xd0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a0d      	ldr	r2, [pc, #52]	; (8004fdc <TIM_Base_SetConfig+0xf8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0xd0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <TIM_Base_SetConfig+0xfc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d103      	bne.n	8004fbc <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	615a      	str	r2, [r3, #20]
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800

08004fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0303 	bic.w	r3, r3, #3
 800501a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f023 0302 	bic.w	r3, r3, #2
 800502c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a28      	ldr	r2, [pc, #160]	; (80050dc <TIM_OC1_SetConfig+0xf8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_OC1_SetConfig+0x74>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a27      	ldr	r2, [pc, #156]	; (80050e0 <TIM_OC1_SetConfig+0xfc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_OC1_SetConfig+0x74>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a26      	ldr	r2, [pc, #152]	; (80050e4 <TIM_OC1_SetConfig+0x100>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC1_SetConfig+0x74>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <TIM_OC1_SetConfig+0x104>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d10c      	bne.n	8005072 <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0308 	bic.w	r3, r3, #8
 800505e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a19      	ldr	r2, [pc, #100]	; (80050dc <TIM_OC1_SetConfig+0xf8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00b      	beq.n	8005092 <TIM_OC1_SetConfig+0xae>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <TIM_OC1_SetConfig+0xfc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d007      	beq.n	8005092 <TIM_OC1_SetConfig+0xae>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a17      	ldr	r2, [pc, #92]	; (80050e4 <TIM_OC1_SetConfig+0x100>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d003      	beq.n	8005092 <TIM_OC1_SetConfig+0xae>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <TIM_OC1_SetConfig+0x104>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d111      	bne.n	80050b6 <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	621a      	str	r2, [r3, #32]
}
 80050d0:	bf00      	nop
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800

080050ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0210 	bic.w	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 0320 	bic.w	r3, r3, #32
 8005136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a23      	ldr	r2, [pc, #140]	; (80051d4 <TIM_OC2_SetConfig+0xe8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d10d      	bne.n	8005168 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <TIM_OC2_SetConfig+0xe8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <TIM_OC2_SetConfig+0x9c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <TIM_OC2_SetConfig+0xec>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_OC2_SetConfig+0x9c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a18      	ldr	r2, [pc, #96]	; (80051dc <TIM_OC2_SetConfig+0xf0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_OC2_SetConfig+0x9c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <TIM_OC2_SetConfig+0xf4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d113      	bne.n	80051b0 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800518e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40014400 	.word	0x40014400
 80051e0:	40014800 	.word	0x40014800

080051e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800522c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a23      	ldr	r2, [pc, #140]	; (80052cc <TIM_OC3_SetConfig+0xe8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10d      	bne.n	800525e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <TIM_OC3_SetConfig+0xe8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00b      	beq.n	800527e <TIM_OC3_SetConfig+0x9a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <TIM_OC3_SetConfig+0xec>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d007      	beq.n	800527e <TIM_OC3_SetConfig+0x9a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <TIM_OC3_SetConfig+0xf0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d003      	beq.n	800527e <TIM_OC3_SetConfig+0x9a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <TIM_OC3_SetConfig+0xf4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d113      	bne.n	80052a6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800528c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40014400 	.word	0x40014400
 80052d8:	40014800 	.word	0x40014800

080052dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	031b      	lsls	r3, r3, #12
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a15      	ldr	r2, [pc, #84]	; (800538c <TIM_OC4_SetConfig+0xb0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_OC4_SetConfig+0x78>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a14      	ldr	r2, [pc, #80]	; (8005390 <TIM_OC4_SetConfig+0xb4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_OC4_SetConfig+0x78>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a13      	ldr	r2, [pc, #76]	; (8005394 <TIM_OC4_SetConfig+0xb8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_OC4_SetConfig+0x78>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a12      	ldr	r2, [pc, #72]	; (8005398 <TIM_OC4_SetConfig+0xbc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d109      	bne.n	8005368 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	019b      	lsls	r3, r3, #6
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr
 800538c:	40012c00 	.word	0x40012c00
 8005390:	40014000 	.word	0x40014000
 8005394:	40014400 	.word	0x40014400
 8005398:	40014800 	.word	0x40014800

0800539c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0201 	bic.w	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 030a 	bic.w	r3, r3, #10
 80053d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f023 0210 	bic.w	r2, r3, #16
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005422:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	031b      	lsls	r3, r3, #12
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005434:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	f043 0307 	orr.w	r3, r3, #7
 8005478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	609a      	str	r2, [r3, #8]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800548a:	b480      	push	{r7}
 800548c:	b087      	sub	sp, #28
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
 8005496:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	021a      	lsls	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	609a      	str	r2, [r3, #8]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054dc:	2302      	movs	r3, #2
 80054de:	e04b      	b.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a19      	ldr	r2, [pc, #100]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d00e      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a13      	ldr	r2, [pc, #76]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a12      	ldr	r2, [pc, #72]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d10c      	bne.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005552:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4313      	orrs	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40014000 	.word	0x40014000

08005594 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e03d      	b.n	800562c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e03f      	b.n	80056c8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fc ff5f 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2224      	movs	r2, #36	; 0x24
 8005666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005678:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fc58 	bl	8005f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800568e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800569e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	4613      	mov	r3, r2
 80056de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d17c      	bne.n	80057ea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_UART_Transmit+0x2c>
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e075      	b.n	80057ec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_UART_Transmit+0x3e>
 800570a:	2302      	movs	r3, #2
 800570c:	e06e      	b.n	80057ec <HAL_UART_Transmit+0x11c>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2221      	movs	r2, #33	; 0x21
 8005720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005724:	f7fd f8f2 	bl	800290c <HAL_GetTick>
 8005728:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573e:	d108      	bne.n	8005752 <HAL_UART_Transmit+0x82>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	e003      	b.n	800575a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005762:	e02a      	b.n	80057ba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2200      	movs	r2, #0
 800576c:	2180      	movs	r1, #128	; 0x80
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fa67 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e036      	b.n	80057ec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10b      	bne.n	800579c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005792:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	3302      	adds	r3, #2
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	e007      	b.n	80057ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	781a      	ldrb	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3301      	adds	r3, #1
 80057aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1cf      	bne.n	8005764 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2200      	movs	r2, #0
 80057cc:	2140      	movs	r1, #64	; 0x40
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fa37 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e006      	b.n	80057ec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	4613      	mov	r3, r2
 8005800:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b20      	cmp	r3, #32
 800580c:	d166      	bne.n	80058dc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_UART_Receive_DMA+0x26>
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e05f      	b.n	80058de <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_UART_Receive_DMA+0x38>
 8005828:	2302      	movs	r3, #2
 800582a:	e058      	b.n	80058de <HAL_UART_Receive_DMA+0xea>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	88fa      	ldrh	r2, [r7, #6]
 800583e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2222      	movs	r2, #34	; 0x22
 800584a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005852:	4a25      	ldr	r2, [pc, #148]	; (80058e8 <HAL_UART_Receive_DMA+0xf4>)
 8005854:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585a:	4a24      	ldr	r2, [pc, #144]	; (80058ec <HAL_UART_Receive_DMA+0xf8>)
 800585c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005862:	4a23      	ldr	r2, [pc, #140]	; (80058f0 <HAL_UART_Receive_DMA+0xfc>)
 8005864:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586a:	2200      	movs	r2, #0
 800586c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3304      	adds	r3, #4
 800587e:	4619      	mov	r1, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	f7fd f9d7 	bl	8002c38 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	e000      	b.n	80058de <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80058dc:	2302      	movs	r3, #2
  }
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	08005b2b 	.word	0x08005b2b
 80058ec:	08005b93 	.word	0x08005b93
 80058f0:	08005baf 	.word	0x08005baf

080058f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10d      	bne.n	8005946 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_UART_IRQHandler+0x52>
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa76 	bl	8005e30 <UART_Receive_IT>
      return;
 8005944:	e0d0      	b.n	8005ae8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80b0 	beq.w	8005aae <HAL_UART_IRQHandler+0x1ba>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d105      	bne.n	8005964 <HAL_UART_IRQHandler+0x70>
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80a5 	beq.w	8005aae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_UART_IRQHandler+0x90>
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597c:	f043 0201 	orr.w	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_UART_IRQHandler+0xb0>
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599c:	f043 0202 	orr.w	r2, r3, #2
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <HAL_UART_IRQHandler+0xd0>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059bc:	f043 0204 	orr.w	r2, r3, #4
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00f      	beq.n	80059ee <HAL_UART_IRQHandler+0xfa>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <HAL_UART_IRQHandler+0xee>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	f043 0208 	orr.w	r2, r3, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d077      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_UART_IRQHandler+0x11c>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa10 	bl	8005e30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bf14      	ite	ne
 8005a1e:	2301      	movne	r3, #1
 8005a20:	2300      	moveq	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d102      	bne.n	8005a38 <HAL_UART_IRQHandler+0x144>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d031      	beq.n	8005a9c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f961 	bl	8005d00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d023      	beq.n	8005a94 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d013      	beq.n	8005a8c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a68:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <HAL_UART_IRQHandler+0x1fc>)
 8005a6a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fd f941 	bl	8002cf8 <HAL_DMA_Abort_IT>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d016      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a86:	4610      	mov	r0, r2
 8005a88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8a:	e00e      	b.n	8005aaa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f843 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a92:	e00a      	b.n	8005aaa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f83f 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9a:	e006      	b.n	8005aaa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f83b 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005aa8:	e01d      	b.n	8005ae6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aaa:	bf00      	nop
    return;
 8005aac:	e01b      	b.n	8005ae6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_UART_IRQHandler+0x1d6>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f94d 	bl	8005d62 <UART_Transmit_IT>
    return;
 8005ac8:	e00e      	b.n	8005ae8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x1f4>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f98e 	bl	8005e00 <UART_EndTransmit_IT>
    return;
 8005ae4:	e000      	b.n	8005ae8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005ae6:	bf00      	nop
  }
}
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	08005d3b 	.word	0x08005d3b

08005af4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr

08005b06 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr

08005b2a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d11e      	bne.n	8005b84 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b5a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695a      	ldr	r2, [r3, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0201 	bic.w	r2, r2, #1
 8005b6a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b7a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7fb fdc1 	bl	800170c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff ffb0 	bl	8005b06 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf14      	ite	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	2300      	moveq	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b21      	cmp	r3, #33	; 0x21
 8005be0:	d108      	bne.n	8005bf4 <UART_DMAError+0x46>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f000 f871 	bl	8005cd6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bf14      	ite	ne
 8005c02:	2301      	movne	r3, #1
 8005c04:	2300      	moveq	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b22      	cmp	r3, #34	; 0x22
 8005c14:	d108      	bne.n	8005c28 <UART_DMAError+0x7a>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005c22:	68b8      	ldr	r0, [r7, #8]
 8005c24:	f000 f86c 	bl	8005d00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2c:	f043 0210 	orr.w	r2, r3, #16
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c34:	68b8      	ldr	r0, [r7, #8]
 8005c36:	f7ff ff6f 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c52:	e02c      	b.n	8005cae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d028      	beq.n	8005cae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d007      	beq.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c62:	f7fc fe53 	bl	800290c <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d21d      	bcs.n	8005cae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c80:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0201 	bic.w	r2, r2, #1
 8005c90:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e00f      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	bf0c      	ite	eq
 8005cbe:	2301      	moveq	r3, #1
 8005cc0:	2300      	movne	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d0c3      	beq.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005cec:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d16:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0201 	bic.w	r2, r2, #1
 8005d26:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff fedf 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b21      	cmp	r3, #33	; 0x21
 8005d74:	d13e      	bne.n	8005df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7e:	d114      	bne.n	8005daa <UART_Transmit_IT+0x48>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d110      	bne.n	8005daa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	1c9a      	adds	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]
 8005da8:	e008      	b.n	8005dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	1c59      	adds	r1, r3, #1
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6211      	str	r1, [r2, #32]
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10f      	bne.n	8005df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr

08005e00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fe67 	bl	8005af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b22      	cmp	r3, #34	; 0x22
 8005e42:	d170      	bne.n	8005f26 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4c:	d117      	bne.n	8005e7e <UART_Receive_IT+0x4e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d113      	bne.n	8005e7e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	1c9a      	adds	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e7c:	e026      	b.n	8005ecc <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e82:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e90:	d007      	beq.n	8005ea2 <UART_Receive_IT+0x72>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <UART_Receive_IT+0x80>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e008      	b.n	8005ec2 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d120      	bne.n	8005f22 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0220 	bic.w	r2, r2, #32
 8005eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fb fbf7 	bl	800170c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e002      	b.n	8005f28 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e000      	b.n	8005f28 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005f26:	2302      	movs	r3, #2
  }
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f70:	f023 030c 	bic.w	r3, r3, #12
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a55      	ldr	r2, [pc, #340]	; (80060f0 <UART_SetConfig+0x1c0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d103      	bne.n	8005fa6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f9e:	f7fe fdab 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	e002      	b.n	8005fac <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fa6:	f7fe fd93 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 8005faa:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	d14c      	bne.n	8006050 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009a      	lsls	r2, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fcc:	4a49      	ldr	r2, [pc, #292]	; (80060f4 <UART_SetConfig+0x1c4>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	0119      	lsls	r1, r3, #4
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009a      	lsls	r2, r3, #2
 8005fe0:	441a      	add	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fec:	4b41      	ldr	r3, [pc, #260]	; (80060f4 <UART_SetConfig+0x1c4>)
 8005fee:	fba3 0302 	umull	r0, r3, r3, r2
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	2064      	movs	r0, #100	; 0x64
 8005ff6:	fb00 f303 	mul.w	r3, r0, r3
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	3332      	adds	r3, #50	; 0x32
 8006000:	4a3c      	ldr	r2, [pc, #240]	; (80060f4 <UART_SetConfig+0x1c4>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800600e:	4419      	add	r1, r3
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009a      	lsls	r2, r3, #2
 800601a:	441a      	add	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	fbb2 f2f3 	udiv	r2, r2, r3
 8006026:	4b33      	ldr	r3, [pc, #204]	; (80060f4 <UART_SetConfig+0x1c4>)
 8006028:	fba3 0302 	umull	r0, r3, r3, r2
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	2064      	movs	r0, #100	; 0x64
 8006030:	fb00 f303 	mul.w	r3, r0, r3
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	3332      	adds	r3, #50	; 0x32
 800603a:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <UART_SetConfig+0x1c4>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	f003 0207 	and.w	r2, r3, #7
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	440a      	add	r2, r1
 800604c:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 800604e:	e04a      	b.n	80060e6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009a      	lsls	r2, r3, #2
 800605a:	441a      	add	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	fbb2 f3f3 	udiv	r3, r2, r3
 8006066:	4a23      	ldr	r2, [pc, #140]	; (80060f4 <UART_SetConfig+0x1c4>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	0119      	lsls	r1, r3, #4
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	009a      	lsls	r2, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	fbb2 f2f3 	udiv	r2, r2, r3
 8006086:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <UART_SetConfig+0x1c4>)
 8006088:	fba3 0302 	umull	r0, r3, r3, r2
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	2064      	movs	r0, #100	; 0x64
 8006090:	fb00 f303 	mul.w	r3, r0, r3
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	3332      	adds	r3, #50	; 0x32
 800609a:	4a16      	ldr	r2, [pc, #88]	; (80060f4 <UART_SetConfig+0x1c4>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060a6:	4419      	add	r1, r3
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009a      	lsls	r2, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80060be:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <UART_SetConfig+0x1c4>)
 80060c0:	fba3 0302 	umull	r0, r3, r3, r2
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	2064      	movs	r0, #100	; 0x64
 80060c8:	fb00 f303 	mul.w	r3, r0, r3
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	3332      	adds	r3, #50	; 0x32
 80060d2:	4a08      	ldr	r2, [pc, #32]	; (80060f4 <UART_SetConfig+0x1c4>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	f003 020f 	and.w	r2, r3, #15
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	440a      	add	r2, r1
 80060e4:	609a      	str	r2, [r3, #8]
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40013800 	.word	0x40013800
 80060f4:	51eb851f 	.word	0x51eb851f

080060f8 <__errno>:
 80060f8:	4b01      	ldr	r3, [pc, #4]	; (8006100 <__errno+0x8>)
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	2000000c 	.word	0x2000000c

08006104 <__libc_init_array>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	2600      	movs	r6, #0
 8006108:	4d0c      	ldr	r5, [pc, #48]	; (800613c <__libc_init_array+0x38>)
 800610a:	4c0d      	ldr	r4, [pc, #52]	; (8006140 <__libc_init_array+0x3c>)
 800610c:	1b64      	subs	r4, r4, r5
 800610e:	10a4      	asrs	r4, r4, #2
 8006110:	42a6      	cmp	r6, r4
 8006112:	d109      	bne.n	8006128 <__libc_init_array+0x24>
 8006114:	f002 febc 	bl	8008e90 <_init>
 8006118:	2600      	movs	r6, #0
 800611a:	4d0a      	ldr	r5, [pc, #40]	; (8006144 <__libc_init_array+0x40>)
 800611c:	4c0a      	ldr	r4, [pc, #40]	; (8006148 <__libc_init_array+0x44>)
 800611e:	1b64      	subs	r4, r4, r5
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	42a6      	cmp	r6, r4
 8006124:	d105      	bne.n	8006132 <__libc_init_array+0x2e>
 8006126:	bd70      	pop	{r4, r5, r6, pc}
 8006128:	f855 3b04 	ldr.w	r3, [r5], #4
 800612c:	4798      	blx	r3
 800612e:	3601      	adds	r6, #1
 8006130:	e7ee      	b.n	8006110 <__libc_init_array+0xc>
 8006132:	f855 3b04 	ldr.w	r3, [r5], #4
 8006136:	4798      	blx	r3
 8006138:	3601      	adds	r6, #1
 800613a:	e7f2      	b.n	8006122 <__libc_init_array+0x1e>
 800613c:	080095bc 	.word	0x080095bc
 8006140:	080095bc 	.word	0x080095bc
 8006144:	080095bc 	.word	0x080095bc
 8006148:	080095c0 	.word	0x080095c0

0800614c <memmove>:
 800614c:	4288      	cmp	r0, r1
 800614e:	b510      	push	{r4, lr}
 8006150:	eb01 0402 	add.w	r4, r1, r2
 8006154:	d902      	bls.n	800615c <memmove+0x10>
 8006156:	4284      	cmp	r4, r0
 8006158:	4623      	mov	r3, r4
 800615a:	d807      	bhi.n	800616c <memmove+0x20>
 800615c:	1e43      	subs	r3, r0, #1
 800615e:	42a1      	cmp	r1, r4
 8006160:	d008      	beq.n	8006174 <memmove+0x28>
 8006162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800616a:	e7f8      	b.n	800615e <memmove+0x12>
 800616c:	4601      	mov	r1, r0
 800616e:	4402      	add	r2, r0
 8006170:	428a      	cmp	r2, r1
 8006172:	d100      	bne.n	8006176 <memmove+0x2a>
 8006174:	bd10      	pop	{r4, pc}
 8006176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800617a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800617e:	e7f7      	b.n	8006170 <memmove+0x24>

08006180 <memset>:
 8006180:	4603      	mov	r3, r0
 8006182:	4402      	add	r2, r0
 8006184:	4293      	cmp	r3, r2
 8006186:	d100      	bne.n	800618a <memset+0xa>
 8006188:	4770      	bx	lr
 800618a:	f803 1b01 	strb.w	r1, [r3], #1
 800618e:	e7f9      	b.n	8006184 <memset+0x4>

08006190 <__cvt>:
 8006190:	2b00      	cmp	r3, #0
 8006192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006196:	461f      	mov	r7, r3
 8006198:	bfbb      	ittet	lt
 800619a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800619e:	461f      	movlt	r7, r3
 80061a0:	2300      	movge	r3, #0
 80061a2:	232d      	movlt	r3, #45	; 0x2d
 80061a4:	b088      	sub	sp, #32
 80061a6:	4614      	mov	r4, r2
 80061a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80061ac:	7013      	strb	r3, [r2, #0]
 80061ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80061b4:	f023 0820 	bic.w	r8, r3, #32
 80061b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061bc:	d005      	beq.n	80061ca <__cvt+0x3a>
 80061be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061c2:	d100      	bne.n	80061c6 <__cvt+0x36>
 80061c4:	3501      	adds	r5, #1
 80061c6:	2302      	movs	r3, #2
 80061c8:	e000      	b.n	80061cc <__cvt+0x3c>
 80061ca:	2303      	movs	r3, #3
 80061cc:	aa07      	add	r2, sp, #28
 80061ce:	9204      	str	r2, [sp, #16]
 80061d0:	aa06      	add	r2, sp, #24
 80061d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80061d6:	e9cd 3500 	strd	r3, r5, [sp]
 80061da:	4622      	mov	r2, r4
 80061dc:	463b      	mov	r3, r7
 80061de:	f000 fce7 	bl	8006bb0 <_dtoa_r>
 80061e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061e6:	4606      	mov	r6, r0
 80061e8:	d102      	bne.n	80061f0 <__cvt+0x60>
 80061ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061ec:	07db      	lsls	r3, r3, #31
 80061ee:	d522      	bpl.n	8006236 <__cvt+0xa6>
 80061f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061f4:	eb06 0905 	add.w	r9, r6, r5
 80061f8:	d110      	bne.n	800621c <__cvt+0x8c>
 80061fa:	7833      	ldrb	r3, [r6, #0]
 80061fc:	2b30      	cmp	r3, #48	; 0x30
 80061fe:	d10a      	bne.n	8006216 <__cvt+0x86>
 8006200:	2200      	movs	r2, #0
 8006202:	2300      	movs	r3, #0
 8006204:	4620      	mov	r0, r4
 8006206:	4639      	mov	r1, r7
 8006208:	f7fa fc2e 	bl	8000a68 <__aeabi_dcmpeq>
 800620c:	b918      	cbnz	r0, 8006216 <__cvt+0x86>
 800620e:	f1c5 0501 	rsb	r5, r5, #1
 8006212:	f8ca 5000 	str.w	r5, [sl]
 8006216:	f8da 3000 	ldr.w	r3, [sl]
 800621a:	4499      	add	r9, r3
 800621c:	2200      	movs	r2, #0
 800621e:	2300      	movs	r3, #0
 8006220:	4620      	mov	r0, r4
 8006222:	4639      	mov	r1, r7
 8006224:	f7fa fc20 	bl	8000a68 <__aeabi_dcmpeq>
 8006228:	b108      	cbz	r0, 800622e <__cvt+0x9e>
 800622a:	f8cd 901c 	str.w	r9, [sp, #28]
 800622e:	2230      	movs	r2, #48	; 0x30
 8006230:	9b07      	ldr	r3, [sp, #28]
 8006232:	454b      	cmp	r3, r9
 8006234:	d307      	bcc.n	8006246 <__cvt+0xb6>
 8006236:	4630      	mov	r0, r6
 8006238:	9b07      	ldr	r3, [sp, #28]
 800623a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800623c:	1b9b      	subs	r3, r3, r6
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	b008      	add	sp, #32
 8006242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	9107      	str	r1, [sp, #28]
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	e7f0      	b.n	8006230 <__cvt+0xa0>

0800624e <__exponent>:
 800624e:	4603      	mov	r3, r0
 8006250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006252:	2900      	cmp	r1, #0
 8006254:	f803 2b02 	strb.w	r2, [r3], #2
 8006258:	bfb6      	itet	lt
 800625a:	222d      	movlt	r2, #45	; 0x2d
 800625c:	222b      	movge	r2, #43	; 0x2b
 800625e:	4249      	neglt	r1, r1
 8006260:	2909      	cmp	r1, #9
 8006262:	7042      	strb	r2, [r0, #1]
 8006264:	dd2b      	ble.n	80062be <__exponent+0x70>
 8006266:	f10d 0407 	add.w	r4, sp, #7
 800626a:	46a4      	mov	ip, r4
 800626c:	270a      	movs	r7, #10
 800626e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006272:	460a      	mov	r2, r1
 8006274:	46a6      	mov	lr, r4
 8006276:	fb07 1516 	mls	r5, r7, r6, r1
 800627a:	2a63      	cmp	r2, #99	; 0x63
 800627c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006280:	4631      	mov	r1, r6
 8006282:	f104 34ff 	add.w	r4, r4, #4294967295
 8006286:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800628a:	dcf0      	bgt.n	800626e <__exponent+0x20>
 800628c:	3130      	adds	r1, #48	; 0x30
 800628e:	f1ae 0502 	sub.w	r5, lr, #2
 8006292:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006296:	4629      	mov	r1, r5
 8006298:	1c44      	adds	r4, r0, #1
 800629a:	4561      	cmp	r1, ip
 800629c:	d30a      	bcc.n	80062b4 <__exponent+0x66>
 800629e:	f10d 0209 	add.w	r2, sp, #9
 80062a2:	eba2 020e 	sub.w	r2, r2, lr
 80062a6:	4565      	cmp	r5, ip
 80062a8:	bf88      	it	hi
 80062aa:	2200      	movhi	r2, #0
 80062ac:	4413      	add	r3, r2
 80062ae:	1a18      	subs	r0, r3, r0
 80062b0:	b003      	add	sp, #12
 80062b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062bc:	e7ed      	b.n	800629a <__exponent+0x4c>
 80062be:	2330      	movs	r3, #48	; 0x30
 80062c0:	3130      	adds	r1, #48	; 0x30
 80062c2:	7083      	strb	r3, [r0, #2]
 80062c4:	70c1      	strb	r1, [r0, #3]
 80062c6:	1d03      	adds	r3, r0, #4
 80062c8:	e7f1      	b.n	80062ae <__exponent+0x60>
	...

080062cc <_printf_float>:
 80062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	b091      	sub	sp, #68	; 0x44
 80062d2:	460c      	mov	r4, r1
 80062d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80062d8:	4616      	mov	r6, r2
 80062da:	461f      	mov	r7, r3
 80062dc:	4605      	mov	r5, r0
 80062de:	f001 fa55 	bl	800778c <_localeconv_r>
 80062e2:	6803      	ldr	r3, [r0, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	9309      	str	r3, [sp, #36]	; 0x24
 80062e8:	f7f9 ff92 	bl	8000210 <strlen>
 80062ec:	2300      	movs	r3, #0
 80062ee:	930e      	str	r3, [sp, #56]	; 0x38
 80062f0:	f8d8 3000 	ldr.w	r3, [r8]
 80062f4:	900a      	str	r0, [sp, #40]	; 0x28
 80062f6:	3307      	adds	r3, #7
 80062f8:	f023 0307 	bic.w	r3, r3, #7
 80062fc:	f103 0208 	add.w	r2, r3, #8
 8006300:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006304:	f8d4 b000 	ldr.w	fp, [r4]
 8006308:	f8c8 2000 	str.w	r2, [r8]
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006314:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006318:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800631c:	930b      	str	r3, [sp, #44]	; 0x2c
 800631e:	f04f 32ff 	mov.w	r2, #4294967295
 8006322:	4640      	mov	r0, r8
 8006324:	4b9c      	ldr	r3, [pc, #624]	; (8006598 <_printf_float+0x2cc>)
 8006326:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006328:	f7fa fbd0 	bl	8000acc <__aeabi_dcmpun>
 800632c:	bb70      	cbnz	r0, 800638c <_printf_float+0xc0>
 800632e:	f04f 32ff 	mov.w	r2, #4294967295
 8006332:	4640      	mov	r0, r8
 8006334:	4b98      	ldr	r3, [pc, #608]	; (8006598 <_printf_float+0x2cc>)
 8006336:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006338:	f7fa fbaa 	bl	8000a90 <__aeabi_dcmple>
 800633c:	bb30      	cbnz	r0, 800638c <_printf_float+0xc0>
 800633e:	2200      	movs	r2, #0
 8006340:	2300      	movs	r3, #0
 8006342:	4640      	mov	r0, r8
 8006344:	4651      	mov	r1, sl
 8006346:	f7fa fb99 	bl	8000a7c <__aeabi_dcmplt>
 800634a:	b110      	cbz	r0, 8006352 <_printf_float+0x86>
 800634c:	232d      	movs	r3, #45	; 0x2d
 800634e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006352:	4b92      	ldr	r3, [pc, #584]	; (800659c <_printf_float+0x2d0>)
 8006354:	4892      	ldr	r0, [pc, #584]	; (80065a0 <_printf_float+0x2d4>)
 8006356:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800635a:	bf94      	ite	ls
 800635c:	4698      	movls	r8, r3
 800635e:	4680      	movhi	r8, r0
 8006360:	2303      	movs	r3, #3
 8006362:	f04f 0a00 	mov.w	sl, #0
 8006366:	6123      	str	r3, [r4, #16]
 8006368:	f02b 0304 	bic.w	r3, fp, #4
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	4633      	mov	r3, r6
 8006370:	4621      	mov	r1, r4
 8006372:	4628      	mov	r0, r5
 8006374:	9700      	str	r7, [sp, #0]
 8006376:	aa0f      	add	r2, sp, #60	; 0x3c
 8006378:	f000 f9d4 	bl	8006724 <_printf_common>
 800637c:	3001      	adds	r0, #1
 800637e:	f040 8090 	bne.w	80064a2 <_printf_float+0x1d6>
 8006382:	f04f 30ff 	mov.w	r0, #4294967295
 8006386:	b011      	add	sp, #68	; 0x44
 8006388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638c:	4642      	mov	r2, r8
 800638e:	4653      	mov	r3, sl
 8006390:	4640      	mov	r0, r8
 8006392:	4651      	mov	r1, sl
 8006394:	f7fa fb9a 	bl	8000acc <__aeabi_dcmpun>
 8006398:	b148      	cbz	r0, 80063ae <_printf_float+0xe2>
 800639a:	f1ba 0f00 	cmp.w	sl, #0
 800639e:	bfb8      	it	lt
 80063a0:	232d      	movlt	r3, #45	; 0x2d
 80063a2:	4880      	ldr	r0, [pc, #512]	; (80065a4 <_printf_float+0x2d8>)
 80063a4:	bfb8      	it	lt
 80063a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063aa:	4b7f      	ldr	r3, [pc, #508]	; (80065a8 <_printf_float+0x2dc>)
 80063ac:	e7d3      	b.n	8006356 <_printf_float+0x8a>
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	d142      	bne.n	800643e <_printf_float+0x172>
 80063b8:	2306      	movs	r3, #6
 80063ba:	6063      	str	r3, [r4, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	9206      	str	r2, [sp, #24]
 80063c0:	aa0e      	add	r2, sp, #56	; 0x38
 80063c2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80063c6:	aa0d      	add	r2, sp, #52	; 0x34
 80063c8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80063cc:	9203      	str	r2, [sp, #12]
 80063ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80063d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	4642      	mov	r2, r8
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	4628      	mov	r0, r5
 80063e0:	4653      	mov	r3, sl
 80063e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80063e4:	f7ff fed4 	bl	8006190 <__cvt>
 80063e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063ea:	4680      	mov	r8, r0
 80063ec:	2947      	cmp	r1, #71	; 0x47
 80063ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063f0:	d108      	bne.n	8006404 <_printf_float+0x138>
 80063f2:	1cc8      	adds	r0, r1, #3
 80063f4:	db02      	blt.n	80063fc <_printf_float+0x130>
 80063f6:	6863      	ldr	r3, [r4, #4]
 80063f8:	4299      	cmp	r1, r3
 80063fa:	dd40      	ble.n	800647e <_printf_float+0x1b2>
 80063fc:	f1a9 0902 	sub.w	r9, r9, #2
 8006400:	fa5f f989 	uxtb.w	r9, r9
 8006404:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006408:	d81f      	bhi.n	800644a <_printf_float+0x17e>
 800640a:	464a      	mov	r2, r9
 800640c:	3901      	subs	r1, #1
 800640e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006412:	910d      	str	r1, [sp, #52]	; 0x34
 8006414:	f7ff ff1b 	bl	800624e <__exponent>
 8006418:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800641a:	4682      	mov	sl, r0
 800641c:	1813      	adds	r3, r2, r0
 800641e:	2a01      	cmp	r2, #1
 8006420:	6123      	str	r3, [r4, #16]
 8006422:	dc02      	bgt.n	800642a <_printf_float+0x15e>
 8006424:	6822      	ldr	r2, [r4, #0]
 8006426:	07d2      	lsls	r2, r2, #31
 8006428:	d501      	bpl.n	800642e <_printf_float+0x162>
 800642a:	3301      	adds	r3, #1
 800642c:	6123      	str	r3, [r4, #16]
 800642e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006432:	2b00      	cmp	r3, #0
 8006434:	d09b      	beq.n	800636e <_printf_float+0xa2>
 8006436:	232d      	movs	r3, #45	; 0x2d
 8006438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643c:	e797      	b.n	800636e <_printf_float+0xa2>
 800643e:	2947      	cmp	r1, #71	; 0x47
 8006440:	d1bc      	bne.n	80063bc <_printf_float+0xf0>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1ba      	bne.n	80063bc <_printf_float+0xf0>
 8006446:	2301      	movs	r3, #1
 8006448:	e7b7      	b.n	80063ba <_printf_float+0xee>
 800644a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800644e:	d118      	bne.n	8006482 <_printf_float+0x1b6>
 8006450:	2900      	cmp	r1, #0
 8006452:	6863      	ldr	r3, [r4, #4]
 8006454:	dd0b      	ble.n	800646e <_printf_float+0x1a2>
 8006456:	6121      	str	r1, [r4, #16]
 8006458:	b913      	cbnz	r3, 8006460 <_printf_float+0x194>
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	07d0      	lsls	r0, r2, #31
 800645e:	d502      	bpl.n	8006466 <_printf_float+0x19a>
 8006460:	3301      	adds	r3, #1
 8006462:	440b      	add	r3, r1
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	f04f 0a00 	mov.w	sl, #0
 800646a:	65a1      	str	r1, [r4, #88]	; 0x58
 800646c:	e7df      	b.n	800642e <_printf_float+0x162>
 800646e:	b913      	cbnz	r3, 8006476 <_printf_float+0x1aa>
 8006470:	6822      	ldr	r2, [r4, #0]
 8006472:	07d2      	lsls	r2, r2, #31
 8006474:	d501      	bpl.n	800647a <_printf_float+0x1ae>
 8006476:	3302      	adds	r3, #2
 8006478:	e7f4      	b.n	8006464 <_printf_float+0x198>
 800647a:	2301      	movs	r3, #1
 800647c:	e7f2      	b.n	8006464 <_printf_float+0x198>
 800647e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006484:	4299      	cmp	r1, r3
 8006486:	db05      	blt.n	8006494 <_printf_float+0x1c8>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	6121      	str	r1, [r4, #16]
 800648c:	07d8      	lsls	r0, r3, #31
 800648e:	d5ea      	bpl.n	8006466 <_printf_float+0x19a>
 8006490:	1c4b      	adds	r3, r1, #1
 8006492:	e7e7      	b.n	8006464 <_printf_float+0x198>
 8006494:	2900      	cmp	r1, #0
 8006496:	bfcc      	ite	gt
 8006498:	2201      	movgt	r2, #1
 800649a:	f1c1 0202 	rsble	r2, r1, #2
 800649e:	4413      	add	r3, r2
 80064a0:	e7e0      	b.n	8006464 <_printf_float+0x198>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	055a      	lsls	r2, r3, #21
 80064a6:	d407      	bmi.n	80064b8 <_printf_float+0x1ec>
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	4642      	mov	r2, r8
 80064ac:	4631      	mov	r1, r6
 80064ae:	4628      	mov	r0, r5
 80064b0:	47b8      	blx	r7
 80064b2:	3001      	adds	r0, #1
 80064b4:	d12b      	bne.n	800650e <_printf_float+0x242>
 80064b6:	e764      	b.n	8006382 <_printf_float+0xb6>
 80064b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064bc:	f240 80dd 	bls.w	800667a <_printf_float+0x3ae>
 80064c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064c4:	2200      	movs	r2, #0
 80064c6:	2300      	movs	r3, #0
 80064c8:	f7fa face 	bl	8000a68 <__aeabi_dcmpeq>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d033      	beq.n	8006538 <_printf_float+0x26c>
 80064d0:	2301      	movs	r3, #1
 80064d2:	4631      	mov	r1, r6
 80064d4:	4628      	mov	r0, r5
 80064d6:	4a35      	ldr	r2, [pc, #212]	; (80065ac <_printf_float+0x2e0>)
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	f43f af51 	beq.w	8006382 <_printf_float+0xb6>
 80064e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064e4:	429a      	cmp	r2, r3
 80064e6:	db02      	blt.n	80064ee <_printf_float+0x222>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	07d8      	lsls	r0, r3, #31
 80064ec:	d50f      	bpl.n	800650e <_printf_float+0x242>
 80064ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	f43f af42 	beq.w	8006382 <_printf_float+0xb6>
 80064fe:	f04f 0800 	mov.w	r8, #0
 8006502:	f104 091a 	add.w	r9, r4, #26
 8006506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006508:	3b01      	subs	r3, #1
 800650a:	4543      	cmp	r3, r8
 800650c:	dc09      	bgt.n	8006522 <_printf_float+0x256>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	079b      	lsls	r3, r3, #30
 8006512:	f100 8102 	bmi.w	800671a <_printf_float+0x44e>
 8006516:	68e0      	ldr	r0, [r4, #12]
 8006518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800651a:	4298      	cmp	r0, r3
 800651c:	bfb8      	it	lt
 800651e:	4618      	movlt	r0, r3
 8006520:	e731      	b.n	8006386 <_printf_float+0xba>
 8006522:	2301      	movs	r3, #1
 8006524:	464a      	mov	r2, r9
 8006526:	4631      	mov	r1, r6
 8006528:	4628      	mov	r0, r5
 800652a:	47b8      	blx	r7
 800652c:	3001      	adds	r0, #1
 800652e:	f43f af28 	beq.w	8006382 <_printf_float+0xb6>
 8006532:	f108 0801 	add.w	r8, r8, #1
 8006536:	e7e6      	b.n	8006506 <_printf_float+0x23a>
 8006538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800653a:	2b00      	cmp	r3, #0
 800653c:	dc38      	bgt.n	80065b0 <_printf_float+0x2e4>
 800653e:	2301      	movs	r3, #1
 8006540:	4631      	mov	r1, r6
 8006542:	4628      	mov	r0, r5
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <_printf_float+0x2e0>)
 8006546:	47b8      	blx	r7
 8006548:	3001      	adds	r0, #1
 800654a:	f43f af1a 	beq.w	8006382 <_printf_float+0xb6>
 800654e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006552:	4313      	orrs	r3, r2
 8006554:	d102      	bne.n	800655c <_printf_float+0x290>
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	07d9      	lsls	r1, r3, #31
 800655a:	d5d8      	bpl.n	800650e <_printf_float+0x242>
 800655c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006560:	4631      	mov	r1, r6
 8006562:	4628      	mov	r0, r5
 8006564:	47b8      	blx	r7
 8006566:	3001      	adds	r0, #1
 8006568:	f43f af0b 	beq.w	8006382 <_printf_float+0xb6>
 800656c:	f04f 0900 	mov.w	r9, #0
 8006570:	f104 0a1a 	add.w	sl, r4, #26
 8006574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006576:	425b      	negs	r3, r3
 8006578:	454b      	cmp	r3, r9
 800657a:	dc01      	bgt.n	8006580 <_printf_float+0x2b4>
 800657c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800657e:	e794      	b.n	80064aa <_printf_float+0x1de>
 8006580:	2301      	movs	r3, #1
 8006582:	4652      	mov	r2, sl
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f aef9 	beq.w	8006382 <_printf_float+0xb6>
 8006590:	f109 0901 	add.w	r9, r9, #1
 8006594:	e7ee      	b.n	8006574 <_printf_float+0x2a8>
 8006596:	bf00      	nop
 8006598:	7fefffff 	.word	0x7fefffff
 800659c:	080091dc 	.word	0x080091dc
 80065a0:	080091e0 	.word	0x080091e0
 80065a4:	080091e8 	.word	0x080091e8
 80065a8:	080091e4 	.word	0x080091e4
 80065ac:	080091ec 	.word	0x080091ec
 80065b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065b4:	429a      	cmp	r2, r3
 80065b6:	bfa8      	it	ge
 80065b8:	461a      	movge	r2, r3
 80065ba:	2a00      	cmp	r2, #0
 80065bc:	4691      	mov	r9, r2
 80065be:	dc37      	bgt.n	8006630 <_printf_float+0x364>
 80065c0:	f04f 0b00 	mov.w	fp, #0
 80065c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065c8:	f104 021a 	add.w	r2, r4, #26
 80065cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80065d0:	ebaa 0309 	sub.w	r3, sl, r9
 80065d4:	455b      	cmp	r3, fp
 80065d6:	dc33      	bgt.n	8006640 <_printf_float+0x374>
 80065d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065dc:	429a      	cmp	r2, r3
 80065de:	db3b      	blt.n	8006658 <_printf_float+0x38c>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	07da      	lsls	r2, r3, #31
 80065e4:	d438      	bmi.n	8006658 <_printf_float+0x38c>
 80065e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065ea:	eba2 030a 	sub.w	r3, r2, sl
 80065ee:	eba2 0901 	sub.w	r9, r2, r1
 80065f2:	4599      	cmp	r9, r3
 80065f4:	bfa8      	it	ge
 80065f6:	4699      	movge	r9, r3
 80065f8:	f1b9 0f00 	cmp.w	r9, #0
 80065fc:	dc34      	bgt.n	8006668 <_printf_float+0x39c>
 80065fe:	f04f 0800 	mov.w	r8, #0
 8006602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006606:	f104 0a1a 	add.w	sl, r4, #26
 800660a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	eba3 0309 	sub.w	r3, r3, r9
 8006614:	4543      	cmp	r3, r8
 8006616:	f77f af7a 	ble.w	800650e <_printf_float+0x242>
 800661a:	2301      	movs	r3, #1
 800661c:	4652      	mov	r2, sl
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	f43f aeac 	beq.w	8006382 <_printf_float+0xb6>
 800662a:	f108 0801 	add.w	r8, r8, #1
 800662e:	e7ec      	b.n	800660a <_printf_float+0x33e>
 8006630:	4613      	mov	r3, r2
 8006632:	4631      	mov	r1, r6
 8006634:	4642      	mov	r2, r8
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	d1c0      	bne.n	80065c0 <_printf_float+0x2f4>
 800663e:	e6a0      	b.n	8006382 <_printf_float+0xb6>
 8006640:	2301      	movs	r3, #1
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	920b      	str	r2, [sp, #44]	; 0x2c
 8006648:	47b8      	blx	r7
 800664a:	3001      	adds	r0, #1
 800664c:	f43f ae99 	beq.w	8006382 <_printf_float+0xb6>
 8006650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006652:	f10b 0b01 	add.w	fp, fp, #1
 8006656:	e7b9      	b.n	80065cc <_printf_float+0x300>
 8006658:	4631      	mov	r1, r6
 800665a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	d1bf      	bne.n	80065e6 <_printf_float+0x31a>
 8006666:	e68c      	b.n	8006382 <_printf_float+0xb6>
 8006668:	464b      	mov	r3, r9
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	eb08 020a 	add.w	r2, r8, sl
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	d1c2      	bne.n	80065fe <_printf_float+0x332>
 8006678:	e683      	b.n	8006382 <_printf_float+0xb6>
 800667a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800667c:	2a01      	cmp	r2, #1
 800667e:	dc01      	bgt.n	8006684 <_printf_float+0x3b8>
 8006680:	07db      	lsls	r3, r3, #31
 8006682:	d537      	bpl.n	80066f4 <_printf_float+0x428>
 8006684:	2301      	movs	r3, #1
 8006686:	4642      	mov	r2, r8
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f ae77 	beq.w	8006382 <_printf_float+0xb6>
 8006694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	f43f ae6f 	beq.w	8006382 <_printf_float+0xb6>
 80066a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066a8:	2200      	movs	r2, #0
 80066aa:	2300      	movs	r3, #0
 80066ac:	f7fa f9dc 	bl	8000a68 <__aeabi_dcmpeq>
 80066b0:	b9d8      	cbnz	r0, 80066ea <_printf_float+0x41e>
 80066b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066b4:	f108 0201 	add.w	r2, r8, #1
 80066b8:	3b01      	subs	r3, #1
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	d10e      	bne.n	80066e2 <_printf_float+0x416>
 80066c4:	e65d      	b.n	8006382 <_printf_float+0xb6>
 80066c6:	2301      	movs	r3, #1
 80066c8:	464a      	mov	r2, r9
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f ae56 	beq.w	8006382 <_printf_float+0xb6>
 80066d6:	f108 0801 	add.w	r8, r8, #1
 80066da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066dc:	3b01      	subs	r3, #1
 80066de:	4543      	cmp	r3, r8
 80066e0:	dcf1      	bgt.n	80066c6 <_printf_float+0x3fa>
 80066e2:	4653      	mov	r3, sl
 80066e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066e8:	e6e0      	b.n	80064ac <_printf_float+0x1e0>
 80066ea:	f04f 0800 	mov.w	r8, #0
 80066ee:	f104 091a 	add.w	r9, r4, #26
 80066f2:	e7f2      	b.n	80066da <_printf_float+0x40e>
 80066f4:	2301      	movs	r3, #1
 80066f6:	4642      	mov	r2, r8
 80066f8:	e7df      	b.n	80066ba <_printf_float+0x3ee>
 80066fa:	2301      	movs	r3, #1
 80066fc:	464a      	mov	r2, r9
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	f43f ae3c 	beq.w	8006382 <_printf_float+0xb6>
 800670a:	f108 0801 	add.w	r8, r8, #1
 800670e:	68e3      	ldr	r3, [r4, #12]
 8006710:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006712:	1a5b      	subs	r3, r3, r1
 8006714:	4543      	cmp	r3, r8
 8006716:	dcf0      	bgt.n	80066fa <_printf_float+0x42e>
 8006718:	e6fd      	b.n	8006516 <_printf_float+0x24a>
 800671a:	f04f 0800 	mov.w	r8, #0
 800671e:	f104 0919 	add.w	r9, r4, #25
 8006722:	e7f4      	b.n	800670e <_printf_float+0x442>

08006724 <_printf_common>:
 8006724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006728:	4616      	mov	r6, r2
 800672a:	4699      	mov	r9, r3
 800672c:	688a      	ldr	r2, [r1, #8]
 800672e:	690b      	ldr	r3, [r1, #16]
 8006730:	4607      	mov	r7, r0
 8006732:	4293      	cmp	r3, r2
 8006734:	bfb8      	it	lt
 8006736:	4613      	movlt	r3, r2
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800673e:	460c      	mov	r4, r1
 8006740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006744:	b10a      	cbz	r2, 800674a <_printf_common+0x26>
 8006746:	3301      	adds	r3, #1
 8006748:	6033      	str	r3, [r6, #0]
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	0699      	lsls	r1, r3, #26
 800674e:	bf42      	ittt	mi
 8006750:	6833      	ldrmi	r3, [r6, #0]
 8006752:	3302      	addmi	r3, #2
 8006754:	6033      	strmi	r3, [r6, #0]
 8006756:	6825      	ldr	r5, [r4, #0]
 8006758:	f015 0506 	ands.w	r5, r5, #6
 800675c:	d106      	bne.n	800676c <_printf_common+0x48>
 800675e:	f104 0a19 	add.w	sl, r4, #25
 8006762:	68e3      	ldr	r3, [r4, #12]
 8006764:	6832      	ldr	r2, [r6, #0]
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	42ab      	cmp	r3, r5
 800676a:	dc28      	bgt.n	80067be <_printf_common+0x9a>
 800676c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006770:	1e13      	subs	r3, r2, #0
 8006772:	6822      	ldr	r2, [r4, #0]
 8006774:	bf18      	it	ne
 8006776:	2301      	movne	r3, #1
 8006778:	0692      	lsls	r2, r2, #26
 800677a:	d42d      	bmi.n	80067d8 <_printf_common+0xb4>
 800677c:	4649      	mov	r1, r9
 800677e:	4638      	mov	r0, r7
 8006780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006784:	47c0      	blx	r8
 8006786:	3001      	adds	r0, #1
 8006788:	d020      	beq.n	80067cc <_printf_common+0xa8>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	68e5      	ldr	r5, [r4, #12]
 800678e:	f003 0306 	and.w	r3, r3, #6
 8006792:	2b04      	cmp	r3, #4
 8006794:	bf18      	it	ne
 8006796:	2500      	movne	r5, #0
 8006798:	6832      	ldr	r2, [r6, #0]
 800679a:	f04f 0600 	mov.w	r6, #0
 800679e:	68a3      	ldr	r3, [r4, #8]
 80067a0:	bf08      	it	eq
 80067a2:	1aad      	subeq	r5, r5, r2
 80067a4:	6922      	ldr	r2, [r4, #16]
 80067a6:	bf08      	it	eq
 80067a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067ac:	4293      	cmp	r3, r2
 80067ae:	bfc4      	itt	gt
 80067b0:	1a9b      	subgt	r3, r3, r2
 80067b2:	18ed      	addgt	r5, r5, r3
 80067b4:	341a      	adds	r4, #26
 80067b6:	42b5      	cmp	r5, r6
 80067b8:	d11a      	bne.n	80067f0 <_printf_common+0xcc>
 80067ba:	2000      	movs	r0, #0
 80067bc:	e008      	b.n	80067d0 <_printf_common+0xac>
 80067be:	2301      	movs	r3, #1
 80067c0:	4652      	mov	r2, sl
 80067c2:	4649      	mov	r1, r9
 80067c4:	4638      	mov	r0, r7
 80067c6:	47c0      	blx	r8
 80067c8:	3001      	adds	r0, #1
 80067ca:	d103      	bne.n	80067d4 <_printf_common+0xb0>
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d4:	3501      	adds	r5, #1
 80067d6:	e7c4      	b.n	8006762 <_printf_common+0x3e>
 80067d8:	2030      	movs	r0, #48	; 0x30
 80067da:	18e1      	adds	r1, r4, r3
 80067dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067e6:	4422      	add	r2, r4
 80067e8:	3302      	adds	r3, #2
 80067ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067ee:	e7c5      	b.n	800677c <_printf_common+0x58>
 80067f0:	2301      	movs	r3, #1
 80067f2:	4622      	mov	r2, r4
 80067f4:	4649      	mov	r1, r9
 80067f6:	4638      	mov	r0, r7
 80067f8:	47c0      	blx	r8
 80067fa:	3001      	adds	r0, #1
 80067fc:	d0e6      	beq.n	80067cc <_printf_common+0xa8>
 80067fe:	3601      	adds	r6, #1
 8006800:	e7d9      	b.n	80067b6 <_printf_common+0x92>
	...

08006804 <_printf_i>:
 8006804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006808:	460c      	mov	r4, r1
 800680a:	7e27      	ldrb	r7, [r4, #24]
 800680c:	4691      	mov	r9, r2
 800680e:	2f78      	cmp	r7, #120	; 0x78
 8006810:	4680      	mov	r8, r0
 8006812:	469a      	mov	sl, r3
 8006814:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800681a:	d807      	bhi.n	800682c <_printf_i+0x28>
 800681c:	2f62      	cmp	r7, #98	; 0x62
 800681e:	d80a      	bhi.n	8006836 <_printf_i+0x32>
 8006820:	2f00      	cmp	r7, #0
 8006822:	f000 80d9 	beq.w	80069d8 <_printf_i+0x1d4>
 8006826:	2f58      	cmp	r7, #88	; 0x58
 8006828:	f000 80a4 	beq.w	8006974 <_printf_i+0x170>
 800682c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006834:	e03a      	b.n	80068ac <_printf_i+0xa8>
 8006836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800683a:	2b15      	cmp	r3, #21
 800683c:	d8f6      	bhi.n	800682c <_printf_i+0x28>
 800683e:	a001      	add	r0, pc, #4	; (adr r0, 8006844 <_printf_i+0x40>)
 8006840:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006844:	0800689d 	.word	0x0800689d
 8006848:	080068b1 	.word	0x080068b1
 800684c:	0800682d 	.word	0x0800682d
 8006850:	0800682d 	.word	0x0800682d
 8006854:	0800682d 	.word	0x0800682d
 8006858:	0800682d 	.word	0x0800682d
 800685c:	080068b1 	.word	0x080068b1
 8006860:	0800682d 	.word	0x0800682d
 8006864:	0800682d 	.word	0x0800682d
 8006868:	0800682d 	.word	0x0800682d
 800686c:	0800682d 	.word	0x0800682d
 8006870:	080069bf 	.word	0x080069bf
 8006874:	080068e1 	.word	0x080068e1
 8006878:	080069a1 	.word	0x080069a1
 800687c:	0800682d 	.word	0x0800682d
 8006880:	0800682d 	.word	0x0800682d
 8006884:	080069e1 	.word	0x080069e1
 8006888:	0800682d 	.word	0x0800682d
 800688c:	080068e1 	.word	0x080068e1
 8006890:	0800682d 	.word	0x0800682d
 8006894:	0800682d 	.word	0x0800682d
 8006898:	080069a9 	.word	0x080069a9
 800689c:	680b      	ldr	r3, [r1, #0]
 800689e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068a2:	1d1a      	adds	r2, r3, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	600a      	str	r2, [r1, #0]
 80068a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0a4      	b.n	80069fa <_printf_i+0x1f6>
 80068b0:	6825      	ldr	r5, [r4, #0]
 80068b2:	6808      	ldr	r0, [r1, #0]
 80068b4:	062e      	lsls	r6, r5, #24
 80068b6:	f100 0304 	add.w	r3, r0, #4
 80068ba:	d50a      	bpl.n	80068d2 <_printf_i+0xce>
 80068bc:	6805      	ldr	r5, [r0, #0]
 80068be:	600b      	str	r3, [r1, #0]
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	da03      	bge.n	80068cc <_printf_i+0xc8>
 80068c4:	232d      	movs	r3, #45	; 0x2d
 80068c6:	426d      	negs	r5, r5
 80068c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068cc:	230a      	movs	r3, #10
 80068ce:	485e      	ldr	r0, [pc, #376]	; (8006a48 <_printf_i+0x244>)
 80068d0:	e019      	b.n	8006906 <_printf_i+0x102>
 80068d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068d6:	6805      	ldr	r5, [r0, #0]
 80068d8:	600b      	str	r3, [r1, #0]
 80068da:	bf18      	it	ne
 80068dc:	b22d      	sxthne	r5, r5
 80068de:	e7ef      	b.n	80068c0 <_printf_i+0xbc>
 80068e0:	680b      	ldr	r3, [r1, #0]
 80068e2:	6825      	ldr	r5, [r4, #0]
 80068e4:	1d18      	adds	r0, r3, #4
 80068e6:	6008      	str	r0, [r1, #0]
 80068e8:	0628      	lsls	r0, r5, #24
 80068ea:	d501      	bpl.n	80068f0 <_printf_i+0xec>
 80068ec:	681d      	ldr	r5, [r3, #0]
 80068ee:	e002      	b.n	80068f6 <_printf_i+0xf2>
 80068f0:	0669      	lsls	r1, r5, #25
 80068f2:	d5fb      	bpl.n	80068ec <_printf_i+0xe8>
 80068f4:	881d      	ldrh	r5, [r3, #0]
 80068f6:	2f6f      	cmp	r7, #111	; 0x6f
 80068f8:	bf0c      	ite	eq
 80068fa:	2308      	moveq	r3, #8
 80068fc:	230a      	movne	r3, #10
 80068fe:	4852      	ldr	r0, [pc, #328]	; (8006a48 <_printf_i+0x244>)
 8006900:	2100      	movs	r1, #0
 8006902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006906:	6866      	ldr	r6, [r4, #4]
 8006908:	2e00      	cmp	r6, #0
 800690a:	bfa8      	it	ge
 800690c:	6821      	ldrge	r1, [r4, #0]
 800690e:	60a6      	str	r6, [r4, #8]
 8006910:	bfa4      	itt	ge
 8006912:	f021 0104 	bicge.w	r1, r1, #4
 8006916:	6021      	strge	r1, [r4, #0]
 8006918:	b90d      	cbnz	r5, 800691e <_printf_i+0x11a>
 800691a:	2e00      	cmp	r6, #0
 800691c:	d04d      	beq.n	80069ba <_printf_i+0x1b6>
 800691e:	4616      	mov	r6, r2
 8006920:	fbb5 f1f3 	udiv	r1, r5, r3
 8006924:	fb03 5711 	mls	r7, r3, r1, r5
 8006928:	5dc7      	ldrb	r7, [r0, r7]
 800692a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800692e:	462f      	mov	r7, r5
 8006930:	42bb      	cmp	r3, r7
 8006932:	460d      	mov	r5, r1
 8006934:	d9f4      	bls.n	8006920 <_printf_i+0x11c>
 8006936:	2b08      	cmp	r3, #8
 8006938:	d10b      	bne.n	8006952 <_printf_i+0x14e>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	07df      	lsls	r7, r3, #31
 800693e:	d508      	bpl.n	8006952 <_printf_i+0x14e>
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	6861      	ldr	r1, [r4, #4]
 8006944:	4299      	cmp	r1, r3
 8006946:	bfde      	ittt	le
 8006948:	2330      	movle	r3, #48	; 0x30
 800694a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800694e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006952:	1b92      	subs	r2, r2, r6
 8006954:	6122      	str	r2, [r4, #16]
 8006956:	464b      	mov	r3, r9
 8006958:	4621      	mov	r1, r4
 800695a:	4640      	mov	r0, r8
 800695c:	f8cd a000 	str.w	sl, [sp]
 8006960:	aa03      	add	r2, sp, #12
 8006962:	f7ff fedf 	bl	8006724 <_printf_common>
 8006966:	3001      	adds	r0, #1
 8006968:	d14c      	bne.n	8006a04 <_printf_i+0x200>
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	b004      	add	sp, #16
 8006970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006974:	4834      	ldr	r0, [pc, #208]	; (8006a48 <_printf_i+0x244>)
 8006976:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800697a:	680e      	ldr	r6, [r1, #0]
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006982:	061f      	lsls	r7, r3, #24
 8006984:	600e      	str	r6, [r1, #0]
 8006986:	d514      	bpl.n	80069b2 <_printf_i+0x1ae>
 8006988:	07d9      	lsls	r1, r3, #31
 800698a:	bf44      	itt	mi
 800698c:	f043 0320 	orrmi.w	r3, r3, #32
 8006990:	6023      	strmi	r3, [r4, #0]
 8006992:	b91d      	cbnz	r5, 800699c <_printf_i+0x198>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	f023 0320 	bic.w	r3, r3, #32
 800699a:	6023      	str	r3, [r4, #0]
 800699c:	2310      	movs	r3, #16
 800699e:	e7af      	b.n	8006900 <_printf_i+0xfc>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	f043 0320 	orr.w	r3, r3, #32
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	2378      	movs	r3, #120	; 0x78
 80069aa:	4828      	ldr	r0, [pc, #160]	; (8006a4c <_printf_i+0x248>)
 80069ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069b0:	e7e3      	b.n	800697a <_printf_i+0x176>
 80069b2:	065e      	lsls	r6, r3, #25
 80069b4:	bf48      	it	mi
 80069b6:	b2ad      	uxthmi	r5, r5
 80069b8:	e7e6      	b.n	8006988 <_printf_i+0x184>
 80069ba:	4616      	mov	r6, r2
 80069bc:	e7bb      	b.n	8006936 <_printf_i+0x132>
 80069be:	680b      	ldr	r3, [r1, #0]
 80069c0:	6826      	ldr	r6, [r4, #0]
 80069c2:	1d1d      	adds	r5, r3, #4
 80069c4:	6960      	ldr	r0, [r4, #20]
 80069c6:	600d      	str	r5, [r1, #0]
 80069c8:	0635      	lsls	r5, r6, #24
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	d501      	bpl.n	80069d2 <_printf_i+0x1ce>
 80069ce:	6018      	str	r0, [r3, #0]
 80069d0:	e002      	b.n	80069d8 <_printf_i+0x1d4>
 80069d2:	0671      	lsls	r1, r6, #25
 80069d4:	d5fb      	bpl.n	80069ce <_printf_i+0x1ca>
 80069d6:	8018      	strh	r0, [r3, #0]
 80069d8:	2300      	movs	r3, #0
 80069da:	4616      	mov	r6, r2
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	e7ba      	b.n	8006956 <_printf_i+0x152>
 80069e0:	680b      	ldr	r3, [r1, #0]
 80069e2:	1d1a      	adds	r2, r3, #4
 80069e4:	600a      	str	r2, [r1, #0]
 80069e6:	681e      	ldr	r6, [r3, #0]
 80069e8:	2100      	movs	r1, #0
 80069ea:	4630      	mov	r0, r6
 80069ec:	6862      	ldr	r2, [r4, #4]
 80069ee:	f000 fed9 	bl	80077a4 <memchr>
 80069f2:	b108      	cbz	r0, 80069f8 <_printf_i+0x1f4>
 80069f4:	1b80      	subs	r0, r0, r6
 80069f6:	6060      	str	r0, [r4, #4]
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	2300      	movs	r3, #0
 80069fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a02:	e7a8      	b.n	8006956 <_printf_i+0x152>
 8006a04:	4632      	mov	r2, r6
 8006a06:	4649      	mov	r1, r9
 8006a08:	4640      	mov	r0, r8
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	47d0      	blx	sl
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d0ab      	beq.n	800696a <_printf_i+0x166>
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	079b      	lsls	r3, r3, #30
 8006a16:	d413      	bmi.n	8006a40 <_printf_i+0x23c>
 8006a18:	68e0      	ldr	r0, [r4, #12]
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	4298      	cmp	r0, r3
 8006a1e:	bfb8      	it	lt
 8006a20:	4618      	movlt	r0, r3
 8006a22:	e7a4      	b.n	800696e <_printf_i+0x16a>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4632      	mov	r2, r6
 8006a28:	4649      	mov	r1, r9
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	47d0      	blx	sl
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d09b      	beq.n	800696a <_printf_i+0x166>
 8006a32:	3501      	adds	r5, #1
 8006a34:	68e3      	ldr	r3, [r4, #12]
 8006a36:	9903      	ldr	r1, [sp, #12]
 8006a38:	1a5b      	subs	r3, r3, r1
 8006a3a:	42ab      	cmp	r3, r5
 8006a3c:	dcf2      	bgt.n	8006a24 <_printf_i+0x220>
 8006a3e:	e7eb      	b.n	8006a18 <_printf_i+0x214>
 8006a40:	2500      	movs	r5, #0
 8006a42:	f104 0619 	add.w	r6, r4, #25
 8006a46:	e7f5      	b.n	8006a34 <_printf_i+0x230>
 8006a48:	080091ee 	.word	0x080091ee
 8006a4c:	080091ff 	.word	0x080091ff

08006a50 <siprintf>:
 8006a50:	b40e      	push	{r1, r2, r3}
 8006a52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a56:	b500      	push	{lr}
 8006a58:	b09c      	sub	sp, #112	; 0x70
 8006a5a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a5c:	9002      	str	r0, [sp, #8]
 8006a5e:	9006      	str	r0, [sp, #24]
 8006a60:	9107      	str	r1, [sp, #28]
 8006a62:	9104      	str	r1, [sp, #16]
 8006a64:	4808      	ldr	r0, [pc, #32]	; (8006a88 <siprintf+0x38>)
 8006a66:	4909      	ldr	r1, [pc, #36]	; (8006a8c <siprintf+0x3c>)
 8006a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6c:	9105      	str	r1, [sp, #20]
 8006a6e:	6800      	ldr	r0, [r0, #0]
 8006a70:	a902      	add	r1, sp, #8
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	f001 fb44 	bl	8008100 <_svfiprintf_r>
 8006a78:	2200      	movs	r2, #0
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	b01c      	add	sp, #112	; 0x70
 8006a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a84:	b003      	add	sp, #12
 8006a86:	4770      	bx	lr
 8006a88:	2000000c 	.word	0x2000000c
 8006a8c:	ffff0208 	.word	0xffff0208

08006a90 <quorem>:
 8006a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	6903      	ldr	r3, [r0, #16]
 8006a96:	690c      	ldr	r4, [r1, #16]
 8006a98:	4607      	mov	r7, r0
 8006a9a:	42a3      	cmp	r3, r4
 8006a9c:	f2c0 8083 	blt.w	8006ba6 <quorem+0x116>
 8006aa0:	3c01      	subs	r4, #1
 8006aa2:	f100 0514 	add.w	r5, r0, #20
 8006aa6:	f101 0814 	add.w	r8, r1, #20
 8006aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	429a      	cmp	r2, r3
 8006abc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ac8:	d332      	bcc.n	8006b30 <quorem+0xa0>
 8006aca:	f04f 0e00 	mov.w	lr, #0
 8006ace:	4640      	mov	r0, r8
 8006ad0:	46ac      	mov	ip, r5
 8006ad2:	46f2      	mov	sl, lr
 8006ad4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ad8:	b293      	uxth	r3, r2
 8006ada:	fb06 e303 	mla	r3, r6, r3, lr
 8006ade:	0c12      	lsrs	r2, r2, #16
 8006ae0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ae4:	fb06 e202 	mla	r2, r6, r2, lr
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	ebaa 0303 	sub.w	r3, sl, r3
 8006aee:	f8dc a000 	ldr.w	sl, [ip]
 8006af2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006af6:	fa1f fa8a 	uxth.w	sl, sl
 8006afa:	4453      	add	r3, sl
 8006afc:	fa1f fa82 	uxth.w	sl, r2
 8006b00:	f8dc 2000 	ldr.w	r2, [ip]
 8006b04:	4581      	cmp	r9, r0
 8006b06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006b0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b14:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b18:	f84c 3b04 	str.w	r3, [ip], #4
 8006b1c:	d2da      	bcs.n	8006ad4 <quorem+0x44>
 8006b1e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b22:	b92b      	cbnz	r3, 8006b30 <quorem+0xa0>
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	3b04      	subs	r3, #4
 8006b28:	429d      	cmp	r5, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	d32f      	bcc.n	8006b8e <quorem+0xfe>
 8006b2e:	613c      	str	r4, [r7, #16]
 8006b30:	4638      	mov	r0, r7
 8006b32:	f001 f8cd 	bl	8007cd0 <__mcmp>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	db25      	blt.n	8006b86 <quorem+0xf6>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f04f 0c00 	mov.w	ip, #0
 8006b40:	3601      	adds	r6, #1
 8006b42:	f858 1b04 	ldr.w	r1, [r8], #4
 8006b46:	f8d0 e000 	ldr.w	lr, [r0]
 8006b4a:	b28b      	uxth	r3, r1
 8006b4c:	ebac 0303 	sub.w	r3, ip, r3
 8006b50:	fa1f f28e 	uxth.w	r2, lr
 8006b54:	4413      	add	r3, r2
 8006b56:	0c0a      	lsrs	r2, r1, #16
 8006b58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b66:	45c1      	cmp	r9, r8
 8006b68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b6c:	f840 3b04 	str.w	r3, [r0], #4
 8006b70:	d2e7      	bcs.n	8006b42 <quorem+0xb2>
 8006b72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b7a:	b922      	cbnz	r2, 8006b86 <quorem+0xf6>
 8006b7c:	3b04      	subs	r3, #4
 8006b7e:	429d      	cmp	r5, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	d30a      	bcc.n	8006b9a <quorem+0x10a>
 8006b84:	613c      	str	r4, [r7, #16]
 8006b86:	4630      	mov	r0, r6
 8006b88:	b003      	add	sp, #12
 8006b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	3b04      	subs	r3, #4
 8006b92:	2a00      	cmp	r2, #0
 8006b94:	d1cb      	bne.n	8006b2e <quorem+0x9e>
 8006b96:	3c01      	subs	r4, #1
 8006b98:	e7c6      	b.n	8006b28 <quorem+0x98>
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	3b04      	subs	r3, #4
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	d1f0      	bne.n	8006b84 <quorem+0xf4>
 8006ba2:	3c01      	subs	r4, #1
 8006ba4:	e7eb      	b.n	8006b7e <quorem+0xee>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e7ee      	b.n	8006b88 <quorem+0xf8>
 8006baa:	0000      	movs	r0, r0
 8006bac:	0000      	movs	r0, r0
	...

08006bb0 <_dtoa_r>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	4616      	mov	r6, r2
 8006bb6:	461f      	mov	r7, r3
 8006bb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006bba:	b099      	sub	sp, #100	; 0x64
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006bc2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006bc6:	b974      	cbnz	r4, 8006be6 <_dtoa_r+0x36>
 8006bc8:	2010      	movs	r0, #16
 8006bca:	f000 fde3 	bl	8007794 <malloc>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	6268      	str	r0, [r5, #36]	; 0x24
 8006bd2:	b920      	cbnz	r0, 8006bde <_dtoa_r+0x2e>
 8006bd4:	21ea      	movs	r1, #234	; 0xea
 8006bd6:	4bae      	ldr	r3, [pc, #696]	; (8006e90 <_dtoa_r+0x2e0>)
 8006bd8:	48ae      	ldr	r0, [pc, #696]	; (8006e94 <_dtoa_r+0x2e4>)
 8006bda:	f001 fba1 	bl	8008320 <__assert_func>
 8006bde:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006be2:	6004      	str	r4, [r0, #0]
 8006be4:	60c4      	str	r4, [r0, #12]
 8006be6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006be8:	6819      	ldr	r1, [r3, #0]
 8006bea:	b151      	cbz	r1, 8006c02 <_dtoa_r+0x52>
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4093      	lsls	r3, r2
 8006bf2:	604a      	str	r2, [r1, #4]
 8006bf4:	608b      	str	r3, [r1, #8]
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 fe30 	bl	800785c <_Bfree>
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	1e3b      	subs	r3, r7, #0
 8006c04:	bfaf      	iteee	ge
 8006c06:	2300      	movge	r3, #0
 8006c08:	2201      	movlt	r2, #1
 8006c0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c0e:	9305      	strlt	r3, [sp, #20]
 8006c10:	bfa8      	it	ge
 8006c12:	f8c8 3000 	strge.w	r3, [r8]
 8006c16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006c1a:	4b9f      	ldr	r3, [pc, #636]	; (8006e98 <_dtoa_r+0x2e8>)
 8006c1c:	bfb8      	it	lt
 8006c1e:	f8c8 2000 	strlt.w	r2, [r8]
 8006c22:	ea33 0309 	bics.w	r3, r3, r9
 8006c26:	d119      	bne.n	8006c5c <_dtoa_r+0xac>
 8006c28:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c34:	4333      	orrs	r3, r6
 8006c36:	f000 8580 	beq.w	800773a <_dtoa_r+0xb8a>
 8006c3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c3c:	b953      	cbnz	r3, 8006c54 <_dtoa_r+0xa4>
 8006c3e:	4b97      	ldr	r3, [pc, #604]	; (8006e9c <_dtoa_r+0x2ec>)
 8006c40:	e022      	b.n	8006c88 <_dtoa_r+0xd8>
 8006c42:	4b97      	ldr	r3, [pc, #604]	; (8006ea0 <_dtoa_r+0x2f0>)
 8006c44:	9308      	str	r3, [sp, #32]
 8006c46:	3308      	adds	r3, #8
 8006c48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	9808      	ldr	r0, [sp, #32]
 8006c4e:	b019      	add	sp, #100	; 0x64
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	4b91      	ldr	r3, [pc, #580]	; (8006e9c <_dtoa_r+0x2ec>)
 8006c56:	9308      	str	r3, [sp, #32]
 8006c58:	3303      	adds	r3, #3
 8006c5a:	e7f5      	b.n	8006c48 <_dtoa_r+0x98>
 8006c5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006c64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f7f9 fefc 	bl	8000a68 <__aeabi_dcmpeq>
 8006c70:	4680      	mov	r8, r0
 8006c72:	b158      	cbz	r0, 8006c8c <_dtoa_r+0xdc>
 8006c74:	2301      	movs	r3, #1
 8006c76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8559 	beq.w	8007734 <_dtoa_r+0xb84>
 8006c82:	4888      	ldr	r0, [pc, #544]	; (8006ea4 <_dtoa_r+0x2f4>)
 8006c84:	6018      	str	r0, [r3, #0]
 8006c86:	1e43      	subs	r3, r0, #1
 8006c88:	9308      	str	r3, [sp, #32]
 8006c8a:	e7df      	b.n	8006c4c <_dtoa_r+0x9c>
 8006c8c:	ab16      	add	r3, sp, #88	; 0x58
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	ab17      	add	r3, sp, #92	; 0x5c
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	4628      	mov	r0, r5
 8006c96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c9a:	f001 f8c5 	bl	8007e28 <__d2b>
 8006c9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006ca2:	4682      	mov	sl, r0
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	d07e      	beq.n	8006da6 <_dtoa_r+0x1f6>
 8006ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006cb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cb6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006cba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006cbe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	4b78      	ldr	r3, [pc, #480]	; (8006ea8 <_dtoa_r+0x2f8>)
 8006cc6:	f7f9 faaf 	bl	8000228 <__aeabi_dsub>
 8006cca:	a36b      	add	r3, pc, #428	; (adr r3, 8006e78 <_dtoa_r+0x2c8>)
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f7f9 fc62 	bl	8000598 <__aeabi_dmul>
 8006cd4:	a36a      	add	r3, pc, #424	; (adr r3, 8006e80 <_dtoa_r+0x2d0>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f7f9 faa7 	bl	800022c <__adddf3>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	460f      	mov	r7, r1
 8006ce4:	f7f9 fbee 	bl	80004c4 <__aeabi_i2d>
 8006ce8:	a367      	add	r3, pc, #412	; (adr r3, 8006e88 <_dtoa_r+0x2d8>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fc53 	bl	8000598 <__aeabi_dmul>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	f7f9 fa97 	bl	800022c <__adddf3>
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	f7f9 fef9 	bl	8000af8 <__aeabi_d2iz>
 8006d06:	2200      	movs	r2, #0
 8006d08:	4681      	mov	r9, r0
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 feb4 	bl	8000a7c <__aeabi_dcmplt>
 8006d14:	b148      	cbz	r0, 8006d2a <_dtoa_r+0x17a>
 8006d16:	4648      	mov	r0, r9
 8006d18:	f7f9 fbd4 	bl	80004c4 <__aeabi_i2d>
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	463b      	mov	r3, r7
 8006d20:	f7f9 fea2 	bl	8000a68 <__aeabi_dcmpeq>
 8006d24:	b908      	cbnz	r0, 8006d2a <_dtoa_r+0x17a>
 8006d26:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d2a:	f1b9 0f16 	cmp.w	r9, #22
 8006d2e:	d857      	bhi.n	8006de0 <_dtoa_r+0x230>
 8006d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d34:	4b5d      	ldr	r3, [pc, #372]	; (8006eac <_dtoa_r+0x2fc>)
 8006d36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 fe9d 	bl	8000a7c <__aeabi_dcmplt>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d04e      	beq.n	8006de4 <_dtoa_r+0x234>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d50:	1b1c      	subs	r4, r3, r4
 8006d52:	1e63      	subs	r3, r4, #1
 8006d54:	9309      	str	r3, [sp, #36]	; 0x24
 8006d56:	bf49      	itett	mi
 8006d58:	f1c4 0301 	rsbmi	r3, r4, #1
 8006d5c:	2300      	movpl	r3, #0
 8006d5e:	9306      	strmi	r3, [sp, #24]
 8006d60:	2300      	movmi	r3, #0
 8006d62:	bf54      	ite	pl
 8006d64:	9306      	strpl	r3, [sp, #24]
 8006d66:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006d68:	f1b9 0f00 	cmp.w	r9, #0
 8006d6c:	db3c      	blt.n	8006de8 <_dtoa_r+0x238>
 8006d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d70:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006d74:	444b      	add	r3, r9
 8006d76:	9309      	str	r3, [sp, #36]	; 0x24
 8006d78:	2300      	movs	r3, #0
 8006d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d7e:	2b09      	cmp	r3, #9
 8006d80:	d86c      	bhi.n	8006e5c <_dtoa_r+0x2ac>
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	bfc4      	itt	gt
 8006d86:	3b04      	subgt	r3, #4
 8006d88:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006d8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d8c:	bfc8      	it	gt
 8006d8e:	2400      	movgt	r4, #0
 8006d90:	f1a3 0302 	sub.w	r3, r3, #2
 8006d94:	bfd8      	it	le
 8006d96:	2401      	movle	r4, #1
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	f200 808b 	bhi.w	8006eb4 <_dtoa_r+0x304>
 8006d9e:	e8df f003 	tbb	[pc, r3]
 8006da2:	4f2d      	.short	0x4f2d
 8006da4:	5b4d      	.short	0x5b4d
 8006da6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006daa:	441c      	add	r4, r3
 8006dac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	bfc3      	ittte	gt
 8006db4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006db8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006dbc:	fa09 f303 	lslgt.w	r3, r9, r3
 8006dc0:	f1c3 0320 	rsble	r3, r3, #32
 8006dc4:	bfc6      	itte	gt
 8006dc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006dca:	4318      	orrgt	r0, r3
 8006dcc:	fa06 f003 	lslle.w	r0, r6, r3
 8006dd0:	f7f9 fb68 	bl	80004a4 <__aeabi_ui2d>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006dda:	3c01      	subs	r4, #1
 8006ddc:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dde:	e770      	b.n	8006cc2 <_dtoa_r+0x112>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e7b3      	b.n	8006d4c <_dtoa_r+0x19c>
 8006de4:	900f      	str	r0, [sp, #60]	; 0x3c
 8006de6:	e7b2      	b.n	8006d4e <_dtoa_r+0x19e>
 8006de8:	9b06      	ldr	r3, [sp, #24]
 8006dea:	eba3 0309 	sub.w	r3, r3, r9
 8006dee:	9306      	str	r3, [sp, #24]
 8006df0:	f1c9 0300 	rsb	r3, r9, #0
 8006df4:	930a      	str	r3, [sp, #40]	; 0x28
 8006df6:	2300      	movs	r3, #0
 8006df8:	930e      	str	r3, [sp, #56]	; 0x38
 8006dfa:	e7bf      	b.n	8006d7c <_dtoa_r+0x1cc>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	dc59      	bgt.n	8006eba <_dtoa_r+0x30a>
 8006e06:	f04f 0b01 	mov.w	fp, #1
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	f8cd b008 	str.w	fp, [sp, #8]
 8006e10:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006e14:	2200      	movs	r2, #0
 8006e16:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006e18:	6042      	str	r2, [r0, #4]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	f102 0614 	add.w	r6, r2, #20
 8006e20:	429e      	cmp	r6, r3
 8006e22:	6841      	ldr	r1, [r0, #4]
 8006e24:	d94f      	bls.n	8006ec6 <_dtoa_r+0x316>
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 fcd8 	bl	80077dc <_Balloc>
 8006e2c:	9008      	str	r0, [sp, #32]
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d14d      	bne.n	8006ece <_dtoa_r+0x31e>
 8006e32:	4602      	mov	r2, r0
 8006e34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e38:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <_dtoa_r+0x300>)
 8006e3a:	e6cd      	b.n	8006bd8 <_dtoa_r+0x28>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e7de      	b.n	8006dfe <_dtoa_r+0x24e>
 8006e40:	2300      	movs	r3, #0
 8006e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e46:	eb09 0b03 	add.w	fp, r9, r3
 8006e4a:	f10b 0301 	add.w	r3, fp, #1
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	9302      	str	r3, [sp, #8]
 8006e52:	bfb8      	it	lt
 8006e54:	2301      	movlt	r3, #1
 8006e56:	e7dd      	b.n	8006e14 <_dtoa_r+0x264>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e7f2      	b.n	8006e42 <_dtoa_r+0x292>
 8006e5c:	2401      	movs	r4, #1
 8006e5e:	2300      	movs	r3, #0
 8006e60:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e62:	9322      	str	r3, [sp, #136]	; 0x88
 8006e64:	f04f 3bff 	mov.w	fp, #4294967295
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2312      	movs	r3, #18
 8006e6c:	f8cd b008 	str.w	fp, [sp, #8]
 8006e70:	9223      	str	r2, [sp, #140]	; 0x8c
 8006e72:	e7cf      	b.n	8006e14 <_dtoa_r+0x264>
 8006e74:	f3af 8000 	nop.w
 8006e78:	636f4361 	.word	0x636f4361
 8006e7c:	3fd287a7 	.word	0x3fd287a7
 8006e80:	8b60c8b3 	.word	0x8b60c8b3
 8006e84:	3fc68a28 	.word	0x3fc68a28
 8006e88:	509f79fb 	.word	0x509f79fb
 8006e8c:	3fd34413 	.word	0x3fd34413
 8006e90:	0800921d 	.word	0x0800921d
 8006e94:	08009234 	.word	0x08009234
 8006e98:	7ff00000 	.word	0x7ff00000
 8006e9c:	08009219 	.word	0x08009219
 8006ea0:	08009210 	.word	0x08009210
 8006ea4:	080091ed 	.word	0x080091ed
 8006ea8:	3ff80000 	.word	0x3ff80000
 8006eac:	08009330 	.word	0x08009330
 8006eb0:	08009293 	.word	0x08009293
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb8:	e7d4      	b.n	8006e64 <_dtoa_r+0x2b4>
 8006eba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006ebe:	465b      	mov	r3, fp
 8006ec0:	f8cd b008 	str.w	fp, [sp, #8]
 8006ec4:	e7a6      	b.n	8006e14 <_dtoa_r+0x264>
 8006ec6:	3101      	adds	r1, #1
 8006ec8:	6041      	str	r1, [r0, #4]
 8006eca:	0052      	lsls	r2, r2, #1
 8006ecc:	e7a6      	b.n	8006e1c <_dtoa_r+0x26c>
 8006ece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ed0:	9a08      	ldr	r2, [sp, #32]
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	9b02      	ldr	r3, [sp, #8]
 8006ed6:	2b0e      	cmp	r3, #14
 8006ed8:	f200 80a8 	bhi.w	800702c <_dtoa_r+0x47c>
 8006edc:	2c00      	cmp	r4, #0
 8006ede:	f000 80a5 	beq.w	800702c <_dtoa_r+0x47c>
 8006ee2:	f1b9 0f00 	cmp.w	r9, #0
 8006ee6:	dd34      	ble.n	8006f52 <_dtoa_r+0x3a2>
 8006ee8:	4a9a      	ldr	r2, [pc, #616]	; (8007154 <_dtoa_r+0x5a4>)
 8006eea:	f009 030f 	and.w	r3, r9, #15
 8006eee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ef2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006ef6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006efa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006efe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006f02:	d016      	beq.n	8006f32 <_dtoa_r+0x382>
 8006f04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f08:	4b93      	ldr	r3, [pc, #588]	; (8007158 <_dtoa_r+0x5a8>)
 8006f0a:	2703      	movs	r7, #3
 8006f0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f10:	f7f9 fc6c 	bl	80007ec <__aeabi_ddiv>
 8006f14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f18:	f004 040f 	and.w	r4, r4, #15
 8006f1c:	4e8e      	ldr	r6, [pc, #568]	; (8007158 <_dtoa_r+0x5a8>)
 8006f1e:	b954      	cbnz	r4, 8006f36 <_dtoa_r+0x386>
 8006f20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f28:	f7f9 fc60 	bl	80007ec <__aeabi_ddiv>
 8006f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f30:	e029      	b.n	8006f86 <_dtoa_r+0x3d6>
 8006f32:	2702      	movs	r7, #2
 8006f34:	e7f2      	b.n	8006f1c <_dtoa_r+0x36c>
 8006f36:	07e1      	lsls	r1, r4, #31
 8006f38:	d508      	bpl.n	8006f4c <_dtoa_r+0x39c>
 8006f3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f42:	f7f9 fb29 	bl	8000598 <__aeabi_dmul>
 8006f46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f4a:	3701      	adds	r7, #1
 8006f4c:	1064      	asrs	r4, r4, #1
 8006f4e:	3608      	adds	r6, #8
 8006f50:	e7e5      	b.n	8006f1e <_dtoa_r+0x36e>
 8006f52:	f000 80a5 	beq.w	80070a0 <_dtoa_r+0x4f0>
 8006f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f5a:	f1c9 0400 	rsb	r4, r9, #0
 8006f5e:	4b7d      	ldr	r3, [pc, #500]	; (8007154 <_dtoa_r+0x5a4>)
 8006f60:	f004 020f 	and.w	r2, r4, #15
 8006f64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f7f9 fb14 	bl	8000598 <__aeabi_dmul>
 8006f70:	2702      	movs	r7, #2
 8006f72:	2300      	movs	r3, #0
 8006f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f78:	4e77      	ldr	r6, [pc, #476]	; (8007158 <_dtoa_r+0x5a8>)
 8006f7a:	1124      	asrs	r4, r4, #4
 8006f7c:	2c00      	cmp	r4, #0
 8006f7e:	f040 8084 	bne.w	800708a <_dtoa_r+0x4da>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1d2      	bne.n	8006f2c <_dtoa_r+0x37c>
 8006f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 808b 	beq.w	80070a4 <_dtoa_r+0x4f4>
 8006f8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	4b6f      	ldr	r3, [pc, #444]	; (800715c <_dtoa_r+0x5ac>)
 8006f9e:	f7f9 fd6d 	bl	8000a7c <__aeabi_dcmplt>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d07e      	beq.n	80070a4 <_dtoa_r+0x4f4>
 8006fa6:	9b02      	ldr	r3, [sp, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d07b      	beq.n	80070a4 <_dtoa_r+0x4f4>
 8006fac:	f1bb 0f00 	cmp.w	fp, #0
 8006fb0:	dd38      	ble.n	8007024 <_dtoa_r+0x474>
 8006fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4b69      	ldr	r3, [pc, #420]	; (8007160 <_dtoa_r+0x5b0>)
 8006fba:	f7f9 faed 	bl	8000598 <__aeabi_dmul>
 8006fbe:	465c      	mov	r4, fp
 8006fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fc4:	f109 38ff 	add.w	r8, r9, #4294967295
 8006fc8:	3701      	adds	r7, #1
 8006fca:	4638      	mov	r0, r7
 8006fcc:	f7f9 fa7a 	bl	80004c4 <__aeabi_i2d>
 8006fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fd4:	f7f9 fae0 	bl	8000598 <__aeabi_dmul>
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4b62      	ldr	r3, [pc, #392]	; (8007164 <_dtoa_r+0x5b4>)
 8006fdc:	f7f9 f926 	bl	800022c <__adddf3>
 8006fe0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006fe4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fe8:	9611      	str	r6, [sp, #68]	; 0x44
 8006fea:	2c00      	cmp	r4, #0
 8006fec:	d15d      	bne.n	80070aa <_dtoa_r+0x4fa>
 8006fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4b5c      	ldr	r3, [pc, #368]	; (8007168 <_dtoa_r+0x5b8>)
 8006ff6:	f7f9 f917 	bl	8000228 <__aeabi_dsub>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007002:	4633      	mov	r3, r6
 8007004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007006:	f7f9 fd57 	bl	8000ab8 <__aeabi_dcmpgt>
 800700a:	2800      	cmp	r0, #0
 800700c:	f040 829e 	bne.w	800754c <_dtoa_r+0x99c>
 8007010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007016:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800701a:	f7f9 fd2f 	bl	8000a7c <__aeabi_dcmplt>
 800701e:	2800      	cmp	r0, #0
 8007020:	f040 8292 	bne.w	8007548 <_dtoa_r+0x998>
 8007024:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007028:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800702c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800702e:	2b00      	cmp	r3, #0
 8007030:	f2c0 8153 	blt.w	80072da <_dtoa_r+0x72a>
 8007034:	f1b9 0f0e 	cmp.w	r9, #14
 8007038:	f300 814f 	bgt.w	80072da <_dtoa_r+0x72a>
 800703c:	4b45      	ldr	r3, [pc, #276]	; (8007154 <_dtoa_r+0x5a4>)
 800703e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007042:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007046:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800704a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800704c:	2b00      	cmp	r3, #0
 800704e:	f280 80db 	bge.w	8007208 <_dtoa_r+0x658>
 8007052:	9b02      	ldr	r3, [sp, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f300 80d7 	bgt.w	8007208 <_dtoa_r+0x658>
 800705a:	f040 8274 	bne.w	8007546 <_dtoa_r+0x996>
 800705e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007062:	2200      	movs	r2, #0
 8007064:	4b40      	ldr	r3, [pc, #256]	; (8007168 <_dtoa_r+0x5b8>)
 8007066:	f7f9 fa97 	bl	8000598 <__aeabi_dmul>
 800706a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800706e:	f7f9 fd19 	bl	8000aa4 <__aeabi_dcmpge>
 8007072:	9c02      	ldr	r4, [sp, #8]
 8007074:	4626      	mov	r6, r4
 8007076:	2800      	cmp	r0, #0
 8007078:	f040 824a 	bne.w	8007510 <_dtoa_r+0x960>
 800707c:	2331      	movs	r3, #49	; 0x31
 800707e:	9f08      	ldr	r7, [sp, #32]
 8007080:	f109 0901 	add.w	r9, r9, #1
 8007084:	f807 3b01 	strb.w	r3, [r7], #1
 8007088:	e246      	b.n	8007518 <_dtoa_r+0x968>
 800708a:	07e2      	lsls	r2, r4, #31
 800708c:	d505      	bpl.n	800709a <_dtoa_r+0x4ea>
 800708e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007092:	f7f9 fa81 	bl	8000598 <__aeabi_dmul>
 8007096:	2301      	movs	r3, #1
 8007098:	3701      	adds	r7, #1
 800709a:	1064      	asrs	r4, r4, #1
 800709c:	3608      	adds	r6, #8
 800709e:	e76d      	b.n	8006f7c <_dtoa_r+0x3cc>
 80070a0:	2702      	movs	r7, #2
 80070a2:	e770      	b.n	8006f86 <_dtoa_r+0x3d6>
 80070a4:	46c8      	mov	r8, r9
 80070a6:	9c02      	ldr	r4, [sp, #8]
 80070a8:	e78f      	b.n	8006fca <_dtoa_r+0x41a>
 80070aa:	9908      	ldr	r1, [sp, #32]
 80070ac:	4b29      	ldr	r3, [pc, #164]	; (8007154 <_dtoa_r+0x5a4>)
 80070ae:	4421      	add	r1, r4
 80070b0:	9112      	str	r1, [sp, #72]	; 0x48
 80070b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80070bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070c0:	2900      	cmp	r1, #0
 80070c2:	d055      	beq.n	8007170 <_dtoa_r+0x5c0>
 80070c4:	2000      	movs	r0, #0
 80070c6:	4929      	ldr	r1, [pc, #164]	; (800716c <_dtoa_r+0x5bc>)
 80070c8:	f7f9 fb90 	bl	80007ec <__aeabi_ddiv>
 80070cc:	463b      	mov	r3, r7
 80070ce:	4632      	mov	r2, r6
 80070d0:	f7f9 f8aa 	bl	8000228 <__aeabi_dsub>
 80070d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070d8:	9f08      	ldr	r7, [sp, #32]
 80070da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070de:	f7f9 fd0b 	bl	8000af8 <__aeabi_d2iz>
 80070e2:	4604      	mov	r4, r0
 80070e4:	f7f9 f9ee 	bl	80004c4 <__aeabi_i2d>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070f0:	f7f9 f89a 	bl	8000228 <__aeabi_dsub>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	3430      	adds	r4, #48	; 0x30
 80070fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007102:	f807 4b01 	strb.w	r4, [r7], #1
 8007106:	f7f9 fcb9 	bl	8000a7c <__aeabi_dcmplt>
 800710a:	2800      	cmp	r0, #0
 800710c:	d174      	bne.n	80071f8 <_dtoa_r+0x648>
 800710e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007112:	2000      	movs	r0, #0
 8007114:	4911      	ldr	r1, [pc, #68]	; (800715c <_dtoa_r+0x5ac>)
 8007116:	f7f9 f887 	bl	8000228 <__aeabi_dsub>
 800711a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800711e:	f7f9 fcad 	bl	8000a7c <__aeabi_dcmplt>
 8007122:	2800      	cmp	r0, #0
 8007124:	f040 80b6 	bne.w	8007294 <_dtoa_r+0x6e4>
 8007128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800712a:	429f      	cmp	r7, r3
 800712c:	f43f af7a 	beq.w	8007024 <_dtoa_r+0x474>
 8007130:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007134:	2200      	movs	r2, #0
 8007136:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <_dtoa_r+0x5b0>)
 8007138:	f7f9 fa2e 	bl	8000598 <__aeabi_dmul>
 800713c:	2200      	movs	r2, #0
 800713e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007146:	4b06      	ldr	r3, [pc, #24]	; (8007160 <_dtoa_r+0x5b0>)
 8007148:	f7f9 fa26 	bl	8000598 <__aeabi_dmul>
 800714c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007150:	e7c3      	b.n	80070da <_dtoa_r+0x52a>
 8007152:	bf00      	nop
 8007154:	08009330 	.word	0x08009330
 8007158:	08009308 	.word	0x08009308
 800715c:	3ff00000 	.word	0x3ff00000
 8007160:	40240000 	.word	0x40240000
 8007164:	401c0000 	.word	0x401c0000
 8007168:	40140000 	.word	0x40140000
 800716c:	3fe00000 	.word	0x3fe00000
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fa10 	bl	8000598 <__aeabi_dmul>
 8007178:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800717a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800717e:	9c08      	ldr	r4, [sp, #32]
 8007180:	9314      	str	r3, [sp, #80]	; 0x50
 8007182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007186:	f7f9 fcb7 	bl	8000af8 <__aeabi_d2iz>
 800718a:	9015      	str	r0, [sp, #84]	; 0x54
 800718c:	f7f9 f99a 	bl	80004c4 <__aeabi_i2d>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007198:	f7f9 f846 	bl	8000228 <__aeabi_dsub>
 800719c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800719e:	4606      	mov	r6, r0
 80071a0:	3330      	adds	r3, #48	; 0x30
 80071a2:	f804 3b01 	strb.w	r3, [r4], #1
 80071a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071a8:	460f      	mov	r7, r1
 80071aa:	429c      	cmp	r4, r3
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	d124      	bne.n	80071fc <_dtoa_r+0x64c>
 80071b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071b6:	4bb3      	ldr	r3, [pc, #716]	; (8007484 <_dtoa_r+0x8d4>)
 80071b8:	f7f9 f838 	bl	800022c <__adddf3>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	f7f9 fc78 	bl	8000ab8 <__aeabi_dcmpgt>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d162      	bne.n	8007292 <_dtoa_r+0x6e2>
 80071cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071d0:	2000      	movs	r0, #0
 80071d2:	49ac      	ldr	r1, [pc, #688]	; (8007484 <_dtoa_r+0x8d4>)
 80071d4:	f7f9 f828 	bl	8000228 <__aeabi_dsub>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f9 fc4c 	bl	8000a7c <__aeabi_dcmplt>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	f43f af1d 	beq.w	8007024 <_dtoa_r+0x474>
 80071ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80071ec:	1e7b      	subs	r3, r7, #1
 80071ee:	9314      	str	r3, [sp, #80]	; 0x50
 80071f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80071f4:	2b30      	cmp	r3, #48	; 0x30
 80071f6:	d0f8      	beq.n	80071ea <_dtoa_r+0x63a>
 80071f8:	46c1      	mov	r9, r8
 80071fa:	e03a      	b.n	8007272 <_dtoa_r+0x6c2>
 80071fc:	4ba2      	ldr	r3, [pc, #648]	; (8007488 <_dtoa_r+0x8d8>)
 80071fe:	f7f9 f9cb 	bl	8000598 <__aeabi_dmul>
 8007202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007206:	e7bc      	b.n	8007182 <_dtoa_r+0x5d2>
 8007208:	9f08      	ldr	r7, [sp, #32]
 800720a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800720e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007212:	f7f9 faeb 	bl	80007ec <__aeabi_ddiv>
 8007216:	f7f9 fc6f 	bl	8000af8 <__aeabi_d2iz>
 800721a:	4604      	mov	r4, r0
 800721c:	f7f9 f952 	bl	80004c4 <__aeabi_i2d>
 8007220:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007224:	f7f9 f9b8 	bl	8000598 <__aeabi_dmul>
 8007228:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800722c:	460b      	mov	r3, r1
 800722e:	4602      	mov	r2, r0
 8007230:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007234:	f7f8 fff8 	bl	8000228 <__aeabi_dsub>
 8007238:	f807 6b01 	strb.w	r6, [r7], #1
 800723c:	9e08      	ldr	r6, [sp, #32]
 800723e:	9b02      	ldr	r3, [sp, #8]
 8007240:	1bbe      	subs	r6, r7, r6
 8007242:	42b3      	cmp	r3, r6
 8007244:	d13a      	bne.n	80072bc <_dtoa_r+0x70c>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	f7f8 ffef 	bl	800022c <__adddf3>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800725a:	f7f9 fc2d 	bl	8000ab8 <__aeabi_dcmpgt>
 800725e:	bb58      	cbnz	r0, 80072b8 <_dtoa_r+0x708>
 8007260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007268:	f7f9 fbfe 	bl	8000a68 <__aeabi_dcmpeq>
 800726c:	b108      	cbz	r0, 8007272 <_dtoa_r+0x6c2>
 800726e:	07e1      	lsls	r1, r4, #31
 8007270:	d422      	bmi.n	80072b8 <_dtoa_r+0x708>
 8007272:	4628      	mov	r0, r5
 8007274:	4651      	mov	r1, sl
 8007276:	f000 faf1 	bl	800785c <_Bfree>
 800727a:	2300      	movs	r3, #0
 800727c:	703b      	strb	r3, [r7, #0]
 800727e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007280:	f109 0001 	add.w	r0, r9, #1
 8007284:	6018      	str	r0, [r3, #0]
 8007286:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007288:	2b00      	cmp	r3, #0
 800728a:	f43f acdf 	beq.w	8006c4c <_dtoa_r+0x9c>
 800728e:	601f      	str	r7, [r3, #0]
 8007290:	e4dc      	b.n	8006c4c <_dtoa_r+0x9c>
 8007292:	4627      	mov	r7, r4
 8007294:	463b      	mov	r3, r7
 8007296:	461f      	mov	r7, r3
 8007298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800729c:	2a39      	cmp	r2, #57	; 0x39
 800729e:	d107      	bne.n	80072b0 <_dtoa_r+0x700>
 80072a0:	9a08      	ldr	r2, [sp, #32]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d1f7      	bne.n	8007296 <_dtoa_r+0x6e6>
 80072a6:	2230      	movs	r2, #48	; 0x30
 80072a8:	9908      	ldr	r1, [sp, #32]
 80072aa:	f108 0801 	add.w	r8, r8, #1
 80072ae:	700a      	strb	r2, [r1, #0]
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	3201      	adds	r2, #1
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	e79f      	b.n	80071f8 <_dtoa_r+0x648>
 80072b8:	46c8      	mov	r8, r9
 80072ba:	e7eb      	b.n	8007294 <_dtoa_r+0x6e4>
 80072bc:	2200      	movs	r2, #0
 80072be:	4b72      	ldr	r3, [pc, #456]	; (8007488 <_dtoa_r+0x8d8>)
 80072c0:	f7f9 f96a 	bl	8000598 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2300      	movs	r3, #0
 80072d0:	f7f9 fbca 	bl	8000a68 <__aeabi_dcmpeq>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d098      	beq.n	800720a <_dtoa_r+0x65a>
 80072d8:	e7cb      	b.n	8007272 <_dtoa_r+0x6c2>
 80072da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f000 80cd 	beq.w	800747c <_dtoa_r+0x8cc>
 80072e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80072e4:	2a01      	cmp	r2, #1
 80072e6:	f300 80af 	bgt.w	8007448 <_dtoa_r+0x898>
 80072ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	f000 80a7 	beq.w	8007440 <_dtoa_r+0x890>
 80072f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072f8:	9f06      	ldr	r7, [sp, #24]
 80072fa:	9a06      	ldr	r2, [sp, #24]
 80072fc:	2101      	movs	r1, #1
 80072fe:	441a      	add	r2, r3
 8007300:	9206      	str	r2, [sp, #24]
 8007302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007304:	4628      	mov	r0, r5
 8007306:	441a      	add	r2, r3
 8007308:	9209      	str	r2, [sp, #36]	; 0x24
 800730a:	f000 fb61 	bl	80079d0 <__i2b>
 800730e:	4606      	mov	r6, r0
 8007310:	2f00      	cmp	r7, #0
 8007312:	dd0c      	ble.n	800732e <_dtoa_r+0x77e>
 8007314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007316:	2b00      	cmp	r3, #0
 8007318:	dd09      	ble.n	800732e <_dtoa_r+0x77e>
 800731a:	42bb      	cmp	r3, r7
 800731c:	bfa8      	it	ge
 800731e:	463b      	movge	r3, r7
 8007320:	9a06      	ldr	r2, [sp, #24]
 8007322:	1aff      	subs	r7, r7, r3
 8007324:	1ad2      	subs	r2, r2, r3
 8007326:	9206      	str	r2, [sp, #24]
 8007328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	9309      	str	r3, [sp, #36]	; 0x24
 800732e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007330:	b1f3      	cbz	r3, 8007370 <_dtoa_r+0x7c0>
 8007332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80a9 	beq.w	800748c <_dtoa_r+0x8dc>
 800733a:	2c00      	cmp	r4, #0
 800733c:	dd10      	ble.n	8007360 <_dtoa_r+0x7b0>
 800733e:	4631      	mov	r1, r6
 8007340:	4622      	mov	r2, r4
 8007342:	4628      	mov	r0, r5
 8007344:	f000 fbfe 	bl	8007b44 <__pow5mult>
 8007348:	4652      	mov	r2, sl
 800734a:	4601      	mov	r1, r0
 800734c:	4606      	mov	r6, r0
 800734e:	4628      	mov	r0, r5
 8007350:	f000 fb54 	bl	80079fc <__multiply>
 8007354:	4680      	mov	r8, r0
 8007356:	4651      	mov	r1, sl
 8007358:	4628      	mov	r0, r5
 800735a:	f000 fa7f 	bl	800785c <_Bfree>
 800735e:	46c2      	mov	sl, r8
 8007360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007362:	1b1a      	subs	r2, r3, r4
 8007364:	d004      	beq.n	8007370 <_dtoa_r+0x7c0>
 8007366:	4651      	mov	r1, sl
 8007368:	4628      	mov	r0, r5
 800736a:	f000 fbeb 	bl	8007b44 <__pow5mult>
 800736e:	4682      	mov	sl, r0
 8007370:	2101      	movs	r1, #1
 8007372:	4628      	mov	r0, r5
 8007374:	f000 fb2c 	bl	80079d0 <__i2b>
 8007378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800737a:	4604      	mov	r4, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	f340 8087 	ble.w	8007490 <_dtoa_r+0x8e0>
 8007382:	461a      	mov	r2, r3
 8007384:	4601      	mov	r1, r0
 8007386:	4628      	mov	r0, r5
 8007388:	f000 fbdc 	bl	8007b44 <__pow5mult>
 800738c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800738e:	4604      	mov	r4, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	f340 8080 	ble.w	8007496 <_dtoa_r+0x8e6>
 8007396:	f04f 0800 	mov.w	r8, #0
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073a0:	6918      	ldr	r0, [r3, #16]
 80073a2:	f000 fac7 	bl	8007934 <__hi0bits>
 80073a6:	f1c0 0020 	rsb	r0, r0, #32
 80073aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ac:	4418      	add	r0, r3
 80073ae:	f010 001f 	ands.w	r0, r0, #31
 80073b2:	f000 8092 	beq.w	80074da <_dtoa_r+0x92a>
 80073b6:	f1c0 0320 	rsb	r3, r0, #32
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	f340 808a 	ble.w	80074d4 <_dtoa_r+0x924>
 80073c0:	f1c0 001c 	rsb	r0, r0, #28
 80073c4:	9b06      	ldr	r3, [sp, #24]
 80073c6:	4407      	add	r7, r0
 80073c8:	4403      	add	r3, r0
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ce:	4403      	add	r3, r0
 80073d0:	9309      	str	r3, [sp, #36]	; 0x24
 80073d2:	9b06      	ldr	r3, [sp, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dd05      	ble.n	80073e4 <_dtoa_r+0x834>
 80073d8:	4651      	mov	r1, sl
 80073da:	461a      	mov	r2, r3
 80073dc:	4628      	mov	r0, r5
 80073de:	f000 fc0b 	bl	8007bf8 <__lshift>
 80073e2:	4682      	mov	sl, r0
 80073e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dd05      	ble.n	80073f6 <_dtoa_r+0x846>
 80073ea:	4621      	mov	r1, r4
 80073ec:	461a      	mov	r2, r3
 80073ee:	4628      	mov	r0, r5
 80073f0:	f000 fc02 	bl	8007bf8 <__lshift>
 80073f4:	4604      	mov	r4, r0
 80073f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d070      	beq.n	80074de <_dtoa_r+0x92e>
 80073fc:	4621      	mov	r1, r4
 80073fe:	4650      	mov	r0, sl
 8007400:	f000 fc66 	bl	8007cd0 <__mcmp>
 8007404:	2800      	cmp	r0, #0
 8007406:	da6a      	bge.n	80074de <_dtoa_r+0x92e>
 8007408:	2300      	movs	r3, #0
 800740a:	4651      	mov	r1, sl
 800740c:	220a      	movs	r2, #10
 800740e:	4628      	mov	r0, r5
 8007410:	f000 fa46 	bl	80078a0 <__multadd>
 8007414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007416:	4682      	mov	sl, r0
 8007418:	f109 39ff 	add.w	r9, r9, #4294967295
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8193 	beq.w	8007748 <_dtoa_r+0xb98>
 8007422:	4631      	mov	r1, r6
 8007424:	2300      	movs	r3, #0
 8007426:	220a      	movs	r2, #10
 8007428:	4628      	mov	r0, r5
 800742a:	f000 fa39 	bl	80078a0 <__multadd>
 800742e:	f1bb 0f00 	cmp.w	fp, #0
 8007432:	4606      	mov	r6, r0
 8007434:	f300 8093 	bgt.w	800755e <_dtoa_r+0x9ae>
 8007438:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800743a:	2b02      	cmp	r3, #2
 800743c:	dc57      	bgt.n	80074ee <_dtoa_r+0x93e>
 800743e:	e08e      	b.n	800755e <_dtoa_r+0x9ae>
 8007440:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007442:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007446:	e756      	b.n	80072f6 <_dtoa_r+0x746>
 8007448:	9b02      	ldr	r3, [sp, #8]
 800744a:	1e5c      	subs	r4, r3, #1
 800744c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744e:	42a3      	cmp	r3, r4
 8007450:	bfb7      	itett	lt
 8007452:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007454:	1b1c      	subge	r4, r3, r4
 8007456:	1ae2      	sublt	r2, r4, r3
 8007458:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800745a:	bfbe      	ittt	lt
 800745c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800745e:	189b      	addlt	r3, r3, r2
 8007460:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007462:	9b02      	ldr	r3, [sp, #8]
 8007464:	bfb8      	it	lt
 8007466:	2400      	movlt	r4, #0
 8007468:	2b00      	cmp	r3, #0
 800746a:	bfbb      	ittet	lt
 800746c:	9b06      	ldrlt	r3, [sp, #24]
 800746e:	9a02      	ldrlt	r2, [sp, #8]
 8007470:	9f06      	ldrge	r7, [sp, #24]
 8007472:	1a9f      	sublt	r7, r3, r2
 8007474:	bfac      	ite	ge
 8007476:	9b02      	ldrge	r3, [sp, #8]
 8007478:	2300      	movlt	r3, #0
 800747a:	e73e      	b.n	80072fa <_dtoa_r+0x74a>
 800747c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800747e:	9f06      	ldr	r7, [sp, #24]
 8007480:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007482:	e745      	b.n	8007310 <_dtoa_r+0x760>
 8007484:	3fe00000 	.word	0x3fe00000
 8007488:	40240000 	.word	0x40240000
 800748c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800748e:	e76a      	b.n	8007366 <_dtoa_r+0x7b6>
 8007490:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007492:	2b01      	cmp	r3, #1
 8007494:	dc19      	bgt.n	80074ca <_dtoa_r+0x91a>
 8007496:	9b04      	ldr	r3, [sp, #16]
 8007498:	b9bb      	cbnz	r3, 80074ca <_dtoa_r+0x91a>
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074a0:	b99b      	cbnz	r3, 80074ca <_dtoa_r+0x91a>
 80074a2:	9b05      	ldr	r3, [sp, #20]
 80074a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074a8:	0d1b      	lsrs	r3, r3, #20
 80074aa:	051b      	lsls	r3, r3, #20
 80074ac:	b183      	cbz	r3, 80074d0 <_dtoa_r+0x920>
 80074ae:	f04f 0801 	mov.w	r8, #1
 80074b2:	9b06      	ldr	r3, [sp, #24]
 80074b4:	3301      	adds	r3, #1
 80074b6:	9306      	str	r3, [sp, #24]
 80074b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ba:	3301      	adds	r3, #1
 80074bc:	9309      	str	r3, [sp, #36]	; 0x24
 80074be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f47f af6a 	bne.w	800739a <_dtoa_r+0x7ea>
 80074c6:	2001      	movs	r0, #1
 80074c8:	e76f      	b.n	80073aa <_dtoa_r+0x7fa>
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	e7f6      	b.n	80074be <_dtoa_r+0x90e>
 80074d0:	4698      	mov	r8, r3
 80074d2:	e7f4      	b.n	80074be <_dtoa_r+0x90e>
 80074d4:	f43f af7d 	beq.w	80073d2 <_dtoa_r+0x822>
 80074d8:	4618      	mov	r0, r3
 80074da:	301c      	adds	r0, #28
 80074dc:	e772      	b.n	80073c4 <_dtoa_r+0x814>
 80074de:	9b02      	ldr	r3, [sp, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	dc36      	bgt.n	8007552 <_dtoa_r+0x9a2>
 80074e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	dd33      	ble.n	8007552 <_dtoa_r+0x9a2>
 80074ea:	f8dd b008 	ldr.w	fp, [sp, #8]
 80074ee:	f1bb 0f00 	cmp.w	fp, #0
 80074f2:	d10d      	bne.n	8007510 <_dtoa_r+0x960>
 80074f4:	4621      	mov	r1, r4
 80074f6:	465b      	mov	r3, fp
 80074f8:	2205      	movs	r2, #5
 80074fa:	4628      	mov	r0, r5
 80074fc:	f000 f9d0 	bl	80078a0 <__multadd>
 8007500:	4601      	mov	r1, r0
 8007502:	4604      	mov	r4, r0
 8007504:	4650      	mov	r0, sl
 8007506:	f000 fbe3 	bl	8007cd0 <__mcmp>
 800750a:	2800      	cmp	r0, #0
 800750c:	f73f adb6 	bgt.w	800707c <_dtoa_r+0x4cc>
 8007510:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007512:	9f08      	ldr	r7, [sp, #32]
 8007514:	ea6f 0903 	mvn.w	r9, r3
 8007518:	f04f 0800 	mov.w	r8, #0
 800751c:	4621      	mov	r1, r4
 800751e:	4628      	mov	r0, r5
 8007520:	f000 f99c 	bl	800785c <_Bfree>
 8007524:	2e00      	cmp	r6, #0
 8007526:	f43f aea4 	beq.w	8007272 <_dtoa_r+0x6c2>
 800752a:	f1b8 0f00 	cmp.w	r8, #0
 800752e:	d005      	beq.n	800753c <_dtoa_r+0x98c>
 8007530:	45b0      	cmp	r8, r6
 8007532:	d003      	beq.n	800753c <_dtoa_r+0x98c>
 8007534:	4641      	mov	r1, r8
 8007536:	4628      	mov	r0, r5
 8007538:	f000 f990 	bl	800785c <_Bfree>
 800753c:	4631      	mov	r1, r6
 800753e:	4628      	mov	r0, r5
 8007540:	f000 f98c 	bl	800785c <_Bfree>
 8007544:	e695      	b.n	8007272 <_dtoa_r+0x6c2>
 8007546:	2400      	movs	r4, #0
 8007548:	4626      	mov	r6, r4
 800754a:	e7e1      	b.n	8007510 <_dtoa_r+0x960>
 800754c:	46c1      	mov	r9, r8
 800754e:	4626      	mov	r6, r4
 8007550:	e594      	b.n	800707c <_dtoa_r+0x4cc>
 8007552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007554:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 80fc 	beq.w	8007756 <_dtoa_r+0xba6>
 800755e:	2f00      	cmp	r7, #0
 8007560:	dd05      	ble.n	800756e <_dtoa_r+0x9be>
 8007562:	4631      	mov	r1, r6
 8007564:	463a      	mov	r2, r7
 8007566:	4628      	mov	r0, r5
 8007568:	f000 fb46 	bl	8007bf8 <__lshift>
 800756c:	4606      	mov	r6, r0
 800756e:	f1b8 0f00 	cmp.w	r8, #0
 8007572:	d05c      	beq.n	800762e <_dtoa_r+0xa7e>
 8007574:	4628      	mov	r0, r5
 8007576:	6871      	ldr	r1, [r6, #4]
 8007578:	f000 f930 	bl	80077dc <_Balloc>
 800757c:	4607      	mov	r7, r0
 800757e:	b928      	cbnz	r0, 800758c <_dtoa_r+0x9dc>
 8007580:	4602      	mov	r2, r0
 8007582:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007586:	4b7e      	ldr	r3, [pc, #504]	; (8007780 <_dtoa_r+0xbd0>)
 8007588:	f7ff bb26 	b.w	8006bd8 <_dtoa_r+0x28>
 800758c:	6932      	ldr	r2, [r6, #16]
 800758e:	f106 010c 	add.w	r1, r6, #12
 8007592:	3202      	adds	r2, #2
 8007594:	0092      	lsls	r2, r2, #2
 8007596:	300c      	adds	r0, #12
 8007598:	f000 f912 	bl	80077c0 <memcpy>
 800759c:	2201      	movs	r2, #1
 800759e:	4639      	mov	r1, r7
 80075a0:	4628      	mov	r0, r5
 80075a2:	f000 fb29 	bl	8007bf8 <__lshift>
 80075a6:	46b0      	mov	r8, r6
 80075a8:	4606      	mov	r6, r0
 80075aa:	9b08      	ldr	r3, [sp, #32]
 80075ac:	3301      	adds	r3, #1
 80075ae:	9302      	str	r3, [sp, #8]
 80075b0:	9b08      	ldr	r3, [sp, #32]
 80075b2:	445b      	add	r3, fp
 80075b4:	930a      	str	r3, [sp, #40]	; 0x28
 80075b6:	9b04      	ldr	r3, [sp, #16]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	9309      	str	r3, [sp, #36]	; 0x24
 80075be:	9b02      	ldr	r3, [sp, #8]
 80075c0:	4621      	mov	r1, r4
 80075c2:	4650      	mov	r0, sl
 80075c4:	f103 3bff 	add.w	fp, r3, #4294967295
 80075c8:	f7ff fa62 	bl	8006a90 <quorem>
 80075cc:	4603      	mov	r3, r0
 80075ce:	4641      	mov	r1, r8
 80075d0:	3330      	adds	r3, #48	; 0x30
 80075d2:	9004      	str	r0, [sp, #16]
 80075d4:	4650      	mov	r0, sl
 80075d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d8:	f000 fb7a 	bl	8007cd0 <__mcmp>
 80075dc:	4632      	mov	r2, r6
 80075de:	9006      	str	r0, [sp, #24]
 80075e0:	4621      	mov	r1, r4
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 fb90 	bl	8007d08 <__mdiff>
 80075e8:	68c2      	ldr	r2, [r0, #12]
 80075ea:	4607      	mov	r7, r0
 80075ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ee:	bb02      	cbnz	r2, 8007632 <_dtoa_r+0xa82>
 80075f0:	4601      	mov	r1, r0
 80075f2:	4650      	mov	r0, sl
 80075f4:	f000 fb6c 	bl	8007cd0 <__mcmp>
 80075f8:	4602      	mov	r2, r0
 80075fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075fc:	4639      	mov	r1, r7
 80075fe:	4628      	mov	r0, r5
 8007600:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007604:	f000 f92a 	bl	800785c <_Bfree>
 8007608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800760a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800760c:	9f02      	ldr	r7, [sp, #8]
 800760e:	ea43 0102 	orr.w	r1, r3, r2
 8007612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007614:	430b      	orrs	r3, r1
 8007616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007618:	d10d      	bne.n	8007636 <_dtoa_r+0xa86>
 800761a:	2b39      	cmp	r3, #57	; 0x39
 800761c:	d027      	beq.n	800766e <_dtoa_r+0xabe>
 800761e:	9a06      	ldr	r2, [sp, #24]
 8007620:	2a00      	cmp	r2, #0
 8007622:	dd01      	ble.n	8007628 <_dtoa_r+0xa78>
 8007624:	9b04      	ldr	r3, [sp, #16]
 8007626:	3331      	adds	r3, #49	; 0x31
 8007628:	f88b 3000 	strb.w	r3, [fp]
 800762c:	e776      	b.n	800751c <_dtoa_r+0x96c>
 800762e:	4630      	mov	r0, r6
 8007630:	e7b9      	b.n	80075a6 <_dtoa_r+0x9f6>
 8007632:	2201      	movs	r2, #1
 8007634:	e7e2      	b.n	80075fc <_dtoa_r+0xa4c>
 8007636:	9906      	ldr	r1, [sp, #24]
 8007638:	2900      	cmp	r1, #0
 800763a:	db04      	blt.n	8007646 <_dtoa_r+0xa96>
 800763c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800763e:	4301      	orrs	r1, r0
 8007640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007642:	4301      	orrs	r1, r0
 8007644:	d120      	bne.n	8007688 <_dtoa_r+0xad8>
 8007646:	2a00      	cmp	r2, #0
 8007648:	ddee      	ble.n	8007628 <_dtoa_r+0xa78>
 800764a:	4651      	mov	r1, sl
 800764c:	2201      	movs	r2, #1
 800764e:	4628      	mov	r0, r5
 8007650:	9302      	str	r3, [sp, #8]
 8007652:	f000 fad1 	bl	8007bf8 <__lshift>
 8007656:	4621      	mov	r1, r4
 8007658:	4682      	mov	sl, r0
 800765a:	f000 fb39 	bl	8007cd0 <__mcmp>
 800765e:	2800      	cmp	r0, #0
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	dc02      	bgt.n	800766a <_dtoa_r+0xaba>
 8007664:	d1e0      	bne.n	8007628 <_dtoa_r+0xa78>
 8007666:	07da      	lsls	r2, r3, #31
 8007668:	d5de      	bpl.n	8007628 <_dtoa_r+0xa78>
 800766a:	2b39      	cmp	r3, #57	; 0x39
 800766c:	d1da      	bne.n	8007624 <_dtoa_r+0xa74>
 800766e:	2339      	movs	r3, #57	; 0x39
 8007670:	f88b 3000 	strb.w	r3, [fp]
 8007674:	463b      	mov	r3, r7
 8007676:	461f      	mov	r7, r3
 8007678:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800767c:	3b01      	subs	r3, #1
 800767e:	2a39      	cmp	r2, #57	; 0x39
 8007680:	d050      	beq.n	8007724 <_dtoa_r+0xb74>
 8007682:	3201      	adds	r2, #1
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	e749      	b.n	800751c <_dtoa_r+0x96c>
 8007688:	2a00      	cmp	r2, #0
 800768a:	dd03      	ble.n	8007694 <_dtoa_r+0xae4>
 800768c:	2b39      	cmp	r3, #57	; 0x39
 800768e:	d0ee      	beq.n	800766e <_dtoa_r+0xabe>
 8007690:	3301      	adds	r3, #1
 8007692:	e7c9      	b.n	8007628 <_dtoa_r+0xa78>
 8007694:	9a02      	ldr	r2, [sp, #8]
 8007696:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007698:	f802 3c01 	strb.w	r3, [r2, #-1]
 800769c:	428a      	cmp	r2, r1
 800769e:	d02a      	beq.n	80076f6 <_dtoa_r+0xb46>
 80076a0:	4651      	mov	r1, sl
 80076a2:	2300      	movs	r3, #0
 80076a4:	220a      	movs	r2, #10
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 f8fa 	bl	80078a0 <__multadd>
 80076ac:	45b0      	cmp	r8, r6
 80076ae:	4682      	mov	sl, r0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	f04f 020a 	mov.w	r2, #10
 80076b8:	4641      	mov	r1, r8
 80076ba:	4628      	mov	r0, r5
 80076bc:	d107      	bne.n	80076ce <_dtoa_r+0xb1e>
 80076be:	f000 f8ef 	bl	80078a0 <__multadd>
 80076c2:	4680      	mov	r8, r0
 80076c4:	4606      	mov	r6, r0
 80076c6:	9b02      	ldr	r3, [sp, #8]
 80076c8:	3301      	adds	r3, #1
 80076ca:	9302      	str	r3, [sp, #8]
 80076cc:	e777      	b.n	80075be <_dtoa_r+0xa0e>
 80076ce:	f000 f8e7 	bl	80078a0 <__multadd>
 80076d2:	4631      	mov	r1, r6
 80076d4:	4680      	mov	r8, r0
 80076d6:	2300      	movs	r3, #0
 80076d8:	220a      	movs	r2, #10
 80076da:	4628      	mov	r0, r5
 80076dc:	f000 f8e0 	bl	80078a0 <__multadd>
 80076e0:	4606      	mov	r6, r0
 80076e2:	e7f0      	b.n	80076c6 <_dtoa_r+0xb16>
 80076e4:	f1bb 0f00 	cmp.w	fp, #0
 80076e8:	bfcc      	ite	gt
 80076ea:	465f      	movgt	r7, fp
 80076ec:	2701      	movle	r7, #1
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	9a08      	ldr	r2, [sp, #32]
 80076f4:	4417      	add	r7, r2
 80076f6:	4651      	mov	r1, sl
 80076f8:	2201      	movs	r2, #1
 80076fa:	4628      	mov	r0, r5
 80076fc:	9302      	str	r3, [sp, #8]
 80076fe:	f000 fa7b 	bl	8007bf8 <__lshift>
 8007702:	4621      	mov	r1, r4
 8007704:	4682      	mov	sl, r0
 8007706:	f000 fae3 	bl	8007cd0 <__mcmp>
 800770a:	2800      	cmp	r0, #0
 800770c:	dcb2      	bgt.n	8007674 <_dtoa_r+0xac4>
 800770e:	d102      	bne.n	8007716 <_dtoa_r+0xb66>
 8007710:	9b02      	ldr	r3, [sp, #8]
 8007712:	07db      	lsls	r3, r3, #31
 8007714:	d4ae      	bmi.n	8007674 <_dtoa_r+0xac4>
 8007716:	463b      	mov	r3, r7
 8007718:	461f      	mov	r7, r3
 800771a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800771e:	2a30      	cmp	r2, #48	; 0x30
 8007720:	d0fa      	beq.n	8007718 <_dtoa_r+0xb68>
 8007722:	e6fb      	b.n	800751c <_dtoa_r+0x96c>
 8007724:	9a08      	ldr	r2, [sp, #32]
 8007726:	429a      	cmp	r2, r3
 8007728:	d1a5      	bne.n	8007676 <_dtoa_r+0xac6>
 800772a:	2331      	movs	r3, #49	; 0x31
 800772c:	f109 0901 	add.w	r9, r9, #1
 8007730:	7013      	strb	r3, [r2, #0]
 8007732:	e6f3      	b.n	800751c <_dtoa_r+0x96c>
 8007734:	4b13      	ldr	r3, [pc, #76]	; (8007784 <_dtoa_r+0xbd4>)
 8007736:	f7ff baa7 	b.w	8006c88 <_dtoa_r+0xd8>
 800773a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800773c:	2b00      	cmp	r3, #0
 800773e:	f47f aa80 	bne.w	8006c42 <_dtoa_r+0x92>
 8007742:	4b11      	ldr	r3, [pc, #68]	; (8007788 <_dtoa_r+0xbd8>)
 8007744:	f7ff baa0 	b.w	8006c88 <_dtoa_r+0xd8>
 8007748:	f1bb 0f00 	cmp.w	fp, #0
 800774c:	dc03      	bgt.n	8007756 <_dtoa_r+0xba6>
 800774e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007750:	2b02      	cmp	r3, #2
 8007752:	f73f aecc 	bgt.w	80074ee <_dtoa_r+0x93e>
 8007756:	9f08      	ldr	r7, [sp, #32]
 8007758:	4621      	mov	r1, r4
 800775a:	4650      	mov	r0, sl
 800775c:	f7ff f998 	bl	8006a90 <quorem>
 8007760:	9a08      	ldr	r2, [sp, #32]
 8007762:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007766:	f807 3b01 	strb.w	r3, [r7], #1
 800776a:	1aba      	subs	r2, r7, r2
 800776c:	4593      	cmp	fp, r2
 800776e:	ddb9      	ble.n	80076e4 <_dtoa_r+0xb34>
 8007770:	4651      	mov	r1, sl
 8007772:	2300      	movs	r3, #0
 8007774:	220a      	movs	r2, #10
 8007776:	4628      	mov	r0, r5
 8007778:	f000 f892 	bl	80078a0 <__multadd>
 800777c:	4682      	mov	sl, r0
 800777e:	e7eb      	b.n	8007758 <_dtoa_r+0xba8>
 8007780:	08009293 	.word	0x08009293
 8007784:	080091ec 	.word	0x080091ec
 8007788:	08009210 	.word	0x08009210

0800778c <_localeconv_r>:
 800778c:	4800      	ldr	r0, [pc, #0]	; (8007790 <_localeconv_r+0x4>)
 800778e:	4770      	bx	lr
 8007790:	20000160 	.word	0x20000160

08007794 <malloc>:
 8007794:	4b02      	ldr	r3, [pc, #8]	; (80077a0 <malloc+0xc>)
 8007796:	4601      	mov	r1, r0
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	f000 bbfb 	b.w	8007f94 <_malloc_r>
 800779e:	bf00      	nop
 80077a0:	2000000c 	.word	0x2000000c

080077a4 <memchr>:
 80077a4:	4603      	mov	r3, r0
 80077a6:	b510      	push	{r4, lr}
 80077a8:	b2c9      	uxtb	r1, r1
 80077aa:	4402      	add	r2, r0
 80077ac:	4293      	cmp	r3, r2
 80077ae:	4618      	mov	r0, r3
 80077b0:	d101      	bne.n	80077b6 <memchr+0x12>
 80077b2:	2000      	movs	r0, #0
 80077b4:	e003      	b.n	80077be <memchr+0x1a>
 80077b6:	7804      	ldrb	r4, [r0, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	428c      	cmp	r4, r1
 80077bc:	d1f6      	bne.n	80077ac <memchr+0x8>
 80077be:	bd10      	pop	{r4, pc}

080077c0 <memcpy>:
 80077c0:	440a      	add	r2, r1
 80077c2:	4291      	cmp	r1, r2
 80077c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c8:	d100      	bne.n	80077cc <memcpy+0xc>
 80077ca:	4770      	bx	lr
 80077cc:	b510      	push	{r4, lr}
 80077ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077d2:	4291      	cmp	r1, r2
 80077d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d8:	d1f9      	bne.n	80077ce <memcpy+0xe>
 80077da:	bd10      	pop	{r4, pc}

080077dc <_Balloc>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077e0:	4604      	mov	r4, r0
 80077e2:	460d      	mov	r5, r1
 80077e4:	b976      	cbnz	r6, 8007804 <_Balloc+0x28>
 80077e6:	2010      	movs	r0, #16
 80077e8:	f7ff ffd4 	bl	8007794 <malloc>
 80077ec:	4602      	mov	r2, r0
 80077ee:	6260      	str	r0, [r4, #36]	; 0x24
 80077f0:	b920      	cbnz	r0, 80077fc <_Balloc+0x20>
 80077f2:	2166      	movs	r1, #102	; 0x66
 80077f4:	4b17      	ldr	r3, [pc, #92]	; (8007854 <_Balloc+0x78>)
 80077f6:	4818      	ldr	r0, [pc, #96]	; (8007858 <_Balloc+0x7c>)
 80077f8:	f000 fd92 	bl	8008320 <__assert_func>
 80077fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007800:	6006      	str	r6, [r0, #0]
 8007802:	60c6      	str	r6, [r0, #12]
 8007804:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007806:	68f3      	ldr	r3, [r6, #12]
 8007808:	b183      	cbz	r3, 800782c <_Balloc+0x50>
 800780a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007812:	b9b8      	cbnz	r0, 8007844 <_Balloc+0x68>
 8007814:	2101      	movs	r1, #1
 8007816:	fa01 f605 	lsl.w	r6, r1, r5
 800781a:	1d72      	adds	r2, r6, #5
 800781c:	4620      	mov	r0, r4
 800781e:	0092      	lsls	r2, r2, #2
 8007820:	f000 fb5e 	bl	8007ee0 <_calloc_r>
 8007824:	b160      	cbz	r0, 8007840 <_Balloc+0x64>
 8007826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800782a:	e00e      	b.n	800784a <_Balloc+0x6e>
 800782c:	2221      	movs	r2, #33	; 0x21
 800782e:	2104      	movs	r1, #4
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fb55 	bl	8007ee0 <_calloc_r>
 8007836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007838:	60f0      	str	r0, [r6, #12]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e4      	bne.n	800780a <_Balloc+0x2e>
 8007840:	2000      	movs	r0, #0
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	6802      	ldr	r2, [r0, #0]
 8007846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800784a:	2300      	movs	r3, #0
 800784c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007850:	e7f7      	b.n	8007842 <_Balloc+0x66>
 8007852:	bf00      	nop
 8007854:	0800921d 	.word	0x0800921d
 8007858:	080092a4 	.word	0x080092a4

0800785c <_Bfree>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b976      	cbnz	r6, 8007884 <_Bfree+0x28>
 8007866:	2010      	movs	r0, #16
 8007868:	f7ff ff94 	bl	8007794 <malloc>
 800786c:	4602      	mov	r2, r0
 800786e:	6268      	str	r0, [r5, #36]	; 0x24
 8007870:	b920      	cbnz	r0, 800787c <_Bfree+0x20>
 8007872:	218a      	movs	r1, #138	; 0x8a
 8007874:	4b08      	ldr	r3, [pc, #32]	; (8007898 <_Bfree+0x3c>)
 8007876:	4809      	ldr	r0, [pc, #36]	; (800789c <_Bfree+0x40>)
 8007878:	f000 fd52 	bl	8008320 <__assert_func>
 800787c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007880:	6006      	str	r6, [r0, #0]
 8007882:	60c6      	str	r6, [r0, #12]
 8007884:	b13c      	cbz	r4, 8007896 <_Bfree+0x3a>
 8007886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007888:	6862      	ldr	r2, [r4, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007890:	6021      	str	r1, [r4, #0]
 8007892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	0800921d 	.word	0x0800921d
 800789c:	080092a4 	.word	0x080092a4

080078a0 <__multadd>:
 80078a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a4:	4698      	mov	r8, r3
 80078a6:	460c      	mov	r4, r1
 80078a8:	2300      	movs	r3, #0
 80078aa:	690e      	ldr	r6, [r1, #16]
 80078ac:	4607      	mov	r7, r0
 80078ae:	f101 0014 	add.w	r0, r1, #20
 80078b2:	6805      	ldr	r5, [r0, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	b2a9      	uxth	r1, r5
 80078b8:	fb02 8101 	mla	r1, r2, r1, r8
 80078bc:	0c2d      	lsrs	r5, r5, #16
 80078be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80078c2:	fb02 c505 	mla	r5, r2, r5, ip
 80078c6:	b289      	uxth	r1, r1
 80078c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80078cc:	429e      	cmp	r6, r3
 80078ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80078d2:	f840 1b04 	str.w	r1, [r0], #4
 80078d6:	dcec      	bgt.n	80078b2 <__multadd+0x12>
 80078d8:	f1b8 0f00 	cmp.w	r8, #0
 80078dc:	d022      	beq.n	8007924 <__multadd+0x84>
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	42b3      	cmp	r3, r6
 80078e2:	dc19      	bgt.n	8007918 <__multadd+0x78>
 80078e4:	6861      	ldr	r1, [r4, #4]
 80078e6:	4638      	mov	r0, r7
 80078e8:	3101      	adds	r1, #1
 80078ea:	f7ff ff77 	bl	80077dc <_Balloc>
 80078ee:	4605      	mov	r5, r0
 80078f0:	b928      	cbnz	r0, 80078fe <__multadd+0x5e>
 80078f2:	4602      	mov	r2, r0
 80078f4:	21b5      	movs	r1, #181	; 0xb5
 80078f6:	4b0d      	ldr	r3, [pc, #52]	; (800792c <__multadd+0x8c>)
 80078f8:	480d      	ldr	r0, [pc, #52]	; (8007930 <__multadd+0x90>)
 80078fa:	f000 fd11 	bl	8008320 <__assert_func>
 80078fe:	6922      	ldr	r2, [r4, #16]
 8007900:	f104 010c 	add.w	r1, r4, #12
 8007904:	3202      	adds	r2, #2
 8007906:	0092      	lsls	r2, r2, #2
 8007908:	300c      	adds	r0, #12
 800790a:	f7ff ff59 	bl	80077c0 <memcpy>
 800790e:	4621      	mov	r1, r4
 8007910:	4638      	mov	r0, r7
 8007912:	f7ff ffa3 	bl	800785c <_Bfree>
 8007916:	462c      	mov	r4, r5
 8007918:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800791c:	3601      	adds	r6, #1
 800791e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007922:	6126      	str	r6, [r4, #16]
 8007924:	4620      	mov	r0, r4
 8007926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800792a:	bf00      	nop
 800792c:	08009293 	.word	0x08009293
 8007930:	080092a4 	.word	0x080092a4

08007934 <__hi0bits>:
 8007934:	0c02      	lsrs	r2, r0, #16
 8007936:	0412      	lsls	r2, r2, #16
 8007938:	4603      	mov	r3, r0
 800793a:	b9ca      	cbnz	r2, 8007970 <__hi0bits+0x3c>
 800793c:	0403      	lsls	r3, r0, #16
 800793e:	2010      	movs	r0, #16
 8007940:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007944:	bf04      	itt	eq
 8007946:	021b      	lsleq	r3, r3, #8
 8007948:	3008      	addeq	r0, #8
 800794a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800794e:	bf04      	itt	eq
 8007950:	011b      	lsleq	r3, r3, #4
 8007952:	3004      	addeq	r0, #4
 8007954:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007958:	bf04      	itt	eq
 800795a:	009b      	lsleq	r3, r3, #2
 800795c:	3002      	addeq	r0, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	db05      	blt.n	800796e <__hi0bits+0x3a>
 8007962:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007966:	f100 0001 	add.w	r0, r0, #1
 800796a:	bf08      	it	eq
 800796c:	2020      	moveq	r0, #32
 800796e:	4770      	bx	lr
 8007970:	2000      	movs	r0, #0
 8007972:	e7e5      	b.n	8007940 <__hi0bits+0xc>

08007974 <__lo0bits>:
 8007974:	6803      	ldr	r3, [r0, #0]
 8007976:	4602      	mov	r2, r0
 8007978:	f013 0007 	ands.w	r0, r3, #7
 800797c:	d00b      	beq.n	8007996 <__lo0bits+0x22>
 800797e:	07d9      	lsls	r1, r3, #31
 8007980:	d422      	bmi.n	80079c8 <__lo0bits+0x54>
 8007982:	0798      	lsls	r0, r3, #30
 8007984:	bf49      	itett	mi
 8007986:	085b      	lsrmi	r3, r3, #1
 8007988:	089b      	lsrpl	r3, r3, #2
 800798a:	2001      	movmi	r0, #1
 800798c:	6013      	strmi	r3, [r2, #0]
 800798e:	bf5c      	itt	pl
 8007990:	2002      	movpl	r0, #2
 8007992:	6013      	strpl	r3, [r2, #0]
 8007994:	4770      	bx	lr
 8007996:	b299      	uxth	r1, r3
 8007998:	b909      	cbnz	r1, 800799e <__lo0bits+0x2a>
 800799a:	2010      	movs	r0, #16
 800799c:	0c1b      	lsrs	r3, r3, #16
 800799e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80079a2:	bf04      	itt	eq
 80079a4:	0a1b      	lsreq	r3, r3, #8
 80079a6:	3008      	addeq	r0, #8
 80079a8:	0719      	lsls	r1, r3, #28
 80079aa:	bf04      	itt	eq
 80079ac:	091b      	lsreq	r3, r3, #4
 80079ae:	3004      	addeq	r0, #4
 80079b0:	0799      	lsls	r1, r3, #30
 80079b2:	bf04      	itt	eq
 80079b4:	089b      	lsreq	r3, r3, #2
 80079b6:	3002      	addeq	r0, #2
 80079b8:	07d9      	lsls	r1, r3, #31
 80079ba:	d403      	bmi.n	80079c4 <__lo0bits+0x50>
 80079bc:	085b      	lsrs	r3, r3, #1
 80079be:	f100 0001 	add.w	r0, r0, #1
 80079c2:	d003      	beq.n	80079cc <__lo0bits+0x58>
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	4770      	bx	lr
 80079c8:	2000      	movs	r0, #0
 80079ca:	4770      	bx	lr
 80079cc:	2020      	movs	r0, #32
 80079ce:	4770      	bx	lr

080079d0 <__i2b>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	460c      	mov	r4, r1
 80079d4:	2101      	movs	r1, #1
 80079d6:	f7ff ff01 	bl	80077dc <_Balloc>
 80079da:	4602      	mov	r2, r0
 80079dc:	b928      	cbnz	r0, 80079ea <__i2b+0x1a>
 80079de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80079e2:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <__i2b+0x24>)
 80079e4:	4804      	ldr	r0, [pc, #16]	; (80079f8 <__i2b+0x28>)
 80079e6:	f000 fc9b 	bl	8008320 <__assert_func>
 80079ea:	2301      	movs	r3, #1
 80079ec:	6144      	str	r4, [r0, #20]
 80079ee:	6103      	str	r3, [r0, #16]
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	bf00      	nop
 80079f4:	08009293 	.word	0x08009293
 80079f8:	080092a4 	.word	0x080092a4

080079fc <__multiply>:
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	4614      	mov	r4, r2
 8007a02:	690a      	ldr	r2, [r1, #16]
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	460d      	mov	r5, r1
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	bfbe      	ittt	lt
 8007a0c:	460b      	movlt	r3, r1
 8007a0e:	4625      	movlt	r5, r4
 8007a10:	461c      	movlt	r4, r3
 8007a12:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007a16:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007a1a:	68ab      	ldr	r3, [r5, #8]
 8007a1c:	6869      	ldr	r1, [r5, #4]
 8007a1e:	eb0a 0709 	add.w	r7, sl, r9
 8007a22:	42bb      	cmp	r3, r7
 8007a24:	b085      	sub	sp, #20
 8007a26:	bfb8      	it	lt
 8007a28:	3101      	addlt	r1, #1
 8007a2a:	f7ff fed7 	bl	80077dc <_Balloc>
 8007a2e:	b930      	cbnz	r0, 8007a3e <__multiply+0x42>
 8007a30:	4602      	mov	r2, r0
 8007a32:	f240 115d 	movw	r1, #349	; 0x15d
 8007a36:	4b41      	ldr	r3, [pc, #260]	; (8007b3c <__multiply+0x140>)
 8007a38:	4841      	ldr	r0, [pc, #260]	; (8007b40 <__multiply+0x144>)
 8007a3a:	f000 fc71 	bl	8008320 <__assert_func>
 8007a3e:	f100 0614 	add.w	r6, r0, #20
 8007a42:	4633      	mov	r3, r6
 8007a44:	2200      	movs	r2, #0
 8007a46:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007a4a:	4543      	cmp	r3, r8
 8007a4c:	d31e      	bcc.n	8007a8c <__multiply+0x90>
 8007a4e:	f105 0c14 	add.w	ip, r5, #20
 8007a52:	f104 0314 	add.w	r3, r4, #20
 8007a56:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007a5a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007a5e:	9202      	str	r2, [sp, #8]
 8007a60:	ebac 0205 	sub.w	r2, ip, r5
 8007a64:	3a15      	subs	r2, #21
 8007a66:	f022 0203 	bic.w	r2, r2, #3
 8007a6a:	3204      	adds	r2, #4
 8007a6c:	f105 0115 	add.w	r1, r5, #21
 8007a70:	458c      	cmp	ip, r1
 8007a72:	bf38      	it	cc
 8007a74:	2204      	movcc	r2, #4
 8007a76:	9201      	str	r2, [sp, #4]
 8007a78:	9a02      	ldr	r2, [sp, #8]
 8007a7a:	9303      	str	r3, [sp, #12]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d808      	bhi.n	8007a92 <__multiply+0x96>
 8007a80:	2f00      	cmp	r7, #0
 8007a82:	dc55      	bgt.n	8007b30 <__multiply+0x134>
 8007a84:	6107      	str	r7, [r0, #16]
 8007a86:	b005      	add	sp, #20
 8007a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	f843 2b04 	str.w	r2, [r3], #4
 8007a90:	e7db      	b.n	8007a4a <__multiply+0x4e>
 8007a92:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a96:	f1ba 0f00 	cmp.w	sl, #0
 8007a9a:	d020      	beq.n	8007ade <__multiply+0xe2>
 8007a9c:	46b1      	mov	r9, r6
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f105 0e14 	add.w	lr, r5, #20
 8007aa4:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007aa8:	f8d9 b000 	ldr.w	fp, [r9]
 8007aac:	b2a1      	uxth	r1, r4
 8007aae:	fa1f fb8b 	uxth.w	fp, fp
 8007ab2:	fb0a b101 	mla	r1, sl, r1, fp
 8007ab6:	4411      	add	r1, r2
 8007ab8:	f8d9 2000 	ldr.w	r2, [r9]
 8007abc:	0c24      	lsrs	r4, r4, #16
 8007abe:	0c12      	lsrs	r2, r2, #16
 8007ac0:	fb0a 2404 	mla	r4, sl, r4, r2
 8007ac4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007ac8:	b289      	uxth	r1, r1
 8007aca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ace:	45f4      	cmp	ip, lr
 8007ad0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ad4:	f849 1b04 	str.w	r1, [r9], #4
 8007ad8:	d8e4      	bhi.n	8007aa4 <__multiply+0xa8>
 8007ada:	9901      	ldr	r1, [sp, #4]
 8007adc:	5072      	str	r2, [r6, r1]
 8007ade:	9a03      	ldr	r2, [sp, #12]
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ae6:	f1b9 0f00 	cmp.w	r9, #0
 8007aea:	d01f      	beq.n	8007b2c <__multiply+0x130>
 8007aec:	46b6      	mov	lr, r6
 8007aee:	f04f 0a00 	mov.w	sl, #0
 8007af2:	6834      	ldr	r4, [r6, #0]
 8007af4:	f105 0114 	add.w	r1, r5, #20
 8007af8:	880a      	ldrh	r2, [r1, #0]
 8007afa:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007afe:	b2a4      	uxth	r4, r4
 8007b00:	fb09 b202 	mla	r2, r9, r2, fp
 8007b04:	4492      	add	sl, r2
 8007b06:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007b0a:	f84e 4b04 	str.w	r4, [lr], #4
 8007b0e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007b12:	f8be 2000 	ldrh.w	r2, [lr]
 8007b16:	0c24      	lsrs	r4, r4, #16
 8007b18:	fb09 2404 	mla	r4, r9, r4, r2
 8007b1c:	458c      	cmp	ip, r1
 8007b1e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007b22:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007b26:	d8e7      	bhi.n	8007af8 <__multiply+0xfc>
 8007b28:	9a01      	ldr	r2, [sp, #4]
 8007b2a:	50b4      	str	r4, [r6, r2]
 8007b2c:	3604      	adds	r6, #4
 8007b2e:	e7a3      	b.n	8007a78 <__multiply+0x7c>
 8007b30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1a5      	bne.n	8007a84 <__multiply+0x88>
 8007b38:	3f01      	subs	r7, #1
 8007b3a:	e7a1      	b.n	8007a80 <__multiply+0x84>
 8007b3c:	08009293 	.word	0x08009293
 8007b40:	080092a4 	.word	0x080092a4

08007b44 <__pow5mult>:
 8007b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b48:	4615      	mov	r5, r2
 8007b4a:	f012 0203 	ands.w	r2, r2, #3
 8007b4e:	4606      	mov	r6, r0
 8007b50:	460f      	mov	r7, r1
 8007b52:	d007      	beq.n	8007b64 <__pow5mult+0x20>
 8007b54:	4c25      	ldr	r4, [pc, #148]	; (8007bec <__pow5mult+0xa8>)
 8007b56:	3a01      	subs	r2, #1
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b5e:	f7ff fe9f 	bl	80078a0 <__multadd>
 8007b62:	4607      	mov	r7, r0
 8007b64:	10ad      	asrs	r5, r5, #2
 8007b66:	d03d      	beq.n	8007be4 <__pow5mult+0xa0>
 8007b68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b6a:	b97c      	cbnz	r4, 8007b8c <__pow5mult+0x48>
 8007b6c:	2010      	movs	r0, #16
 8007b6e:	f7ff fe11 	bl	8007794 <malloc>
 8007b72:	4602      	mov	r2, r0
 8007b74:	6270      	str	r0, [r6, #36]	; 0x24
 8007b76:	b928      	cbnz	r0, 8007b84 <__pow5mult+0x40>
 8007b78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b7c:	4b1c      	ldr	r3, [pc, #112]	; (8007bf0 <__pow5mult+0xac>)
 8007b7e:	481d      	ldr	r0, [pc, #116]	; (8007bf4 <__pow5mult+0xb0>)
 8007b80:	f000 fbce 	bl	8008320 <__assert_func>
 8007b84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b88:	6004      	str	r4, [r0, #0]
 8007b8a:	60c4      	str	r4, [r0, #12]
 8007b8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b94:	b94c      	cbnz	r4, 8007baa <__pow5mult+0x66>
 8007b96:	f240 2171 	movw	r1, #625	; 0x271
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7ff ff18 	bl	80079d0 <__i2b>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ba8:	6003      	str	r3, [r0, #0]
 8007baa:	f04f 0900 	mov.w	r9, #0
 8007bae:	07eb      	lsls	r3, r5, #31
 8007bb0:	d50a      	bpl.n	8007bc8 <__pow5mult+0x84>
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f7ff ff20 	bl	80079fc <__multiply>
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7ff fe4b 	bl	800785c <_Bfree>
 8007bc6:	4647      	mov	r7, r8
 8007bc8:	106d      	asrs	r5, r5, #1
 8007bca:	d00b      	beq.n	8007be4 <__pow5mult+0xa0>
 8007bcc:	6820      	ldr	r0, [r4, #0]
 8007bce:	b938      	cbnz	r0, 8007be0 <__pow5mult+0x9c>
 8007bd0:	4622      	mov	r2, r4
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7ff ff11 	bl	80079fc <__multiply>
 8007bda:	6020      	str	r0, [r4, #0]
 8007bdc:	f8c0 9000 	str.w	r9, [r0]
 8007be0:	4604      	mov	r4, r0
 8007be2:	e7e4      	b.n	8007bae <__pow5mult+0x6a>
 8007be4:	4638      	mov	r0, r7
 8007be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bea:	bf00      	nop
 8007bec:	080093f8 	.word	0x080093f8
 8007bf0:	0800921d 	.word	0x0800921d
 8007bf4:	080092a4 	.word	0x080092a4

08007bf8 <__lshift>:
 8007bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	4607      	mov	r7, r0
 8007c00:	4691      	mov	r9, r2
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	6849      	ldr	r1, [r1, #4]
 8007c06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c0a:	68a3      	ldr	r3, [r4, #8]
 8007c0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c10:	f108 0601 	add.w	r6, r8, #1
 8007c14:	42b3      	cmp	r3, r6
 8007c16:	db0b      	blt.n	8007c30 <__lshift+0x38>
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f7ff fddf 	bl	80077dc <_Balloc>
 8007c1e:	4605      	mov	r5, r0
 8007c20:	b948      	cbnz	r0, 8007c36 <__lshift+0x3e>
 8007c22:	4602      	mov	r2, r0
 8007c24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c28:	4b27      	ldr	r3, [pc, #156]	; (8007cc8 <__lshift+0xd0>)
 8007c2a:	4828      	ldr	r0, [pc, #160]	; (8007ccc <__lshift+0xd4>)
 8007c2c:	f000 fb78 	bl	8008320 <__assert_func>
 8007c30:	3101      	adds	r1, #1
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	e7ee      	b.n	8007c14 <__lshift+0x1c>
 8007c36:	2300      	movs	r3, #0
 8007c38:	f100 0114 	add.w	r1, r0, #20
 8007c3c:	f100 0210 	add.w	r2, r0, #16
 8007c40:	4618      	mov	r0, r3
 8007c42:	4553      	cmp	r3, sl
 8007c44:	db33      	blt.n	8007cae <__lshift+0xb6>
 8007c46:	6920      	ldr	r0, [r4, #16]
 8007c48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c4c:	f104 0314 	add.w	r3, r4, #20
 8007c50:	f019 091f 	ands.w	r9, r9, #31
 8007c54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c5c:	d02b      	beq.n	8007cb6 <__lshift+0xbe>
 8007c5e:	468a      	mov	sl, r1
 8007c60:	2200      	movs	r2, #0
 8007c62:	f1c9 0e20 	rsb	lr, r9, #32
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	fa00 f009 	lsl.w	r0, r0, r9
 8007c6c:	4302      	orrs	r2, r0
 8007c6e:	f84a 2b04 	str.w	r2, [sl], #4
 8007c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c76:	459c      	cmp	ip, r3
 8007c78:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c7c:	d8f3      	bhi.n	8007c66 <__lshift+0x6e>
 8007c7e:	ebac 0304 	sub.w	r3, ip, r4
 8007c82:	3b15      	subs	r3, #21
 8007c84:	f023 0303 	bic.w	r3, r3, #3
 8007c88:	3304      	adds	r3, #4
 8007c8a:	f104 0015 	add.w	r0, r4, #21
 8007c8e:	4584      	cmp	ip, r0
 8007c90:	bf38      	it	cc
 8007c92:	2304      	movcc	r3, #4
 8007c94:	50ca      	str	r2, [r1, r3]
 8007c96:	b10a      	cbz	r2, 8007c9c <__lshift+0xa4>
 8007c98:	f108 0602 	add.w	r6, r8, #2
 8007c9c:	3e01      	subs	r6, #1
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	612e      	str	r6, [r5, #16]
 8007ca4:	f7ff fdda 	bl	800785c <_Bfree>
 8007ca8:	4628      	mov	r0, r5
 8007caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cae:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	e7c5      	b.n	8007c42 <__lshift+0x4a>
 8007cb6:	3904      	subs	r1, #4
 8007cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cbc:	459c      	cmp	ip, r3
 8007cbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cc2:	d8f9      	bhi.n	8007cb8 <__lshift+0xc0>
 8007cc4:	e7ea      	b.n	8007c9c <__lshift+0xa4>
 8007cc6:	bf00      	nop
 8007cc8:	08009293 	.word	0x08009293
 8007ccc:	080092a4 	.word	0x080092a4

08007cd0 <__mcmp>:
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	690a      	ldr	r2, [r1, #16]
 8007cd4:	6900      	ldr	r0, [r0, #16]
 8007cd6:	b530      	push	{r4, r5, lr}
 8007cd8:	1a80      	subs	r0, r0, r2
 8007cda:	d10d      	bne.n	8007cf8 <__mcmp+0x28>
 8007cdc:	3314      	adds	r3, #20
 8007cde:	3114      	adds	r1, #20
 8007ce0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ce4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ce8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cf0:	4295      	cmp	r5, r2
 8007cf2:	d002      	beq.n	8007cfa <__mcmp+0x2a>
 8007cf4:	d304      	bcc.n	8007d00 <__mcmp+0x30>
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	bd30      	pop	{r4, r5, pc}
 8007cfa:	42a3      	cmp	r3, r4
 8007cfc:	d3f4      	bcc.n	8007ce8 <__mcmp+0x18>
 8007cfe:	e7fb      	b.n	8007cf8 <__mcmp+0x28>
 8007d00:	f04f 30ff 	mov.w	r0, #4294967295
 8007d04:	e7f8      	b.n	8007cf8 <__mcmp+0x28>
	...

08007d08 <__mdiff>:
 8007d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	4606      	mov	r6, r0
 8007d10:	4611      	mov	r1, r2
 8007d12:	4620      	mov	r0, r4
 8007d14:	4692      	mov	sl, r2
 8007d16:	f7ff ffdb 	bl	8007cd0 <__mcmp>
 8007d1a:	1e05      	subs	r5, r0, #0
 8007d1c:	d111      	bne.n	8007d42 <__mdiff+0x3a>
 8007d1e:	4629      	mov	r1, r5
 8007d20:	4630      	mov	r0, r6
 8007d22:	f7ff fd5b 	bl	80077dc <_Balloc>
 8007d26:	4602      	mov	r2, r0
 8007d28:	b928      	cbnz	r0, 8007d36 <__mdiff+0x2e>
 8007d2a:	f240 2132 	movw	r1, #562	; 0x232
 8007d2e:	4b3c      	ldr	r3, [pc, #240]	; (8007e20 <__mdiff+0x118>)
 8007d30:	483c      	ldr	r0, [pc, #240]	; (8007e24 <__mdiff+0x11c>)
 8007d32:	f000 faf5 	bl	8008320 <__assert_func>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	bfa4      	itt	ge
 8007d44:	4653      	movge	r3, sl
 8007d46:	46a2      	movge	sl, r4
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007d4e:	bfa6      	itte	ge
 8007d50:	461c      	movge	r4, r3
 8007d52:	2500      	movge	r5, #0
 8007d54:	2501      	movlt	r5, #1
 8007d56:	f7ff fd41 	bl	80077dc <_Balloc>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	b918      	cbnz	r0, 8007d66 <__mdiff+0x5e>
 8007d5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d62:	4b2f      	ldr	r3, [pc, #188]	; (8007e20 <__mdiff+0x118>)
 8007d64:	e7e4      	b.n	8007d30 <__mdiff+0x28>
 8007d66:	f100 0814 	add.w	r8, r0, #20
 8007d6a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007d6e:	60c5      	str	r5, [r0, #12]
 8007d70:	f04f 0c00 	mov.w	ip, #0
 8007d74:	f10a 0514 	add.w	r5, sl, #20
 8007d78:	f10a 0010 	add.w	r0, sl, #16
 8007d7c:	46c2      	mov	sl, r8
 8007d7e:	6926      	ldr	r6, [r4, #16]
 8007d80:	f104 0914 	add.w	r9, r4, #20
 8007d84:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007d88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d8c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007d90:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d94:	fa1f f18b 	uxth.w	r1, fp
 8007d98:	4461      	add	r1, ip
 8007d9a:	fa1f fc83 	uxth.w	ip, r3
 8007d9e:	0c1b      	lsrs	r3, r3, #16
 8007da0:	eba1 010c 	sub.w	r1, r1, ip
 8007da4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007da8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007dac:	b289      	uxth	r1, r1
 8007dae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007db2:	454e      	cmp	r6, r9
 8007db4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007db8:	f84a 3b04 	str.w	r3, [sl], #4
 8007dbc:	d8e6      	bhi.n	8007d8c <__mdiff+0x84>
 8007dbe:	1b33      	subs	r3, r6, r4
 8007dc0:	3b15      	subs	r3, #21
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	3415      	adds	r4, #21
 8007dc8:	3304      	adds	r3, #4
 8007dca:	42a6      	cmp	r6, r4
 8007dcc:	bf38      	it	cc
 8007dce:	2304      	movcc	r3, #4
 8007dd0:	441d      	add	r5, r3
 8007dd2:	4443      	add	r3, r8
 8007dd4:	461e      	mov	r6, r3
 8007dd6:	462c      	mov	r4, r5
 8007dd8:	4574      	cmp	r4, lr
 8007dda:	d30e      	bcc.n	8007dfa <__mdiff+0xf2>
 8007ddc:	f10e 0103 	add.w	r1, lr, #3
 8007de0:	1b49      	subs	r1, r1, r5
 8007de2:	f021 0103 	bic.w	r1, r1, #3
 8007de6:	3d03      	subs	r5, #3
 8007de8:	45ae      	cmp	lr, r5
 8007dea:	bf38      	it	cc
 8007dec:	2100      	movcc	r1, #0
 8007dee:	4419      	add	r1, r3
 8007df0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007df4:	b18b      	cbz	r3, 8007e1a <__mdiff+0x112>
 8007df6:	6117      	str	r7, [r2, #16]
 8007df8:	e7a0      	b.n	8007d3c <__mdiff+0x34>
 8007dfa:	f854 8b04 	ldr.w	r8, [r4], #4
 8007dfe:	fa1f f188 	uxth.w	r1, r8
 8007e02:	4461      	add	r1, ip
 8007e04:	1408      	asrs	r0, r1, #16
 8007e06:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007e0a:	b289      	uxth	r1, r1
 8007e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e14:	f846 1b04 	str.w	r1, [r6], #4
 8007e18:	e7de      	b.n	8007dd8 <__mdiff+0xd0>
 8007e1a:	3f01      	subs	r7, #1
 8007e1c:	e7e8      	b.n	8007df0 <__mdiff+0xe8>
 8007e1e:	bf00      	nop
 8007e20:	08009293 	.word	0x08009293
 8007e24:	080092a4 	.word	0x080092a4

08007e28 <__d2b>:
 8007e28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007e32:	4690      	mov	r8, r2
 8007e34:	461d      	mov	r5, r3
 8007e36:	f7ff fcd1 	bl	80077dc <_Balloc>
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	b930      	cbnz	r0, 8007e4c <__d2b+0x24>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	f240 310a 	movw	r1, #778	; 0x30a
 8007e44:	4b24      	ldr	r3, [pc, #144]	; (8007ed8 <__d2b+0xb0>)
 8007e46:	4825      	ldr	r0, [pc, #148]	; (8007edc <__d2b+0xb4>)
 8007e48:	f000 fa6a 	bl	8008320 <__assert_func>
 8007e4c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007e50:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007e54:	bb2d      	cbnz	r5, 8007ea2 <__d2b+0x7a>
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	f1b8 0300 	subs.w	r3, r8, #0
 8007e5c:	d026      	beq.n	8007eac <__d2b+0x84>
 8007e5e:	4668      	mov	r0, sp
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	f7ff fd87 	bl	8007974 <__lo0bits>
 8007e66:	9900      	ldr	r1, [sp, #0]
 8007e68:	b1f0      	cbz	r0, 8007ea8 <__d2b+0x80>
 8007e6a:	9a01      	ldr	r2, [sp, #4]
 8007e6c:	f1c0 0320 	rsb	r3, r0, #32
 8007e70:	fa02 f303 	lsl.w	r3, r2, r3
 8007e74:	430b      	orrs	r3, r1
 8007e76:	40c2      	lsrs	r2, r0
 8007e78:	6163      	str	r3, [r4, #20]
 8007e7a:	9201      	str	r2, [sp, #4]
 8007e7c:	9b01      	ldr	r3, [sp, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bf14      	ite	ne
 8007e82:	2102      	movne	r1, #2
 8007e84:	2101      	moveq	r1, #1
 8007e86:	61a3      	str	r3, [r4, #24]
 8007e88:	6121      	str	r1, [r4, #16]
 8007e8a:	b1c5      	cbz	r5, 8007ebe <__d2b+0x96>
 8007e8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e90:	4405      	add	r5, r0
 8007e92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e96:	603d      	str	r5, [r7, #0]
 8007e98:	6030      	str	r0, [r6, #0]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	b002      	add	sp, #8
 8007e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea6:	e7d6      	b.n	8007e56 <__d2b+0x2e>
 8007ea8:	6161      	str	r1, [r4, #20]
 8007eaa:	e7e7      	b.n	8007e7c <__d2b+0x54>
 8007eac:	a801      	add	r0, sp, #4
 8007eae:	f7ff fd61 	bl	8007974 <__lo0bits>
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	6121      	str	r1, [r4, #16]
 8007eb8:	6163      	str	r3, [r4, #20]
 8007eba:	3020      	adds	r0, #32
 8007ebc:	e7e5      	b.n	8007e8a <__d2b+0x62>
 8007ebe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007ec2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ec6:	6038      	str	r0, [r7, #0]
 8007ec8:	6918      	ldr	r0, [r3, #16]
 8007eca:	f7ff fd33 	bl	8007934 <__hi0bits>
 8007ece:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007ed2:	6031      	str	r1, [r6, #0]
 8007ed4:	e7e1      	b.n	8007e9a <__d2b+0x72>
 8007ed6:	bf00      	nop
 8007ed8:	08009293 	.word	0x08009293
 8007edc:	080092a4 	.word	0x080092a4

08007ee0 <_calloc_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	fb02 f501 	mul.w	r5, r2, r1
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f000 f854 	bl	8007f94 <_malloc_r>
 8007eec:	4604      	mov	r4, r0
 8007eee:	b118      	cbz	r0, 8007ef8 <_calloc_r+0x18>
 8007ef0:	462a      	mov	r2, r5
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	f7fe f944 	bl	8006180 <memset>
 8007ef8:	4620      	mov	r0, r4
 8007efa:	bd38      	pop	{r3, r4, r5, pc}

08007efc <_free_r>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	4605      	mov	r5, r0
 8007f00:	2900      	cmp	r1, #0
 8007f02:	d043      	beq.n	8007f8c <_free_r+0x90>
 8007f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f08:	1f0c      	subs	r4, r1, #4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	bfb8      	it	lt
 8007f0e:	18e4      	addlt	r4, r4, r3
 8007f10:	f000 fa48 	bl	80083a4 <__malloc_lock>
 8007f14:	4a1e      	ldr	r2, [pc, #120]	; (8007f90 <_free_r+0x94>)
 8007f16:	6813      	ldr	r3, [r2, #0]
 8007f18:	4610      	mov	r0, r2
 8007f1a:	b933      	cbnz	r3, 8007f2a <_free_r+0x2e>
 8007f1c:	6063      	str	r3, [r4, #4]
 8007f1e:	6014      	str	r4, [r2, #0]
 8007f20:	4628      	mov	r0, r5
 8007f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f26:	f000 ba43 	b.w	80083b0 <__malloc_unlock>
 8007f2a:	42a3      	cmp	r3, r4
 8007f2c:	d90a      	bls.n	8007f44 <_free_r+0x48>
 8007f2e:	6821      	ldr	r1, [r4, #0]
 8007f30:	1862      	adds	r2, r4, r1
 8007f32:	4293      	cmp	r3, r2
 8007f34:	bf01      	itttt	eq
 8007f36:	681a      	ldreq	r2, [r3, #0]
 8007f38:	685b      	ldreq	r3, [r3, #4]
 8007f3a:	1852      	addeq	r2, r2, r1
 8007f3c:	6022      	streq	r2, [r4, #0]
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	6004      	str	r4, [r0, #0]
 8007f42:	e7ed      	b.n	8007f20 <_free_r+0x24>
 8007f44:	461a      	mov	r2, r3
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	b10b      	cbz	r3, 8007f4e <_free_r+0x52>
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	d9fa      	bls.n	8007f44 <_free_r+0x48>
 8007f4e:	6811      	ldr	r1, [r2, #0]
 8007f50:	1850      	adds	r0, r2, r1
 8007f52:	42a0      	cmp	r0, r4
 8007f54:	d10b      	bne.n	8007f6e <_free_r+0x72>
 8007f56:	6820      	ldr	r0, [r4, #0]
 8007f58:	4401      	add	r1, r0
 8007f5a:	1850      	adds	r0, r2, r1
 8007f5c:	4283      	cmp	r3, r0
 8007f5e:	6011      	str	r1, [r2, #0]
 8007f60:	d1de      	bne.n	8007f20 <_free_r+0x24>
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	4401      	add	r1, r0
 8007f68:	6011      	str	r1, [r2, #0]
 8007f6a:	6053      	str	r3, [r2, #4]
 8007f6c:	e7d8      	b.n	8007f20 <_free_r+0x24>
 8007f6e:	d902      	bls.n	8007f76 <_free_r+0x7a>
 8007f70:	230c      	movs	r3, #12
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	e7d4      	b.n	8007f20 <_free_r+0x24>
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	1821      	adds	r1, r4, r0
 8007f7a:	428b      	cmp	r3, r1
 8007f7c:	bf01      	itttt	eq
 8007f7e:	6819      	ldreq	r1, [r3, #0]
 8007f80:	685b      	ldreq	r3, [r3, #4]
 8007f82:	1809      	addeq	r1, r1, r0
 8007f84:	6021      	streq	r1, [r4, #0]
 8007f86:	6063      	str	r3, [r4, #4]
 8007f88:	6054      	str	r4, [r2, #4]
 8007f8a:	e7c9      	b.n	8007f20 <_free_r+0x24>
 8007f8c:	bd38      	pop	{r3, r4, r5, pc}
 8007f8e:	bf00      	nop
 8007f90:	200001fc 	.word	0x200001fc

08007f94 <_malloc_r>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	1ccd      	adds	r5, r1, #3
 8007f98:	f025 0503 	bic.w	r5, r5, #3
 8007f9c:	3508      	adds	r5, #8
 8007f9e:	2d0c      	cmp	r5, #12
 8007fa0:	bf38      	it	cc
 8007fa2:	250c      	movcc	r5, #12
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	db01      	blt.n	8007fae <_malloc_r+0x1a>
 8007faa:	42a9      	cmp	r1, r5
 8007fac:	d903      	bls.n	8007fb6 <_malloc_r+0x22>
 8007fae:	230c      	movs	r3, #12
 8007fb0:	6033      	str	r3, [r6, #0]
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb6:	f000 f9f5 	bl	80083a4 <__malloc_lock>
 8007fba:	4921      	ldr	r1, [pc, #132]	; (8008040 <_malloc_r+0xac>)
 8007fbc:	680a      	ldr	r2, [r1, #0]
 8007fbe:	4614      	mov	r4, r2
 8007fc0:	b99c      	cbnz	r4, 8007fea <_malloc_r+0x56>
 8007fc2:	4f20      	ldr	r7, [pc, #128]	; (8008044 <_malloc_r+0xb0>)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	b923      	cbnz	r3, 8007fd2 <_malloc_r+0x3e>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f998 	bl	8008300 <_sbrk_r>
 8007fd0:	6038      	str	r0, [r7, #0]
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f000 f993 	bl	8008300 <_sbrk_r>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d123      	bne.n	8008026 <_malloc_r+0x92>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	6033      	str	r3, [r6, #0]
 8007fe4:	f000 f9e4 	bl	80083b0 <__malloc_unlock>
 8007fe8:	e7e3      	b.n	8007fb2 <_malloc_r+0x1e>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	1b5b      	subs	r3, r3, r5
 8007fee:	d417      	bmi.n	8008020 <_malloc_r+0x8c>
 8007ff0:	2b0b      	cmp	r3, #11
 8007ff2:	d903      	bls.n	8007ffc <_malloc_r+0x68>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	441c      	add	r4, r3
 8007ff8:	6025      	str	r5, [r4, #0]
 8007ffa:	e004      	b.n	8008006 <_malloc_r+0x72>
 8007ffc:	6863      	ldr	r3, [r4, #4]
 8007ffe:	42a2      	cmp	r2, r4
 8008000:	bf0c      	ite	eq
 8008002:	600b      	streq	r3, [r1, #0]
 8008004:	6053      	strne	r3, [r2, #4]
 8008006:	4630      	mov	r0, r6
 8008008:	f000 f9d2 	bl	80083b0 <__malloc_unlock>
 800800c:	f104 000b 	add.w	r0, r4, #11
 8008010:	1d23      	adds	r3, r4, #4
 8008012:	f020 0007 	bic.w	r0, r0, #7
 8008016:	1ac2      	subs	r2, r0, r3
 8008018:	d0cc      	beq.n	8007fb4 <_malloc_r+0x20>
 800801a:	1a1b      	subs	r3, r3, r0
 800801c:	50a3      	str	r3, [r4, r2]
 800801e:	e7c9      	b.n	8007fb4 <_malloc_r+0x20>
 8008020:	4622      	mov	r2, r4
 8008022:	6864      	ldr	r4, [r4, #4]
 8008024:	e7cc      	b.n	8007fc0 <_malloc_r+0x2c>
 8008026:	1cc4      	adds	r4, r0, #3
 8008028:	f024 0403 	bic.w	r4, r4, #3
 800802c:	42a0      	cmp	r0, r4
 800802e:	d0e3      	beq.n	8007ff8 <_malloc_r+0x64>
 8008030:	1a21      	subs	r1, r4, r0
 8008032:	4630      	mov	r0, r6
 8008034:	f000 f964 	bl	8008300 <_sbrk_r>
 8008038:	3001      	adds	r0, #1
 800803a:	d1dd      	bne.n	8007ff8 <_malloc_r+0x64>
 800803c:	e7cf      	b.n	8007fde <_malloc_r+0x4a>
 800803e:	bf00      	nop
 8008040:	200001fc 	.word	0x200001fc
 8008044:	20000200 	.word	0x20000200

08008048 <__ssputs_r>:
 8008048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	688e      	ldr	r6, [r1, #8]
 800804e:	4682      	mov	sl, r0
 8008050:	429e      	cmp	r6, r3
 8008052:	460c      	mov	r4, r1
 8008054:	4690      	mov	r8, r2
 8008056:	461f      	mov	r7, r3
 8008058:	d838      	bhi.n	80080cc <__ssputs_r+0x84>
 800805a:	898a      	ldrh	r2, [r1, #12]
 800805c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008060:	d032      	beq.n	80080c8 <__ssputs_r+0x80>
 8008062:	6825      	ldr	r5, [r4, #0]
 8008064:	6909      	ldr	r1, [r1, #16]
 8008066:	3301      	adds	r3, #1
 8008068:	eba5 0901 	sub.w	r9, r5, r1
 800806c:	6965      	ldr	r5, [r4, #20]
 800806e:	444b      	add	r3, r9
 8008070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008078:	106d      	asrs	r5, r5, #1
 800807a:	429d      	cmp	r5, r3
 800807c:	bf38      	it	cc
 800807e:	461d      	movcc	r5, r3
 8008080:	0553      	lsls	r3, r2, #21
 8008082:	d531      	bpl.n	80080e8 <__ssputs_r+0xa0>
 8008084:	4629      	mov	r1, r5
 8008086:	f7ff ff85 	bl	8007f94 <_malloc_r>
 800808a:	4606      	mov	r6, r0
 800808c:	b950      	cbnz	r0, 80080a4 <__ssputs_r+0x5c>
 800808e:	230c      	movs	r3, #12
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	f8ca 3000 	str.w	r3, [sl]
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809e:	81a3      	strh	r3, [r4, #12]
 80080a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a4:	464a      	mov	r2, r9
 80080a6:	6921      	ldr	r1, [r4, #16]
 80080a8:	f7ff fb8a 	bl	80077c0 <memcpy>
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	6126      	str	r6, [r4, #16]
 80080ba:	444e      	add	r6, r9
 80080bc:	6026      	str	r6, [r4, #0]
 80080be:	463e      	mov	r6, r7
 80080c0:	6165      	str	r5, [r4, #20]
 80080c2:	eba5 0509 	sub.w	r5, r5, r9
 80080c6:	60a5      	str	r5, [r4, #8]
 80080c8:	42be      	cmp	r6, r7
 80080ca:	d900      	bls.n	80080ce <__ssputs_r+0x86>
 80080cc:	463e      	mov	r6, r7
 80080ce:	4632      	mov	r2, r6
 80080d0:	4641      	mov	r1, r8
 80080d2:	6820      	ldr	r0, [r4, #0]
 80080d4:	f7fe f83a 	bl	800614c <memmove>
 80080d8:	68a3      	ldr	r3, [r4, #8]
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	1b9b      	subs	r3, r3, r6
 80080de:	4432      	add	r2, r6
 80080e0:	2000      	movs	r0, #0
 80080e2:	60a3      	str	r3, [r4, #8]
 80080e4:	6022      	str	r2, [r4, #0]
 80080e6:	e7db      	b.n	80080a0 <__ssputs_r+0x58>
 80080e8:	462a      	mov	r2, r5
 80080ea:	f000 f967 	bl	80083bc <_realloc_r>
 80080ee:	4606      	mov	r6, r0
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d1e1      	bne.n	80080b8 <__ssputs_r+0x70>
 80080f4:	4650      	mov	r0, sl
 80080f6:	6921      	ldr	r1, [r4, #16]
 80080f8:	f7ff ff00 	bl	8007efc <_free_r>
 80080fc:	e7c7      	b.n	800808e <__ssputs_r+0x46>
	...

08008100 <_svfiprintf_r>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	4698      	mov	r8, r3
 8008106:	898b      	ldrh	r3, [r1, #12]
 8008108:	4607      	mov	r7, r0
 800810a:	061b      	lsls	r3, r3, #24
 800810c:	460d      	mov	r5, r1
 800810e:	4614      	mov	r4, r2
 8008110:	b09d      	sub	sp, #116	; 0x74
 8008112:	d50e      	bpl.n	8008132 <_svfiprintf_r+0x32>
 8008114:	690b      	ldr	r3, [r1, #16]
 8008116:	b963      	cbnz	r3, 8008132 <_svfiprintf_r+0x32>
 8008118:	2140      	movs	r1, #64	; 0x40
 800811a:	f7ff ff3b 	bl	8007f94 <_malloc_r>
 800811e:	6028      	str	r0, [r5, #0]
 8008120:	6128      	str	r0, [r5, #16]
 8008122:	b920      	cbnz	r0, 800812e <_svfiprintf_r+0x2e>
 8008124:	230c      	movs	r3, #12
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
 800812c:	e0d1      	b.n	80082d2 <_svfiprintf_r+0x1d2>
 800812e:	2340      	movs	r3, #64	; 0x40
 8008130:	616b      	str	r3, [r5, #20]
 8008132:	2300      	movs	r3, #0
 8008134:	9309      	str	r3, [sp, #36]	; 0x24
 8008136:	2320      	movs	r3, #32
 8008138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800813c:	2330      	movs	r3, #48	; 0x30
 800813e:	f04f 0901 	mov.w	r9, #1
 8008142:	f8cd 800c 	str.w	r8, [sp, #12]
 8008146:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082ec <_svfiprintf_r+0x1ec>
 800814a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800814e:	4623      	mov	r3, r4
 8008150:	469a      	mov	sl, r3
 8008152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008156:	b10a      	cbz	r2, 800815c <_svfiprintf_r+0x5c>
 8008158:	2a25      	cmp	r2, #37	; 0x25
 800815a:	d1f9      	bne.n	8008150 <_svfiprintf_r+0x50>
 800815c:	ebba 0b04 	subs.w	fp, sl, r4
 8008160:	d00b      	beq.n	800817a <_svfiprintf_r+0x7a>
 8008162:	465b      	mov	r3, fp
 8008164:	4622      	mov	r2, r4
 8008166:	4629      	mov	r1, r5
 8008168:	4638      	mov	r0, r7
 800816a:	f7ff ff6d 	bl	8008048 <__ssputs_r>
 800816e:	3001      	adds	r0, #1
 8008170:	f000 80aa 	beq.w	80082c8 <_svfiprintf_r+0x1c8>
 8008174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008176:	445a      	add	r2, fp
 8008178:	9209      	str	r2, [sp, #36]	; 0x24
 800817a:	f89a 3000 	ldrb.w	r3, [sl]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 80a2 	beq.w	80082c8 <_svfiprintf_r+0x1c8>
 8008184:	2300      	movs	r3, #0
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
 800818a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800818e:	f10a 0a01 	add.w	sl, sl, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800819a:	931a      	str	r3, [sp, #104]	; 0x68
 800819c:	4654      	mov	r4, sl
 800819e:	2205      	movs	r2, #5
 80081a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a4:	4851      	ldr	r0, [pc, #324]	; (80082ec <_svfiprintf_r+0x1ec>)
 80081a6:	f7ff fafd 	bl	80077a4 <memchr>
 80081aa:	9a04      	ldr	r2, [sp, #16]
 80081ac:	b9d8      	cbnz	r0, 80081e6 <_svfiprintf_r+0xe6>
 80081ae:	06d0      	lsls	r0, r2, #27
 80081b0:	bf44      	itt	mi
 80081b2:	2320      	movmi	r3, #32
 80081b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b8:	0711      	lsls	r1, r2, #28
 80081ba:	bf44      	itt	mi
 80081bc:	232b      	movmi	r3, #43	; 0x2b
 80081be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c2:	f89a 3000 	ldrb.w	r3, [sl]
 80081c6:	2b2a      	cmp	r3, #42	; 0x2a
 80081c8:	d015      	beq.n	80081f6 <_svfiprintf_r+0xf6>
 80081ca:	4654      	mov	r4, sl
 80081cc:	2000      	movs	r0, #0
 80081ce:	f04f 0c0a 	mov.w	ip, #10
 80081d2:	9a07      	ldr	r2, [sp, #28]
 80081d4:	4621      	mov	r1, r4
 80081d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081da:	3b30      	subs	r3, #48	; 0x30
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d94e      	bls.n	800827e <_svfiprintf_r+0x17e>
 80081e0:	b1b0      	cbz	r0, 8008210 <_svfiprintf_r+0x110>
 80081e2:	9207      	str	r2, [sp, #28]
 80081e4:	e014      	b.n	8008210 <_svfiprintf_r+0x110>
 80081e6:	eba0 0308 	sub.w	r3, r0, r8
 80081ea:	fa09 f303 	lsl.w	r3, r9, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	46a2      	mov	sl, r4
 80081f2:	9304      	str	r3, [sp, #16]
 80081f4:	e7d2      	b.n	800819c <_svfiprintf_r+0x9c>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	1d19      	adds	r1, r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9103      	str	r1, [sp, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bfbb      	ittet	lt
 8008202:	425b      	neglt	r3, r3
 8008204:	f042 0202 	orrlt.w	r2, r2, #2
 8008208:	9307      	strge	r3, [sp, #28]
 800820a:	9307      	strlt	r3, [sp, #28]
 800820c:	bfb8      	it	lt
 800820e:	9204      	strlt	r2, [sp, #16]
 8008210:	7823      	ldrb	r3, [r4, #0]
 8008212:	2b2e      	cmp	r3, #46	; 0x2e
 8008214:	d10c      	bne.n	8008230 <_svfiprintf_r+0x130>
 8008216:	7863      	ldrb	r3, [r4, #1]
 8008218:	2b2a      	cmp	r3, #42	; 0x2a
 800821a:	d135      	bne.n	8008288 <_svfiprintf_r+0x188>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	3402      	adds	r4, #2
 8008220:	1d1a      	adds	r2, r3, #4
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	9203      	str	r2, [sp, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	bfb8      	it	lt
 800822a:	f04f 33ff 	movlt.w	r3, #4294967295
 800822e:	9305      	str	r3, [sp, #20]
 8008230:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082fc <_svfiprintf_r+0x1fc>
 8008234:	2203      	movs	r2, #3
 8008236:	4650      	mov	r0, sl
 8008238:	7821      	ldrb	r1, [r4, #0]
 800823a:	f7ff fab3 	bl	80077a4 <memchr>
 800823e:	b140      	cbz	r0, 8008252 <_svfiprintf_r+0x152>
 8008240:	2340      	movs	r3, #64	; 0x40
 8008242:	eba0 000a 	sub.w	r0, r0, sl
 8008246:	fa03 f000 	lsl.w	r0, r3, r0
 800824a:	9b04      	ldr	r3, [sp, #16]
 800824c:	3401      	adds	r4, #1
 800824e:	4303      	orrs	r3, r0
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008256:	2206      	movs	r2, #6
 8008258:	4825      	ldr	r0, [pc, #148]	; (80082f0 <_svfiprintf_r+0x1f0>)
 800825a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800825e:	f7ff faa1 	bl	80077a4 <memchr>
 8008262:	2800      	cmp	r0, #0
 8008264:	d038      	beq.n	80082d8 <_svfiprintf_r+0x1d8>
 8008266:	4b23      	ldr	r3, [pc, #140]	; (80082f4 <_svfiprintf_r+0x1f4>)
 8008268:	bb1b      	cbnz	r3, 80082b2 <_svfiprintf_r+0x1b2>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	3307      	adds	r3, #7
 800826e:	f023 0307 	bic.w	r3, r3, #7
 8008272:	3308      	adds	r3, #8
 8008274:	9303      	str	r3, [sp, #12]
 8008276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008278:	4433      	add	r3, r6
 800827a:	9309      	str	r3, [sp, #36]	; 0x24
 800827c:	e767      	b.n	800814e <_svfiprintf_r+0x4e>
 800827e:	460c      	mov	r4, r1
 8008280:	2001      	movs	r0, #1
 8008282:	fb0c 3202 	mla	r2, ip, r2, r3
 8008286:	e7a5      	b.n	80081d4 <_svfiprintf_r+0xd4>
 8008288:	2300      	movs	r3, #0
 800828a:	f04f 0c0a 	mov.w	ip, #10
 800828e:	4619      	mov	r1, r3
 8008290:	3401      	adds	r4, #1
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	4620      	mov	r0, r4
 8008296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800829a:	3a30      	subs	r2, #48	; 0x30
 800829c:	2a09      	cmp	r2, #9
 800829e:	d903      	bls.n	80082a8 <_svfiprintf_r+0x1a8>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d0c5      	beq.n	8008230 <_svfiprintf_r+0x130>
 80082a4:	9105      	str	r1, [sp, #20]
 80082a6:	e7c3      	b.n	8008230 <_svfiprintf_r+0x130>
 80082a8:	4604      	mov	r4, r0
 80082aa:	2301      	movs	r3, #1
 80082ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80082b0:	e7f0      	b.n	8008294 <_svfiprintf_r+0x194>
 80082b2:	ab03      	add	r3, sp, #12
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	462a      	mov	r2, r5
 80082b8:	4638      	mov	r0, r7
 80082ba:	4b0f      	ldr	r3, [pc, #60]	; (80082f8 <_svfiprintf_r+0x1f8>)
 80082bc:	a904      	add	r1, sp, #16
 80082be:	f7fe f805 	bl	80062cc <_printf_float>
 80082c2:	1c42      	adds	r2, r0, #1
 80082c4:	4606      	mov	r6, r0
 80082c6:	d1d6      	bne.n	8008276 <_svfiprintf_r+0x176>
 80082c8:	89ab      	ldrh	r3, [r5, #12]
 80082ca:	065b      	lsls	r3, r3, #25
 80082cc:	f53f af2c 	bmi.w	8008128 <_svfiprintf_r+0x28>
 80082d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082d2:	b01d      	add	sp, #116	; 0x74
 80082d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d8:	ab03      	add	r3, sp, #12
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	462a      	mov	r2, r5
 80082de:	4638      	mov	r0, r7
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <_svfiprintf_r+0x1f8>)
 80082e2:	a904      	add	r1, sp, #16
 80082e4:	f7fe fa8e 	bl	8006804 <_printf_i>
 80082e8:	e7eb      	b.n	80082c2 <_svfiprintf_r+0x1c2>
 80082ea:	bf00      	nop
 80082ec:	08009404 	.word	0x08009404
 80082f0:	0800940e 	.word	0x0800940e
 80082f4:	080062cd 	.word	0x080062cd
 80082f8:	08008049 	.word	0x08008049
 80082fc:	0800940a 	.word	0x0800940a

08008300 <_sbrk_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	2300      	movs	r3, #0
 8008304:	4d05      	ldr	r5, [pc, #20]	; (800831c <_sbrk_r+0x1c>)
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	f7fa fa4e 	bl	80027ac <_sbrk>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_sbrk_r+0x1a>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_sbrk_r+0x1a>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	20000374 	.word	0x20000374

08008320 <__assert_func>:
 8008320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008322:	4614      	mov	r4, r2
 8008324:	461a      	mov	r2, r3
 8008326:	4b09      	ldr	r3, [pc, #36]	; (800834c <__assert_func+0x2c>)
 8008328:	4605      	mov	r5, r0
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68d8      	ldr	r0, [r3, #12]
 800832e:	b14c      	cbz	r4, 8008344 <__assert_func+0x24>
 8008330:	4b07      	ldr	r3, [pc, #28]	; (8008350 <__assert_func+0x30>)
 8008332:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008336:	9100      	str	r1, [sp, #0]
 8008338:	462b      	mov	r3, r5
 800833a:	4906      	ldr	r1, [pc, #24]	; (8008354 <__assert_func+0x34>)
 800833c:	f000 f80e 	bl	800835c <fiprintf>
 8008340:	f000 fa88 	bl	8008854 <abort>
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <__assert_func+0x38>)
 8008346:	461c      	mov	r4, r3
 8008348:	e7f3      	b.n	8008332 <__assert_func+0x12>
 800834a:	bf00      	nop
 800834c:	2000000c 	.word	0x2000000c
 8008350:	08009415 	.word	0x08009415
 8008354:	08009422 	.word	0x08009422
 8008358:	08009450 	.word	0x08009450

0800835c <fiprintf>:
 800835c:	b40e      	push	{r1, r2, r3}
 800835e:	b503      	push	{r0, r1, lr}
 8008360:	4601      	mov	r1, r0
 8008362:	ab03      	add	r3, sp, #12
 8008364:	4805      	ldr	r0, [pc, #20]	; (800837c <fiprintf+0x20>)
 8008366:	f853 2b04 	ldr.w	r2, [r3], #4
 800836a:	6800      	ldr	r0, [r0, #0]
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	f000 f873 	bl	8008458 <_vfiprintf_r>
 8008372:	b002      	add	sp, #8
 8008374:	f85d eb04 	ldr.w	lr, [sp], #4
 8008378:	b003      	add	sp, #12
 800837a:	4770      	bx	lr
 800837c:	2000000c 	.word	0x2000000c

08008380 <__ascii_mbtowc>:
 8008380:	b082      	sub	sp, #8
 8008382:	b901      	cbnz	r1, 8008386 <__ascii_mbtowc+0x6>
 8008384:	a901      	add	r1, sp, #4
 8008386:	b142      	cbz	r2, 800839a <__ascii_mbtowc+0x1a>
 8008388:	b14b      	cbz	r3, 800839e <__ascii_mbtowc+0x1e>
 800838a:	7813      	ldrb	r3, [r2, #0]
 800838c:	600b      	str	r3, [r1, #0]
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	1e10      	subs	r0, r2, #0
 8008392:	bf18      	it	ne
 8008394:	2001      	movne	r0, #1
 8008396:	b002      	add	sp, #8
 8008398:	4770      	bx	lr
 800839a:	4610      	mov	r0, r2
 800839c:	e7fb      	b.n	8008396 <__ascii_mbtowc+0x16>
 800839e:	f06f 0001 	mvn.w	r0, #1
 80083a2:	e7f8      	b.n	8008396 <__ascii_mbtowc+0x16>

080083a4 <__malloc_lock>:
 80083a4:	4801      	ldr	r0, [pc, #4]	; (80083ac <__malloc_lock+0x8>)
 80083a6:	f000 bc15 	b.w	8008bd4 <__retarget_lock_acquire_recursive>
 80083aa:	bf00      	nop
 80083ac:	2000037c 	.word	0x2000037c

080083b0 <__malloc_unlock>:
 80083b0:	4801      	ldr	r0, [pc, #4]	; (80083b8 <__malloc_unlock+0x8>)
 80083b2:	f000 bc10 	b.w	8008bd6 <__retarget_lock_release_recursive>
 80083b6:	bf00      	nop
 80083b8:	2000037c 	.word	0x2000037c

080083bc <_realloc_r>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	4607      	mov	r7, r0
 80083c0:	4614      	mov	r4, r2
 80083c2:	460e      	mov	r6, r1
 80083c4:	b921      	cbnz	r1, 80083d0 <_realloc_r+0x14>
 80083c6:	4611      	mov	r1, r2
 80083c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083cc:	f7ff bde2 	b.w	8007f94 <_malloc_r>
 80083d0:	b922      	cbnz	r2, 80083dc <_realloc_r+0x20>
 80083d2:	f7ff fd93 	bl	8007efc <_free_r>
 80083d6:	4625      	mov	r5, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083dc:	f000 fc60 	bl	8008ca0 <_malloc_usable_size_r>
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d20f      	bcs.n	8008404 <_realloc_r+0x48>
 80083e4:	4621      	mov	r1, r4
 80083e6:	4638      	mov	r0, r7
 80083e8:	f7ff fdd4 	bl	8007f94 <_malloc_r>
 80083ec:	4605      	mov	r5, r0
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d0f2      	beq.n	80083d8 <_realloc_r+0x1c>
 80083f2:	4631      	mov	r1, r6
 80083f4:	4622      	mov	r2, r4
 80083f6:	f7ff f9e3 	bl	80077c0 <memcpy>
 80083fa:	4631      	mov	r1, r6
 80083fc:	4638      	mov	r0, r7
 80083fe:	f7ff fd7d 	bl	8007efc <_free_r>
 8008402:	e7e9      	b.n	80083d8 <_realloc_r+0x1c>
 8008404:	4635      	mov	r5, r6
 8008406:	e7e7      	b.n	80083d8 <_realloc_r+0x1c>

08008408 <__sfputc_r>:
 8008408:	6893      	ldr	r3, [r2, #8]
 800840a:	b410      	push	{r4}
 800840c:	3b01      	subs	r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	6093      	str	r3, [r2, #8]
 8008412:	da07      	bge.n	8008424 <__sfputc_r+0x1c>
 8008414:	6994      	ldr	r4, [r2, #24]
 8008416:	42a3      	cmp	r3, r4
 8008418:	db01      	blt.n	800841e <__sfputc_r+0x16>
 800841a:	290a      	cmp	r1, #10
 800841c:	d102      	bne.n	8008424 <__sfputc_r+0x1c>
 800841e:	bc10      	pop	{r4}
 8008420:	f000 b94a 	b.w	80086b8 <__swbuf_r>
 8008424:	6813      	ldr	r3, [r2, #0]
 8008426:	1c58      	adds	r0, r3, #1
 8008428:	6010      	str	r0, [r2, #0]
 800842a:	7019      	strb	r1, [r3, #0]
 800842c:	4608      	mov	r0, r1
 800842e:	bc10      	pop	{r4}
 8008430:	4770      	bx	lr

08008432 <__sfputs_r>:
 8008432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008434:	4606      	mov	r6, r0
 8008436:	460f      	mov	r7, r1
 8008438:	4614      	mov	r4, r2
 800843a:	18d5      	adds	r5, r2, r3
 800843c:	42ac      	cmp	r4, r5
 800843e:	d101      	bne.n	8008444 <__sfputs_r+0x12>
 8008440:	2000      	movs	r0, #0
 8008442:	e007      	b.n	8008454 <__sfputs_r+0x22>
 8008444:	463a      	mov	r2, r7
 8008446:	4630      	mov	r0, r6
 8008448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800844c:	f7ff ffdc 	bl	8008408 <__sfputc_r>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d1f3      	bne.n	800843c <__sfputs_r+0xa>
 8008454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008458 <_vfiprintf_r>:
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	460d      	mov	r5, r1
 800845e:	4614      	mov	r4, r2
 8008460:	4698      	mov	r8, r3
 8008462:	4606      	mov	r6, r0
 8008464:	b09d      	sub	sp, #116	; 0x74
 8008466:	b118      	cbz	r0, 8008470 <_vfiprintf_r+0x18>
 8008468:	6983      	ldr	r3, [r0, #24]
 800846a:	b90b      	cbnz	r3, 8008470 <_vfiprintf_r+0x18>
 800846c:	f000 fb14 	bl	8008a98 <__sinit>
 8008470:	4b89      	ldr	r3, [pc, #548]	; (8008698 <_vfiprintf_r+0x240>)
 8008472:	429d      	cmp	r5, r3
 8008474:	d11b      	bne.n	80084ae <_vfiprintf_r+0x56>
 8008476:	6875      	ldr	r5, [r6, #4]
 8008478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800847a:	07d9      	lsls	r1, r3, #31
 800847c:	d405      	bmi.n	800848a <_vfiprintf_r+0x32>
 800847e:	89ab      	ldrh	r3, [r5, #12]
 8008480:	059a      	lsls	r2, r3, #22
 8008482:	d402      	bmi.n	800848a <_vfiprintf_r+0x32>
 8008484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008486:	f000 fba5 	bl	8008bd4 <__retarget_lock_acquire_recursive>
 800848a:	89ab      	ldrh	r3, [r5, #12]
 800848c:	071b      	lsls	r3, r3, #28
 800848e:	d501      	bpl.n	8008494 <_vfiprintf_r+0x3c>
 8008490:	692b      	ldr	r3, [r5, #16]
 8008492:	b9eb      	cbnz	r3, 80084d0 <_vfiprintf_r+0x78>
 8008494:	4629      	mov	r1, r5
 8008496:	4630      	mov	r0, r6
 8008498:	f000 f96e 	bl	8008778 <__swsetup_r>
 800849c:	b1c0      	cbz	r0, 80084d0 <_vfiprintf_r+0x78>
 800849e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084a0:	07dc      	lsls	r4, r3, #31
 80084a2:	d50e      	bpl.n	80084c2 <_vfiprintf_r+0x6a>
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	b01d      	add	sp, #116	; 0x74
 80084aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ae:	4b7b      	ldr	r3, [pc, #492]	; (800869c <_vfiprintf_r+0x244>)
 80084b0:	429d      	cmp	r5, r3
 80084b2:	d101      	bne.n	80084b8 <_vfiprintf_r+0x60>
 80084b4:	68b5      	ldr	r5, [r6, #8]
 80084b6:	e7df      	b.n	8008478 <_vfiprintf_r+0x20>
 80084b8:	4b79      	ldr	r3, [pc, #484]	; (80086a0 <_vfiprintf_r+0x248>)
 80084ba:	429d      	cmp	r5, r3
 80084bc:	bf08      	it	eq
 80084be:	68f5      	ldreq	r5, [r6, #12]
 80084c0:	e7da      	b.n	8008478 <_vfiprintf_r+0x20>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	0598      	lsls	r0, r3, #22
 80084c6:	d4ed      	bmi.n	80084a4 <_vfiprintf_r+0x4c>
 80084c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ca:	f000 fb84 	bl	8008bd6 <__retarget_lock_release_recursive>
 80084ce:	e7e9      	b.n	80084a4 <_vfiprintf_r+0x4c>
 80084d0:	2300      	movs	r3, #0
 80084d2:	9309      	str	r3, [sp, #36]	; 0x24
 80084d4:	2320      	movs	r3, #32
 80084d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084da:	2330      	movs	r3, #48	; 0x30
 80084dc:	f04f 0901 	mov.w	r9, #1
 80084e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80086a4 <_vfiprintf_r+0x24c>
 80084e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ec:	4623      	mov	r3, r4
 80084ee:	469a      	mov	sl, r3
 80084f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084f4:	b10a      	cbz	r2, 80084fa <_vfiprintf_r+0xa2>
 80084f6:	2a25      	cmp	r2, #37	; 0x25
 80084f8:	d1f9      	bne.n	80084ee <_vfiprintf_r+0x96>
 80084fa:	ebba 0b04 	subs.w	fp, sl, r4
 80084fe:	d00b      	beq.n	8008518 <_vfiprintf_r+0xc0>
 8008500:	465b      	mov	r3, fp
 8008502:	4622      	mov	r2, r4
 8008504:	4629      	mov	r1, r5
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff93 	bl	8008432 <__sfputs_r>
 800850c:	3001      	adds	r0, #1
 800850e:	f000 80aa 	beq.w	8008666 <_vfiprintf_r+0x20e>
 8008512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008514:	445a      	add	r2, fp
 8008516:	9209      	str	r2, [sp, #36]	; 0x24
 8008518:	f89a 3000 	ldrb.w	r3, [sl]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 80a2 	beq.w	8008666 <_vfiprintf_r+0x20e>
 8008522:	2300      	movs	r3, #0
 8008524:	f04f 32ff 	mov.w	r2, #4294967295
 8008528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800852c:	f10a 0a01 	add.w	sl, sl, #1
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	9307      	str	r3, [sp, #28]
 8008534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008538:	931a      	str	r3, [sp, #104]	; 0x68
 800853a:	4654      	mov	r4, sl
 800853c:	2205      	movs	r2, #5
 800853e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008542:	4858      	ldr	r0, [pc, #352]	; (80086a4 <_vfiprintf_r+0x24c>)
 8008544:	f7ff f92e 	bl	80077a4 <memchr>
 8008548:	9a04      	ldr	r2, [sp, #16]
 800854a:	b9d8      	cbnz	r0, 8008584 <_vfiprintf_r+0x12c>
 800854c:	06d1      	lsls	r1, r2, #27
 800854e:	bf44      	itt	mi
 8008550:	2320      	movmi	r3, #32
 8008552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008556:	0713      	lsls	r3, r2, #28
 8008558:	bf44      	itt	mi
 800855a:	232b      	movmi	r3, #43	; 0x2b
 800855c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008560:	f89a 3000 	ldrb.w	r3, [sl]
 8008564:	2b2a      	cmp	r3, #42	; 0x2a
 8008566:	d015      	beq.n	8008594 <_vfiprintf_r+0x13c>
 8008568:	4654      	mov	r4, sl
 800856a:	2000      	movs	r0, #0
 800856c:	f04f 0c0a 	mov.w	ip, #10
 8008570:	9a07      	ldr	r2, [sp, #28]
 8008572:	4621      	mov	r1, r4
 8008574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008578:	3b30      	subs	r3, #48	; 0x30
 800857a:	2b09      	cmp	r3, #9
 800857c:	d94e      	bls.n	800861c <_vfiprintf_r+0x1c4>
 800857e:	b1b0      	cbz	r0, 80085ae <_vfiprintf_r+0x156>
 8008580:	9207      	str	r2, [sp, #28]
 8008582:	e014      	b.n	80085ae <_vfiprintf_r+0x156>
 8008584:	eba0 0308 	sub.w	r3, r0, r8
 8008588:	fa09 f303 	lsl.w	r3, r9, r3
 800858c:	4313      	orrs	r3, r2
 800858e:	46a2      	mov	sl, r4
 8008590:	9304      	str	r3, [sp, #16]
 8008592:	e7d2      	b.n	800853a <_vfiprintf_r+0xe2>
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	1d19      	adds	r1, r3, #4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	9103      	str	r1, [sp, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	bfbb      	ittet	lt
 80085a0:	425b      	neglt	r3, r3
 80085a2:	f042 0202 	orrlt.w	r2, r2, #2
 80085a6:	9307      	strge	r3, [sp, #28]
 80085a8:	9307      	strlt	r3, [sp, #28]
 80085aa:	bfb8      	it	lt
 80085ac:	9204      	strlt	r2, [sp, #16]
 80085ae:	7823      	ldrb	r3, [r4, #0]
 80085b0:	2b2e      	cmp	r3, #46	; 0x2e
 80085b2:	d10c      	bne.n	80085ce <_vfiprintf_r+0x176>
 80085b4:	7863      	ldrb	r3, [r4, #1]
 80085b6:	2b2a      	cmp	r3, #42	; 0x2a
 80085b8:	d135      	bne.n	8008626 <_vfiprintf_r+0x1ce>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	3402      	adds	r4, #2
 80085be:	1d1a      	adds	r2, r3, #4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	9203      	str	r2, [sp, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfb8      	it	lt
 80085c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086b4 <_vfiprintf_r+0x25c>
 80085d2:	2203      	movs	r2, #3
 80085d4:	4650      	mov	r0, sl
 80085d6:	7821      	ldrb	r1, [r4, #0]
 80085d8:	f7ff f8e4 	bl	80077a4 <memchr>
 80085dc:	b140      	cbz	r0, 80085f0 <_vfiprintf_r+0x198>
 80085de:	2340      	movs	r3, #64	; 0x40
 80085e0:	eba0 000a 	sub.w	r0, r0, sl
 80085e4:	fa03 f000 	lsl.w	r0, r3, r0
 80085e8:	9b04      	ldr	r3, [sp, #16]
 80085ea:	3401      	adds	r4, #1
 80085ec:	4303      	orrs	r3, r0
 80085ee:	9304      	str	r3, [sp, #16]
 80085f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f4:	2206      	movs	r2, #6
 80085f6:	482c      	ldr	r0, [pc, #176]	; (80086a8 <_vfiprintf_r+0x250>)
 80085f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085fc:	f7ff f8d2 	bl	80077a4 <memchr>
 8008600:	2800      	cmp	r0, #0
 8008602:	d03f      	beq.n	8008684 <_vfiprintf_r+0x22c>
 8008604:	4b29      	ldr	r3, [pc, #164]	; (80086ac <_vfiprintf_r+0x254>)
 8008606:	bb1b      	cbnz	r3, 8008650 <_vfiprintf_r+0x1f8>
 8008608:	9b03      	ldr	r3, [sp, #12]
 800860a:	3307      	adds	r3, #7
 800860c:	f023 0307 	bic.w	r3, r3, #7
 8008610:	3308      	adds	r3, #8
 8008612:	9303      	str	r3, [sp, #12]
 8008614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008616:	443b      	add	r3, r7
 8008618:	9309      	str	r3, [sp, #36]	; 0x24
 800861a:	e767      	b.n	80084ec <_vfiprintf_r+0x94>
 800861c:	460c      	mov	r4, r1
 800861e:	2001      	movs	r0, #1
 8008620:	fb0c 3202 	mla	r2, ip, r2, r3
 8008624:	e7a5      	b.n	8008572 <_vfiprintf_r+0x11a>
 8008626:	2300      	movs	r3, #0
 8008628:	f04f 0c0a 	mov.w	ip, #10
 800862c:	4619      	mov	r1, r3
 800862e:	3401      	adds	r4, #1
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	4620      	mov	r0, r4
 8008634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008638:	3a30      	subs	r2, #48	; 0x30
 800863a:	2a09      	cmp	r2, #9
 800863c:	d903      	bls.n	8008646 <_vfiprintf_r+0x1ee>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0c5      	beq.n	80085ce <_vfiprintf_r+0x176>
 8008642:	9105      	str	r1, [sp, #20]
 8008644:	e7c3      	b.n	80085ce <_vfiprintf_r+0x176>
 8008646:	4604      	mov	r4, r0
 8008648:	2301      	movs	r3, #1
 800864a:	fb0c 2101 	mla	r1, ip, r1, r2
 800864e:	e7f0      	b.n	8008632 <_vfiprintf_r+0x1da>
 8008650:	ab03      	add	r3, sp, #12
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	462a      	mov	r2, r5
 8008656:	4630      	mov	r0, r6
 8008658:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <_vfiprintf_r+0x258>)
 800865a:	a904      	add	r1, sp, #16
 800865c:	f7fd fe36 	bl	80062cc <_printf_float>
 8008660:	4607      	mov	r7, r0
 8008662:	1c78      	adds	r0, r7, #1
 8008664:	d1d6      	bne.n	8008614 <_vfiprintf_r+0x1bc>
 8008666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008668:	07d9      	lsls	r1, r3, #31
 800866a:	d405      	bmi.n	8008678 <_vfiprintf_r+0x220>
 800866c:	89ab      	ldrh	r3, [r5, #12]
 800866e:	059a      	lsls	r2, r3, #22
 8008670:	d402      	bmi.n	8008678 <_vfiprintf_r+0x220>
 8008672:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008674:	f000 faaf 	bl	8008bd6 <__retarget_lock_release_recursive>
 8008678:	89ab      	ldrh	r3, [r5, #12]
 800867a:	065b      	lsls	r3, r3, #25
 800867c:	f53f af12 	bmi.w	80084a4 <_vfiprintf_r+0x4c>
 8008680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008682:	e711      	b.n	80084a8 <_vfiprintf_r+0x50>
 8008684:	ab03      	add	r3, sp, #12
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	462a      	mov	r2, r5
 800868a:	4630      	mov	r0, r6
 800868c:	4b08      	ldr	r3, [pc, #32]	; (80086b0 <_vfiprintf_r+0x258>)
 800868e:	a904      	add	r1, sp, #16
 8008690:	f7fe f8b8 	bl	8006804 <_printf_i>
 8008694:	e7e4      	b.n	8008660 <_vfiprintf_r+0x208>
 8008696:	bf00      	nop
 8008698:	0800957c 	.word	0x0800957c
 800869c:	0800959c 	.word	0x0800959c
 80086a0:	0800955c 	.word	0x0800955c
 80086a4:	08009404 	.word	0x08009404
 80086a8:	0800940e 	.word	0x0800940e
 80086ac:	080062cd 	.word	0x080062cd
 80086b0:	08008433 	.word	0x08008433
 80086b4:	0800940a 	.word	0x0800940a

080086b8 <__swbuf_r>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	460e      	mov	r6, r1
 80086bc:	4614      	mov	r4, r2
 80086be:	4605      	mov	r5, r0
 80086c0:	b118      	cbz	r0, 80086ca <__swbuf_r+0x12>
 80086c2:	6983      	ldr	r3, [r0, #24]
 80086c4:	b90b      	cbnz	r3, 80086ca <__swbuf_r+0x12>
 80086c6:	f000 f9e7 	bl	8008a98 <__sinit>
 80086ca:	4b21      	ldr	r3, [pc, #132]	; (8008750 <__swbuf_r+0x98>)
 80086cc:	429c      	cmp	r4, r3
 80086ce:	d12b      	bne.n	8008728 <__swbuf_r+0x70>
 80086d0:	686c      	ldr	r4, [r5, #4]
 80086d2:	69a3      	ldr	r3, [r4, #24]
 80086d4:	60a3      	str	r3, [r4, #8]
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	071a      	lsls	r2, r3, #28
 80086da:	d52f      	bpl.n	800873c <__swbuf_r+0x84>
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	b36b      	cbz	r3, 800873c <__swbuf_r+0x84>
 80086e0:	6923      	ldr	r3, [r4, #16]
 80086e2:	6820      	ldr	r0, [r4, #0]
 80086e4:	b2f6      	uxtb	r6, r6
 80086e6:	1ac0      	subs	r0, r0, r3
 80086e8:	6963      	ldr	r3, [r4, #20]
 80086ea:	4637      	mov	r7, r6
 80086ec:	4283      	cmp	r3, r0
 80086ee:	dc04      	bgt.n	80086fa <__swbuf_r+0x42>
 80086f0:	4621      	mov	r1, r4
 80086f2:	4628      	mov	r0, r5
 80086f4:	f000 f93c 	bl	8008970 <_fflush_r>
 80086f8:	bb30      	cbnz	r0, 8008748 <__swbuf_r+0x90>
 80086fa:	68a3      	ldr	r3, [r4, #8]
 80086fc:	3001      	adds	r0, #1
 80086fe:	3b01      	subs	r3, #1
 8008700:	60a3      	str	r3, [r4, #8]
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	6022      	str	r2, [r4, #0]
 8008708:	701e      	strb	r6, [r3, #0]
 800870a:	6963      	ldr	r3, [r4, #20]
 800870c:	4283      	cmp	r3, r0
 800870e:	d004      	beq.n	800871a <__swbuf_r+0x62>
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	07db      	lsls	r3, r3, #31
 8008714:	d506      	bpl.n	8008724 <__swbuf_r+0x6c>
 8008716:	2e0a      	cmp	r6, #10
 8008718:	d104      	bne.n	8008724 <__swbuf_r+0x6c>
 800871a:	4621      	mov	r1, r4
 800871c:	4628      	mov	r0, r5
 800871e:	f000 f927 	bl	8008970 <_fflush_r>
 8008722:	b988      	cbnz	r0, 8008748 <__swbuf_r+0x90>
 8008724:	4638      	mov	r0, r7
 8008726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008728:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <__swbuf_r+0x9c>)
 800872a:	429c      	cmp	r4, r3
 800872c:	d101      	bne.n	8008732 <__swbuf_r+0x7a>
 800872e:	68ac      	ldr	r4, [r5, #8]
 8008730:	e7cf      	b.n	80086d2 <__swbuf_r+0x1a>
 8008732:	4b09      	ldr	r3, [pc, #36]	; (8008758 <__swbuf_r+0xa0>)
 8008734:	429c      	cmp	r4, r3
 8008736:	bf08      	it	eq
 8008738:	68ec      	ldreq	r4, [r5, #12]
 800873a:	e7ca      	b.n	80086d2 <__swbuf_r+0x1a>
 800873c:	4621      	mov	r1, r4
 800873e:	4628      	mov	r0, r5
 8008740:	f000 f81a 	bl	8008778 <__swsetup_r>
 8008744:	2800      	cmp	r0, #0
 8008746:	d0cb      	beq.n	80086e0 <__swbuf_r+0x28>
 8008748:	f04f 37ff 	mov.w	r7, #4294967295
 800874c:	e7ea      	b.n	8008724 <__swbuf_r+0x6c>
 800874e:	bf00      	nop
 8008750:	0800957c 	.word	0x0800957c
 8008754:	0800959c 	.word	0x0800959c
 8008758:	0800955c 	.word	0x0800955c

0800875c <__ascii_wctomb>:
 800875c:	4603      	mov	r3, r0
 800875e:	4608      	mov	r0, r1
 8008760:	b141      	cbz	r1, 8008774 <__ascii_wctomb+0x18>
 8008762:	2aff      	cmp	r2, #255	; 0xff
 8008764:	d904      	bls.n	8008770 <__ascii_wctomb+0x14>
 8008766:	228a      	movs	r2, #138	; 0x8a
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	4770      	bx	lr
 8008770:	2001      	movs	r0, #1
 8008772:	700a      	strb	r2, [r1, #0]
 8008774:	4770      	bx	lr
	...

08008778 <__swsetup_r>:
 8008778:	4b32      	ldr	r3, [pc, #200]	; (8008844 <__swsetup_r+0xcc>)
 800877a:	b570      	push	{r4, r5, r6, lr}
 800877c:	681d      	ldr	r5, [r3, #0]
 800877e:	4606      	mov	r6, r0
 8008780:	460c      	mov	r4, r1
 8008782:	b125      	cbz	r5, 800878e <__swsetup_r+0x16>
 8008784:	69ab      	ldr	r3, [r5, #24]
 8008786:	b913      	cbnz	r3, 800878e <__swsetup_r+0x16>
 8008788:	4628      	mov	r0, r5
 800878a:	f000 f985 	bl	8008a98 <__sinit>
 800878e:	4b2e      	ldr	r3, [pc, #184]	; (8008848 <__swsetup_r+0xd0>)
 8008790:	429c      	cmp	r4, r3
 8008792:	d10f      	bne.n	80087b4 <__swsetup_r+0x3c>
 8008794:	686c      	ldr	r4, [r5, #4]
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800879c:	0719      	lsls	r1, r3, #28
 800879e:	d42c      	bmi.n	80087fa <__swsetup_r+0x82>
 80087a0:	06dd      	lsls	r5, r3, #27
 80087a2:	d411      	bmi.n	80087c8 <__swsetup_r+0x50>
 80087a4:	2309      	movs	r3, #9
 80087a6:	6033      	str	r3, [r6, #0]
 80087a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	e03e      	b.n	8008832 <__swsetup_r+0xba>
 80087b4:	4b25      	ldr	r3, [pc, #148]	; (800884c <__swsetup_r+0xd4>)
 80087b6:	429c      	cmp	r4, r3
 80087b8:	d101      	bne.n	80087be <__swsetup_r+0x46>
 80087ba:	68ac      	ldr	r4, [r5, #8]
 80087bc:	e7eb      	b.n	8008796 <__swsetup_r+0x1e>
 80087be:	4b24      	ldr	r3, [pc, #144]	; (8008850 <__swsetup_r+0xd8>)
 80087c0:	429c      	cmp	r4, r3
 80087c2:	bf08      	it	eq
 80087c4:	68ec      	ldreq	r4, [r5, #12]
 80087c6:	e7e6      	b.n	8008796 <__swsetup_r+0x1e>
 80087c8:	0758      	lsls	r0, r3, #29
 80087ca:	d512      	bpl.n	80087f2 <__swsetup_r+0x7a>
 80087cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ce:	b141      	cbz	r1, 80087e2 <__swsetup_r+0x6a>
 80087d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087d4:	4299      	cmp	r1, r3
 80087d6:	d002      	beq.n	80087de <__swsetup_r+0x66>
 80087d8:	4630      	mov	r0, r6
 80087da:	f7ff fb8f 	bl	8007efc <_free_r>
 80087de:	2300      	movs	r3, #0
 80087e0:	6363      	str	r3, [r4, #52]	; 0x34
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087e8:	81a3      	strh	r3, [r4, #12]
 80087ea:	2300      	movs	r3, #0
 80087ec:	6063      	str	r3, [r4, #4]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	f043 0308 	orr.w	r3, r3, #8
 80087f8:	81a3      	strh	r3, [r4, #12]
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	b94b      	cbnz	r3, 8008812 <__swsetup_r+0x9a>
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008808:	d003      	beq.n	8008812 <__swsetup_r+0x9a>
 800880a:	4621      	mov	r1, r4
 800880c:	4630      	mov	r0, r6
 800880e:	f000 fa07 	bl	8008c20 <__smakebuf_r>
 8008812:	89a0      	ldrh	r0, [r4, #12]
 8008814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008818:	f010 0301 	ands.w	r3, r0, #1
 800881c:	d00a      	beq.n	8008834 <__swsetup_r+0xbc>
 800881e:	2300      	movs	r3, #0
 8008820:	60a3      	str	r3, [r4, #8]
 8008822:	6963      	ldr	r3, [r4, #20]
 8008824:	425b      	negs	r3, r3
 8008826:	61a3      	str	r3, [r4, #24]
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	b943      	cbnz	r3, 800883e <__swsetup_r+0xc6>
 800882c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008830:	d1ba      	bne.n	80087a8 <__swsetup_r+0x30>
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	0781      	lsls	r1, r0, #30
 8008836:	bf58      	it	pl
 8008838:	6963      	ldrpl	r3, [r4, #20]
 800883a:	60a3      	str	r3, [r4, #8]
 800883c:	e7f4      	b.n	8008828 <__swsetup_r+0xb0>
 800883e:	2000      	movs	r0, #0
 8008840:	e7f7      	b.n	8008832 <__swsetup_r+0xba>
 8008842:	bf00      	nop
 8008844:	2000000c 	.word	0x2000000c
 8008848:	0800957c 	.word	0x0800957c
 800884c:	0800959c 	.word	0x0800959c
 8008850:	0800955c 	.word	0x0800955c

08008854 <abort>:
 8008854:	2006      	movs	r0, #6
 8008856:	b508      	push	{r3, lr}
 8008858:	f000 fa52 	bl	8008d00 <raise>
 800885c:	2001      	movs	r0, #1
 800885e:	f7f9 ff32 	bl	80026c6 <_exit>
	...

08008864 <__sflush_r>:
 8008864:	898a      	ldrh	r2, [r1, #12]
 8008866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886a:	4605      	mov	r5, r0
 800886c:	0710      	lsls	r0, r2, #28
 800886e:	460c      	mov	r4, r1
 8008870:	d458      	bmi.n	8008924 <__sflush_r+0xc0>
 8008872:	684b      	ldr	r3, [r1, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	dc05      	bgt.n	8008884 <__sflush_r+0x20>
 8008878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	dc02      	bgt.n	8008884 <__sflush_r+0x20>
 800887e:	2000      	movs	r0, #0
 8008880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008886:	2e00      	cmp	r6, #0
 8008888:	d0f9      	beq.n	800887e <__sflush_r+0x1a>
 800888a:	2300      	movs	r3, #0
 800888c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008890:	682f      	ldr	r7, [r5, #0]
 8008892:	602b      	str	r3, [r5, #0]
 8008894:	d032      	beq.n	80088fc <__sflush_r+0x98>
 8008896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	075a      	lsls	r2, r3, #29
 800889c:	d505      	bpl.n	80088aa <__sflush_r+0x46>
 800889e:	6863      	ldr	r3, [r4, #4]
 80088a0:	1ac0      	subs	r0, r0, r3
 80088a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088a4:	b10b      	cbz	r3, 80088aa <__sflush_r+0x46>
 80088a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088a8:	1ac0      	subs	r0, r0, r3
 80088aa:	2300      	movs	r3, #0
 80088ac:	4602      	mov	r2, r0
 80088ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088b0:	4628      	mov	r0, r5
 80088b2:	6a21      	ldr	r1, [r4, #32]
 80088b4:	47b0      	blx	r6
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	d106      	bne.n	80088ca <__sflush_r+0x66>
 80088bc:	6829      	ldr	r1, [r5, #0]
 80088be:	291d      	cmp	r1, #29
 80088c0:	d82c      	bhi.n	800891c <__sflush_r+0xb8>
 80088c2:	4a2a      	ldr	r2, [pc, #168]	; (800896c <__sflush_r+0x108>)
 80088c4:	40ca      	lsrs	r2, r1
 80088c6:	07d6      	lsls	r6, r2, #31
 80088c8:	d528      	bpl.n	800891c <__sflush_r+0xb8>
 80088ca:	2200      	movs	r2, #0
 80088cc:	6062      	str	r2, [r4, #4]
 80088ce:	6922      	ldr	r2, [r4, #16]
 80088d0:	04d9      	lsls	r1, r3, #19
 80088d2:	6022      	str	r2, [r4, #0]
 80088d4:	d504      	bpl.n	80088e0 <__sflush_r+0x7c>
 80088d6:	1c42      	adds	r2, r0, #1
 80088d8:	d101      	bne.n	80088de <__sflush_r+0x7a>
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	b903      	cbnz	r3, 80088e0 <__sflush_r+0x7c>
 80088de:	6560      	str	r0, [r4, #84]	; 0x54
 80088e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088e2:	602f      	str	r7, [r5, #0]
 80088e4:	2900      	cmp	r1, #0
 80088e6:	d0ca      	beq.n	800887e <__sflush_r+0x1a>
 80088e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088ec:	4299      	cmp	r1, r3
 80088ee:	d002      	beq.n	80088f6 <__sflush_r+0x92>
 80088f0:	4628      	mov	r0, r5
 80088f2:	f7ff fb03 	bl	8007efc <_free_r>
 80088f6:	2000      	movs	r0, #0
 80088f8:	6360      	str	r0, [r4, #52]	; 0x34
 80088fa:	e7c1      	b.n	8008880 <__sflush_r+0x1c>
 80088fc:	6a21      	ldr	r1, [r4, #32]
 80088fe:	2301      	movs	r3, #1
 8008900:	4628      	mov	r0, r5
 8008902:	47b0      	blx	r6
 8008904:	1c41      	adds	r1, r0, #1
 8008906:	d1c7      	bne.n	8008898 <__sflush_r+0x34>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0c4      	beq.n	8008898 <__sflush_r+0x34>
 800890e:	2b1d      	cmp	r3, #29
 8008910:	d001      	beq.n	8008916 <__sflush_r+0xb2>
 8008912:	2b16      	cmp	r3, #22
 8008914:	d101      	bne.n	800891a <__sflush_r+0xb6>
 8008916:	602f      	str	r7, [r5, #0]
 8008918:	e7b1      	b.n	800887e <__sflush_r+0x1a>
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008920:	81a3      	strh	r3, [r4, #12]
 8008922:	e7ad      	b.n	8008880 <__sflush_r+0x1c>
 8008924:	690f      	ldr	r7, [r1, #16]
 8008926:	2f00      	cmp	r7, #0
 8008928:	d0a9      	beq.n	800887e <__sflush_r+0x1a>
 800892a:	0793      	lsls	r3, r2, #30
 800892c:	bf18      	it	ne
 800892e:	2300      	movne	r3, #0
 8008930:	680e      	ldr	r6, [r1, #0]
 8008932:	bf08      	it	eq
 8008934:	694b      	ldreq	r3, [r1, #20]
 8008936:	eba6 0807 	sub.w	r8, r6, r7
 800893a:	600f      	str	r7, [r1, #0]
 800893c:	608b      	str	r3, [r1, #8]
 800893e:	f1b8 0f00 	cmp.w	r8, #0
 8008942:	dd9c      	ble.n	800887e <__sflush_r+0x1a>
 8008944:	4643      	mov	r3, r8
 8008946:	463a      	mov	r2, r7
 8008948:	4628      	mov	r0, r5
 800894a:	6a21      	ldr	r1, [r4, #32]
 800894c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800894e:	47b0      	blx	r6
 8008950:	2800      	cmp	r0, #0
 8008952:	dc06      	bgt.n	8008962 <__sflush_r+0xfe>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f04f 30ff 	mov.w	r0, #4294967295
 800895a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	e78e      	b.n	8008880 <__sflush_r+0x1c>
 8008962:	4407      	add	r7, r0
 8008964:	eba8 0800 	sub.w	r8, r8, r0
 8008968:	e7e9      	b.n	800893e <__sflush_r+0xda>
 800896a:	bf00      	nop
 800896c:	20400001 	.word	0x20400001

08008970 <_fflush_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	690b      	ldr	r3, [r1, #16]
 8008974:	4605      	mov	r5, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b913      	cbnz	r3, 8008980 <_fflush_r+0x10>
 800897a:	2500      	movs	r5, #0
 800897c:	4628      	mov	r0, r5
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	b118      	cbz	r0, 800898a <_fflush_r+0x1a>
 8008982:	6983      	ldr	r3, [r0, #24]
 8008984:	b90b      	cbnz	r3, 800898a <_fflush_r+0x1a>
 8008986:	f000 f887 	bl	8008a98 <__sinit>
 800898a:	4b14      	ldr	r3, [pc, #80]	; (80089dc <_fflush_r+0x6c>)
 800898c:	429c      	cmp	r4, r3
 800898e:	d11b      	bne.n	80089c8 <_fflush_r+0x58>
 8008990:	686c      	ldr	r4, [r5, #4]
 8008992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0ef      	beq.n	800897a <_fflush_r+0xa>
 800899a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800899c:	07d0      	lsls	r0, r2, #31
 800899e:	d404      	bmi.n	80089aa <_fflush_r+0x3a>
 80089a0:	0599      	lsls	r1, r3, #22
 80089a2:	d402      	bmi.n	80089aa <_fflush_r+0x3a>
 80089a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a6:	f000 f915 	bl	8008bd4 <__retarget_lock_acquire_recursive>
 80089aa:	4628      	mov	r0, r5
 80089ac:	4621      	mov	r1, r4
 80089ae:	f7ff ff59 	bl	8008864 <__sflush_r>
 80089b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b4:	4605      	mov	r5, r0
 80089b6:	07da      	lsls	r2, r3, #31
 80089b8:	d4e0      	bmi.n	800897c <_fflush_r+0xc>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	059b      	lsls	r3, r3, #22
 80089be:	d4dd      	bmi.n	800897c <_fflush_r+0xc>
 80089c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c2:	f000 f908 	bl	8008bd6 <__retarget_lock_release_recursive>
 80089c6:	e7d9      	b.n	800897c <_fflush_r+0xc>
 80089c8:	4b05      	ldr	r3, [pc, #20]	; (80089e0 <_fflush_r+0x70>)
 80089ca:	429c      	cmp	r4, r3
 80089cc:	d101      	bne.n	80089d2 <_fflush_r+0x62>
 80089ce:	68ac      	ldr	r4, [r5, #8]
 80089d0:	e7df      	b.n	8008992 <_fflush_r+0x22>
 80089d2:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <_fflush_r+0x74>)
 80089d4:	429c      	cmp	r4, r3
 80089d6:	bf08      	it	eq
 80089d8:	68ec      	ldreq	r4, [r5, #12]
 80089da:	e7da      	b.n	8008992 <_fflush_r+0x22>
 80089dc:	0800957c 	.word	0x0800957c
 80089e0:	0800959c 	.word	0x0800959c
 80089e4:	0800955c 	.word	0x0800955c

080089e8 <std>:
 80089e8:	2300      	movs	r3, #0
 80089ea:	b510      	push	{r4, lr}
 80089ec:	4604      	mov	r4, r0
 80089ee:	e9c0 3300 	strd	r3, r3, [r0]
 80089f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089f6:	6083      	str	r3, [r0, #8]
 80089f8:	8181      	strh	r1, [r0, #12]
 80089fa:	6643      	str	r3, [r0, #100]	; 0x64
 80089fc:	81c2      	strh	r2, [r0, #14]
 80089fe:	6183      	str	r3, [r0, #24]
 8008a00:	4619      	mov	r1, r3
 8008a02:	2208      	movs	r2, #8
 8008a04:	305c      	adds	r0, #92	; 0x5c
 8008a06:	f7fd fbbb 	bl	8006180 <memset>
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <std+0x38>)
 8008a0c:	6224      	str	r4, [r4, #32]
 8008a0e:	6263      	str	r3, [r4, #36]	; 0x24
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <std+0x3c>)
 8008a12:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <std+0x40>)
 8008a16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a18:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <std+0x44>)
 8008a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	bf00      	nop
 8008a20:	08008d39 	.word	0x08008d39
 8008a24:	08008d5b 	.word	0x08008d5b
 8008a28:	08008d93 	.word	0x08008d93
 8008a2c:	08008db7 	.word	0x08008db7

08008a30 <_cleanup_r>:
 8008a30:	4901      	ldr	r1, [pc, #4]	; (8008a38 <_cleanup_r+0x8>)
 8008a32:	f000 b8af 	b.w	8008b94 <_fwalk_reent>
 8008a36:	bf00      	nop
 8008a38:	08008971 	.word	0x08008971

08008a3c <__sfmoreglue>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	2568      	movs	r5, #104	; 0x68
 8008a40:	1e4a      	subs	r2, r1, #1
 8008a42:	4355      	muls	r5, r2
 8008a44:	460e      	mov	r6, r1
 8008a46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a4a:	f7ff faa3 	bl	8007f94 <_malloc_r>
 8008a4e:	4604      	mov	r4, r0
 8008a50:	b140      	cbz	r0, 8008a64 <__sfmoreglue+0x28>
 8008a52:	2100      	movs	r1, #0
 8008a54:	e9c0 1600 	strd	r1, r6, [r0]
 8008a58:	300c      	adds	r0, #12
 8008a5a:	60a0      	str	r0, [r4, #8]
 8008a5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a60:	f7fd fb8e 	bl	8006180 <memset>
 8008a64:	4620      	mov	r0, r4
 8008a66:	bd70      	pop	{r4, r5, r6, pc}

08008a68 <__sfp_lock_acquire>:
 8008a68:	4801      	ldr	r0, [pc, #4]	; (8008a70 <__sfp_lock_acquire+0x8>)
 8008a6a:	f000 b8b3 	b.w	8008bd4 <__retarget_lock_acquire_recursive>
 8008a6e:	bf00      	nop
 8008a70:	20000380 	.word	0x20000380

08008a74 <__sfp_lock_release>:
 8008a74:	4801      	ldr	r0, [pc, #4]	; (8008a7c <__sfp_lock_release+0x8>)
 8008a76:	f000 b8ae 	b.w	8008bd6 <__retarget_lock_release_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	20000380 	.word	0x20000380

08008a80 <__sinit_lock_acquire>:
 8008a80:	4801      	ldr	r0, [pc, #4]	; (8008a88 <__sinit_lock_acquire+0x8>)
 8008a82:	f000 b8a7 	b.w	8008bd4 <__retarget_lock_acquire_recursive>
 8008a86:	bf00      	nop
 8008a88:	2000037b 	.word	0x2000037b

08008a8c <__sinit_lock_release>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	; (8008a94 <__sinit_lock_release+0x8>)
 8008a8e:	f000 b8a2 	b.w	8008bd6 <__retarget_lock_release_recursive>
 8008a92:	bf00      	nop
 8008a94:	2000037b 	.word	0x2000037b

08008a98 <__sinit>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	f7ff fff0 	bl	8008a80 <__sinit_lock_acquire>
 8008aa0:	69a3      	ldr	r3, [r4, #24]
 8008aa2:	b11b      	cbz	r3, 8008aac <__sinit+0x14>
 8008aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa8:	f7ff bff0 	b.w	8008a8c <__sinit_lock_release>
 8008aac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ab2:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <__sinit+0x68>)
 8008ab4:	4a13      	ldr	r2, [pc, #76]	; (8008b04 <__sinit+0x6c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	bf08      	it	eq
 8008abe:	2301      	moveq	r3, #1
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	bf08      	it	eq
 8008ac4:	61a3      	streq	r3, [r4, #24]
 8008ac6:	f000 f81f 	bl	8008b08 <__sfp>
 8008aca:	6060      	str	r0, [r4, #4]
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 f81b 	bl	8008b08 <__sfp>
 8008ad2:	60a0      	str	r0, [r4, #8]
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 f817 	bl	8008b08 <__sfp>
 8008ada:	2200      	movs	r2, #0
 8008adc:	2104      	movs	r1, #4
 8008ade:	60e0      	str	r0, [r4, #12]
 8008ae0:	6860      	ldr	r0, [r4, #4]
 8008ae2:	f7ff ff81 	bl	80089e8 <std>
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	2109      	movs	r1, #9
 8008aea:	68a0      	ldr	r0, [r4, #8]
 8008aec:	f7ff ff7c 	bl	80089e8 <std>
 8008af0:	2202      	movs	r2, #2
 8008af2:	2112      	movs	r1, #18
 8008af4:	68e0      	ldr	r0, [r4, #12]
 8008af6:	f7ff ff77 	bl	80089e8 <std>
 8008afa:	2301      	movs	r3, #1
 8008afc:	61a3      	str	r3, [r4, #24]
 8008afe:	e7d1      	b.n	8008aa4 <__sinit+0xc>
 8008b00:	080091d8 	.word	0x080091d8
 8008b04:	08008a31 	.word	0x08008a31

08008b08 <__sfp>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	4607      	mov	r7, r0
 8008b0c:	f7ff ffac 	bl	8008a68 <__sfp_lock_acquire>
 8008b10:	4b1e      	ldr	r3, [pc, #120]	; (8008b8c <__sfp+0x84>)
 8008b12:	681e      	ldr	r6, [r3, #0]
 8008b14:	69b3      	ldr	r3, [r6, #24]
 8008b16:	b913      	cbnz	r3, 8008b1e <__sfp+0x16>
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7ff ffbd 	bl	8008a98 <__sinit>
 8008b1e:	3648      	adds	r6, #72	; 0x48
 8008b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	d503      	bpl.n	8008b30 <__sfp+0x28>
 8008b28:	6833      	ldr	r3, [r6, #0]
 8008b2a:	b30b      	cbz	r3, 8008b70 <__sfp+0x68>
 8008b2c:	6836      	ldr	r6, [r6, #0]
 8008b2e:	e7f7      	b.n	8008b20 <__sfp+0x18>
 8008b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b34:	b9d5      	cbnz	r5, 8008b6c <__sfp+0x64>
 8008b36:	4b16      	ldr	r3, [pc, #88]	; (8008b90 <__sfp+0x88>)
 8008b38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b3c:	60e3      	str	r3, [r4, #12]
 8008b3e:	6665      	str	r5, [r4, #100]	; 0x64
 8008b40:	f000 f847 	bl	8008bd2 <__retarget_lock_init_recursive>
 8008b44:	f7ff ff96 	bl	8008a74 <__sfp_lock_release>
 8008b48:	2208      	movs	r2, #8
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b54:	6025      	str	r5, [r4, #0]
 8008b56:	61a5      	str	r5, [r4, #24]
 8008b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b5c:	f7fd fb10 	bl	8006180 <memset>
 8008b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b68:	4620      	mov	r0, r4
 8008b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b6c:	3468      	adds	r4, #104	; 0x68
 8008b6e:	e7d9      	b.n	8008b24 <__sfp+0x1c>
 8008b70:	2104      	movs	r1, #4
 8008b72:	4638      	mov	r0, r7
 8008b74:	f7ff ff62 	bl	8008a3c <__sfmoreglue>
 8008b78:	4604      	mov	r4, r0
 8008b7a:	6030      	str	r0, [r6, #0]
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d1d5      	bne.n	8008b2c <__sfp+0x24>
 8008b80:	f7ff ff78 	bl	8008a74 <__sfp_lock_release>
 8008b84:	230c      	movs	r3, #12
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	e7ee      	b.n	8008b68 <__sfp+0x60>
 8008b8a:	bf00      	nop
 8008b8c:	080091d8 	.word	0x080091d8
 8008b90:	ffff0001 	.word	0xffff0001

08008b94 <_fwalk_reent>:
 8008b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b98:	4606      	mov	r6, r0
 8008b9a:	4688      	mov	r8, r1
 8008b9c:	2700      	movs	r7, #0
 8008b9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ba6:	f1b9 0901 	subs.w	r9, r9, #1
 8008baa:	d505      	bpl.n	8008bb8 <_fwalk_reent+0x24>
 8008bac:	6824      	ldr	r4, [r4, #0]
 8008bae:	2c00      	cmp	r4, #0
 8008bb0:	d1f7      	bne.n	8008ba2 <_fwalk_reent+0xe>
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb8:	89ab      	ldrh	r3, [r5, #12]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d907      	bls.n	8008bce <_fwalk_reent+0x3a>
 8008bbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	d003      	beq.n	8008bce <_fwalk_reent+0x3a>
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	4630      	mov	r0, r6
 8008bca:	47c0      	blx	r8
 8008bcc:	4307      	orrs	r7, r0
 8008bce:	3568      	adds	r5, #104	; 0x68
 8008bd0:	e7e9      	b.n	8008ba6 <_fwalk_reent+0x12>

08008bd2 <__retarget_lock_init_recursive>:
 8008bd2:	4770      	bx	lr

08008bd4 <__retarget_lock_acquire_recursive>:
 8008bd4:	4770      	bx	lr

08008bd6 <__retarget_lock_release_recursive>:
 8008bd6:	4770      	bx	lr

08008bd8 <__swhatbuf_r>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	460e      	mov	r6, r1
 8008bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be0:	4614      	mov	r4, r2
 8008be2:	2900      	cmp	r1, #0
 8008be4:	461d      	mov	r5, r3
 8008be6:	b096      	sub	sp, #88	; 0x58
 8008be8:	da07      	bge.n	8008bfa <__swhatbuf_r+0x22>
 8008bea:	2300      	movs	r3, #0
 8008bec:	602b      	str	r3, [r5, #0]
 8008bee:	89b3      	ldrh	r3, [r6, #12]
 8008bf0:	061a      	lsls	r2, r3, #24
 8008bf2:	d410      	bmi.n	8008c16 <__swhatbuf_r+0x3e>
 8008bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf8:	e00e      	b.n	8008c18 <__swhatbuf_r+0x40>
 8008bfa:	466a      	mov	r2, sp
 8008bfc:	f000 f902 	bl	8008e04 <_fstat_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	dbf2      	blt.n	8008bea <__swhatbuf_r+0x12>
 8008c04:	9a01      	ldr	r2, [sp, #4]
 8008c06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c0e:	425a      	negs	r2, r3
 8008c10:	415a      	adcs	r2, r3
 8008c12:	602a      	str	r2, [r5, #0]
 8008c14:	e7ee      	b.n	8008bf4 <__swhatbuf_r+0x1c>
 8008c16:	2340      	movs	r3, #64	; 0x40
 8008c18:	2000      	movs	r0, #0
 8008c1a:	6023      	str	r3, [r4, #0]
 8008c1c:	b016      	add	sp, #88	; 0x58
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}

08008c20 <__smakebuf_r>:
 8008c20:	898b      	ldrh	r3, [r1, #12]
 8008c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c24:	079d      	lsls	r5, r3, #30
 8008c26:	4606      	mov	r6, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	d507      	bpl.n	8008c3c <__smakebuf_r+0x1c>
 8008c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	2301      	movs	r3, #1
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	b002      	add	sp, #8
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	466a      	mov	r2, sp
 8008c3e:	ab01      	add	r3, sp, #4
 8008c40:	f7ff ffca 	bl	8008bd8 <__swhatbuf_r>
 8008c44:	9900      	ldr	r1, [sp, #0]
 8008c46:	4605      	mov	r5, r0
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff f9a3 	bl	8007f94 <_malloc_r>
 8008c4e:	b948      	cbnz	r0, 8008c64 <__smakebuf_r+0x44>
 8008c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c54:	059a      	lsls	r2, r3, #22
 8008c56:	d4ef      	bmi.n	8008c38 <__smakebuf_r+0x18>
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	f043 0302 	orr.w	r3, r3, #2
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	e7e3      	b.n	8008c2c <__smakebuf_r+0xc>
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <__smakebuf_r+0x7c>)
 8008c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	6020      	str	r0, [r4, #0]
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	81a3      	strh	r3, [r4, #12]
 8008c72:	9b00      	ldr	r3, [sp, #0]
 8008c74:	6120      	str	r0, [r4, #16]
 8008c76:	6163      	str	r3, [r4, #20]
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	b15b      	cbz	r3, 8008c94 <__smakebuf_r+0x74>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c82:	f000 f8d1 	bl	8008e28 <_isatty_r>
 8008c86:	b128      	cbz	r0, 8008c94 <__smakebuf_r+0x74>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	f043 0301 	orr.w	r3, r3, #1
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	89a0      	ldrh	r0, [r4, #12]
 8008c96:	4305      	orrs	r5, r0
 8008c98:	81a5      	strh	r5, [r4, #12]
 8008c9a:	e7cd      	b.n	8008c38 <__smakebuf_r+0x18>
 8008c9c:	08008a31 	.word	0x08008a31

08008ca0 <_malloc_usable_size_r>:
 8008ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca4:	1f18      	subs	r0, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfbc      	itt	lt
 8008caa:	580b      	ldrlt	r3, [r1, r0]
 8008cac:	18c0      	addlt	r0, r0, r3
 8008cae:	4770      	bx	lr

08008cb0 <_raise_r>:
 8008cb0:	291f      	cmp	r1, #31
 8008cb2:	b538      	push	{r3, r4, r5, lr}
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	d904      	bls.n	8008cc4 <_raise_r+0x14>
 8008cba:	2316      	movs	r3, #22
 8008cbc:	6003      	str	r3, [r0, #0]
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008cc6:	b112      	cbz	r2, 8008cce <_raise_r+0x1e>
 8008cc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ccc:	b94b      	cbnz	r3, 8008ce2 <_raise_r+0x32>
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 f830 	bl	8008d34 <_getpid_r>
 8008cd4:	462a      	mov	r2, r5
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	4620      	mov	r0, r4
 8008cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cde:	f000 b817 	b.w	8008d10 <_kill_r>
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d00a      	beq.n	8008cfc <_raise_r+0x4c>
 8008ce6:	1c59      	adds	r1, r3, #1
 8008ce8:	d103      	bne.n	8008cf2 <_raise_r+0x42>
 8008cea:	2316      	movs	r3, #22
 8008cec:	6003      	str	r3, [r0, #0]
 8008cee:	2001      	movs	r0, #1
 8008cf0:	e7e7      	b.n	8008cc2 <_raise_r+0x12>
 8008cf2:	2400      	movs	r4, #0
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cfa:	4798      	blx	r3
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	e7e0      	b.n	8008cc2 <_raise_r+0x12>

08008d00 <raise>:
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <raise+0xc>)
 8008d02:	4601      	mov	r1, r0
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	f7ff bfd3 	b.w	8008cb0 <_raise_r>
 8008d0a:	bf00      	nop
 8008d0c:	2000000c 	.word	0x2000000c

08008d10 <_kill_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	2300      	movs	r3, #0
 8008d14:	4d06      	ldr	r5, [pc, #24]	; (8008d30 <_kill_r+0x20>)
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	602b      	str	r3, [r5, #0]
 8008d1e:	f7f9 fcc2 	bl	80026a6 <_kill>
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	d102      	bne.n	8008d2c <_kill_r+0x1c>
 8008d26:	682b      	ldr	r3, [r5, #0]
 8008d28:	b103      	cbz	r3, 8008d2c <_kill_r+0x1c>
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	bd38      	pop	{r3, r4, r5, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000374 	.word	0x20000374

08008d34 <_getpid_r>:
 8008d34:	f7f9 bcb0 	b.w	8002698 <_getpid>

08008d38 <__sread>:
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	f000 f894 	bl	8008e6c <_read_r>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	bfab      	itete	ge
 8008d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d4c:	181b      	addge	r3, r3, r0
 8008d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d52:	bfac      	ite	ge
 8008d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d56:	81a3      	strhlt	r3, [r4, #12]
 8008d58:	bd10      	pop	{r4, pc}

08008d5a <__swrite>:
 8008d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	461f      	mov	r7, r3
 8008d60:	898b      	ldrh	r3, [r1, #12]
 8008d62:	4605      	mov	r5, r0
 8008d64:	05db      	lsls	r3, r3, #23
 8008d66:	460c      	mov	r4, r1
 8008d68:	4616      	mov	r6, r2
 8008d6a:	d505      	bpl.n	8008d78 <__swrite+0x1e>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d74:	f000 f868 	bl	8008e48 <_lseek_r>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d80:	81a3      	strh	r3, [r4, #12]
 8008d82:	4628      	mov	r0, r5
 8008d84:	463b      	mov	r3, r7
 8008d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8e:	f000 b817 	b.w	8008dc0 <_write_r>

08008d92 <__sseek>:
 8008d92:	b510      	push	{r4, lr}
 8008d94:	460c      	mov	r4, r1
 8008d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9a:	f000 f855 	bl	8008e48 <_lseek_r>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	bf15      	itete	ne
 8008da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dae:	81a3      	strheq	r3, [r4, #12]
 8008db0:	bf18      	it	ne
 8008db2:	81a3      	strhne	r3, [r4, #12]
 8008db4:	bd10      	pop	{r4, pc}

08008db6 <__sclose>:
 8008db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dba:	f000 b813 	b.w	8008de4 <_close_r>
	...

08008dc0 <_write_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4d05      	ldr	r5, [pc, #20]	; (8008de0 <_write_r+0x20>)
 8008dcc:	602a      	str	r2, [r5, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f7f9 fca0 	bl	8002714 <_write>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_write_r+0x1e>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_write_r+0x1e>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	20000374 	.word	0x20000374

08008de4 <_close_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	2300      	movs	r3, #0
 8008de8:	4d05      	ldr	r5, [pc, #20]	; (8008e00 <_close_r+0x1c>)
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f9 fcac 	bl	800274c <_close>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_close_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_close_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20000374 	.word	0x20000374

08008e04 <_fstat_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	2300      	movs	r3, #0
 8008e08:	4d06      	ldr	r5, [pc, #24]	; (8008e24 <_fstat_r+0x20>)
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	4611      	mov	r1, r2
 8008e10:	602b      	str	r3, [r5, #0]
 8008e12:	f7f9 fca6 	bl	8002762 <_fstat>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	d102      	bne.n	8008e20 <_fstat_r+0x1c>
 8008e1a:	682b      	ldr	r3, [r5, #0]
 8008e1c:	b103      	cbz	r3, 8008e20 <_fstat_r+0x1c>
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	bd38      	pop	{r3, r4, r5, pc}
 8008e22:	bf00      	nop
 8008e24:	20000374 	.word	0x20000374

08008e28 <_isatty_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	4d05      	ldr	r5, [pc, #20]	; (8008e44 <_isatty_r+0x1c>)
 8008e2e:	4604      	mov	r4, r0
 8008e30:	4608      	mov	r0, r1
 8008e32:	602b      	str	r3, [r5, #0]
 8008e34:	f7f9 fca4 	bl	8002780 <_isatty>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_isatty_r+0x1a>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_isatty_r+0x1a>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	20000374 	.word	0x20000374

08008e48 <_lseek_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	2200      	movs	r2, #0
 8008e52:	4d05      	ldr	r5, [pc, #20]	; (8008e68 <_lseek_r+0x20>)
 8008e54:	602a      	str	r2, [r5, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f7f9 fc9c 	bl	8002794 <_lseek>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_lseek_r+0x1e>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_lseek_r+0x1e>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20000374 	.word	0x20000374

08008e6c <_read_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	2200      	movs	r2, #0
 8008e76:	4d05      	ldr	r5, [pc, #20]	; (8008e8c <_read_r+0x20>)
 8008e78:	602a      	str	r2, [r5, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f7f9 fc2d 	bl	80026da <_read>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_read_r+0x1e>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_read_r+0x1e>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	20000374 	.word	0x20000374

08008e90 <_init>:
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	bf00      	nop
 8008e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e96:	bc08      	pop	{r3}
 8008e98:	469e      	mov	lr, r3
 8008e9a:	4770      	bx	lr

08008e9c <_fini>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	bf00      	nop
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr
